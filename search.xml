<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>6个字符的JavaScript之旅</title>
    <url>/2016/10/27/6%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%9A%84JavaScript%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h1 id="探秘JavaScript中的六个字符"><a href="#探秘JavaScript中的六个字符" class="headerlink" title="探秘JavaScript中的六个字符"></a>探秘JavaScript中的六个字符</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc/">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@zhaomenghuan">小青年</a><br>链接：<a href="http://www.zcfy.cc/article/1370">http://www.zcfy.cc/article/1370</a><br>原文：<a href="http://jazcash.com/a-javascript-journey-with-only-six-characters/">http://jazcash.com/a-javascript-journey-with-only-six-characters/</a></p>
</blockquote>
<p>JavaScript 是一个奇怪而有趣的语言，我们可以写一些疯狂却仍然有效的代码。它试图帮助我们把事情转换到基于我们如何对待他们的特定类型。</p>
<p>如果我们添加一个字符串,JavaScript会假定我们希望为文本形式表示,所以将它转换为一个字符串。如果我们添加一个正负前缀符号,JavaScript会假定我们希望为数值形式表示,如果可能的话,对我们来说并将字符串转换为一个数字。如果我们添加一个否定符号，JavaScript会将将字符串转换为一个布尔值。</p>
<p>我们可以使用Javascript中<code>[</code>,<code>]</code>,<code>(</code>,<code>)</code>,<code>!</code> and <code>+</code>这六个符号写一些神奇的代码。如果你现在不是在手机，你可以打开浏览器的控制台，你可以将任何代码示例粘贴到控制台，并且代码值为true。</p>
<p>让我们从最基本的开始，要记住一些黄金规则:</p>
<p><code>!</code>后面跟的字符会被转换成布尔值</p>
<p><code>+</code>后面跟的字符会被转换成数值</p>
<p><code>[]</code>后面跟的字符会被转换成字符串</p>
<p>来看下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![] === <span class="literal">false</span></span><br><span class="line">+[] === <span class="number">0</span></span><br><span class="line">[]+[] === <span class="string">&quot;&quot;</span> </span><br></pre></td></tr></table></figure>

<p>另一件事你应该知道的是,它可以从字符串使用方括号检索特定的字母，像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello&quot;</span>[<span class="number">0</span>] === <span class="string">&quot;h&quot;</span></span><br></pre></td></tr></table></figure>

<p>还记得可以使多个数字号码通过添加字符串表示在一起,然后把整个表达式转换成一个数字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+(<span class="string">&quot;1&quot;</span> + <span class="string">&quot;1&quot;</span>) === <span class="number">11</span> </span><br></pre></td></tr></table></figure>

<p>我们们继续把一些东西结合在一起得到字母<code>a</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![] === <span class="literal">false</span></span><br><span class="line">![]+[] === <span class="string">&quot;false&quot;</span></span><br><span class="line">+!![] === <span class="number">1</span></span><br><span class="line">------------------------</span><br><span class="line">(![]+[])[+!![]] === <span class="string">&quot;a&quot;</span>  <span class="comment">// same as &quot;false&quot;[1] </span></span><br></pre></td></tr></table></figure>

<p>举一反三！</p>
<p>我们可以通过<code>true</code> 和 <code>false</code>得到相似的字母<code>a</code>,<code>e</code>,<code>f</code>,<code>l</code>,<code>r</code>,<code>s</code>,<code>t</code>,<code>u</code>，那么我们可以从其他地方得到的字母吗？</p>
<p>我们可以通过一些特别的式子如<code>[][[]]</code>得到<code>undefined</code>，利用我们上面讲到的黄金法则得到另外的字母<code>d</code>,<code>i</code> 和 <code>n</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`[][[]] + [] === &quot;undefined&quot;`</span> </span><br></pre></td></tr></table></figure>

<p>到目前为止，利用我们已经获得的所有字母,我们可以拼<code>fill</code>, <code>filter</code> 和 <code>find</code>。当然也有一些其他的单词，我们也可以拼写，但这些单词最重要的是,他们都是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Mutator_methods">数组的方法</a>。这意味着他们是数组对象的一部分,可以直接调用数组实例，如：<code>[2,1].sort()</code>。</p>
<p>现在，了解JavaScript的另一件重要的特性是一个对象的属性可以通过<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors">点符号<code>.</code>或方括号<code>[]</code></a>访问。上述数组方法是数组对象本身的属性，我们可以使用方括号代替点符号调用这些方法。</p>
<p>所以<code>[2,1][&quot;sort&quot;]()</code> 等效于 <code>[2,1].sort()</code>.</p>
<p>我们继续看看,当我们试图使用一个数组的方法会发生什么,我们可以使用到目前为止我们拼写的但没有调用的字母。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[][<span class="string">&quot;fill&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>这会得到<code>function fill() &#123; [native code] &#125;</code>，我们可以把这个方法头作为一个字符串再次使用我们的黄金法则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[][<span class="string">&quot;fill&quot;</span>]+[] === <span class="string">&quot;function fill() &#123; [native code] &#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>所以现在我们又得到其他的字符：<code>c</code>,<code>o</code>,<code>v</code>,<code>(</code>,<code>)</code>,<code>&#123;</code>,<code>[</code>,<code>]</code>,<code>&#125;</code>。</p>
<p>随着我们新得到的<code>c</code>和<code>o</code>，我们现在可以形成<code>constructor</code>这个单词。构造函数是一个方法,所有JS对象仅返回自己的构造函数。</p>
<p>到目前为止我们已经处理的对象，我们可以得到它用字符串表示的构造器函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>[<span class="string">&quot;constructor&quot;</span>] + [] === <span class="string">&quot;function Boolean() &#123; [native code] &#125;&quot;</span>  </span><br><span class="line"><span class="number">0</span>[<span class="string">&quot;constructor&quot;</span>] + []    === <span class="string">&quot;function Number() &#123; [native code] &#125;&quot;</span>  </span><br><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;constructor&quot;</span>] + []   === <span class="string">&quot;function String() &#123; [native code] &#125;&quot;</span></span><br><span class="line">[][<span class="string">&quot;constructor&quot;</span>] + []   === <span class="string">&quot;function Array() &#123; [native code] &#125;&quot;</span></span><br><span class="line">(&#123;&#125;)[<span class="string">&quot;constructor&quot;</span>] + [] === <span class="string">&quot;function Object() &#123; [native code] &#125;&quot;</span> </span><br></pre></td></tr></table></figure>

<p>通过这些式子，我们可以将下面的字符加入到我们的库中：<br><code>B</code>,<code>N</code>,<code>S</code>,<code>A</code>,<code>O</code>,<code>m</code>,<code>b</code>,<code>g</code>,<code>y</code>,<code>j</code>。</p>
<p>现在我们可以构造一个我们可以使用方括号的函数”toString”&#96;,我们可以这样调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">10</span>)[<span class="string">&quot;toString&quot;</span>]() === <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用我们的黄金法则，我们已经可以将任何我们想要转换成一个字符串，但是上面这个式子怎么用呢？</p>
<p>好吧，我告诉你，<code>Number</code>类型的<code>toString</code>方法有一个称为<code>radix</code>(“基数”)的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString">秘密的论点</a>。它可以将数值在转换为一个字符串之前先经过基数换算，像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">12</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">10</span>) === <span class="string">&quot;12&quot;</span>  <span class="comment">// 十进制</span></span><br><span class="line">(<span class="number">12</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">2</span>) === <span class="string">&quot;1100&quot;</span> <span class="comment">// 二进制</span></span><br><span class="line">(<span class="number">12</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">8</span>) === <span class="string">&quot;14&quot;</span>   <span class="comment">// 八进制</span></span><br><span class="line">(<span class="number">12</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>) === <span class="string">&quot;c&quot;</span>   <span class="comment">// 十六进制 </span></span><br></pre></td></tr></table></figure>

<p>但是为什么基数只写到16？最大值是36，包括所有的字符<code>0</code>-<code>9</code> 和 <code>a</code>-<code>z</code>，所以现在我们可以得到任何我们想要的字母数字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">10</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">36</span>) === <span class="string">&quot;a&quot;</span></span><br><span class="line">(<span class="number">35</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">36</span>) === <span class="string">&quot;z&quot;</span> </span><br></pre></td></tr></table></figure>

<p>太棒了!但是其它符号如标点符号和大写字母呢？我们接着深入探索。</p>
<p>这取决于你的JS执行时，它可能会或可能不会访问特定的预定义的对象或数据。如果你在浏览器中运行它,那么你可以访问一些存在的<a href="https://developer.mozilla.org/en-US/docs/tag/HTML%20wrapper%20methods">HTML包装器方法</a>。</p>
<p>例如，<code>bold</code>是一个包装在<code>&lt;&gt;</code>标签中的字符串方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;test&quot;</span>[<span class="string">&quot;bold&quot;</span>]() === <span class="string">&quot;&lt;b&gt;test&lt;/b&gt;&quot;</span> </span><br></pre></td></tr></table></figure>

<p>通过这个我们得到<code>&lt;&gt;</code>和<code>/</code>两个字符。</p>
<p>你可能听说过<code>escape</code>方法，它主要将字符串转换为一个URI友好的格式，可以让简单的浏览器解释。如果我们传递一个空格字符，我们得到的”%20”。</p>
<p>这里有一个工具可以自动将每个字符自动转换。<br>工具地址：<a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a><br>源代码地址：<a href="https://raw.githubusercontent.com/aemkei/jsfuck/master/jsfuck.js">https://raw.githubusercontent.com/aemkei/jsfuck/master/jsfuck.js</a></p>
<h2 id="为什么这几个字符有用？"><a href="#为什么这几个字符有用？" class="headerlink" title="为什么这几个字符有用？"></a>为什么这几个字符有用？</h2><p>它不是易趣网做的一些不好的事情,不久前允许卖家将执行JS在页面中使用只能使用这些字符，但它是一个相当罕见的攻击向量。有些人说混淆，但事实上，有更好的方法混淆。</p>
<p>最后，希望你会喜欢本次探秘之旅。</p>
<hr>
<p>资源：</p>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/JSFuck">https://en.wikipedia.org/wiki/JSFuck</a></p>
</li>
<li><p><a href="https://esolangs.org/wiki/JSFuck">https://esolangs.org/wiki/JSFuck</a></p>
</li>
<li><p><a href="http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html">http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html</a></p>
</li>
<li><p><a href="https://raw.githubusercontent.com/aemkei/jsfuck/master/jsfuck.js">https://raw.githubusercontent.com/aemkei/jsfuck/master/jsfuck.js</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android微信真机联调</title>
    <url>/2018/06/05/Android%E5%BE%AE%E4%BF%A1%E7%9C%9F%E6%9C%BA%E8%81%94%E8%B0%83/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/Android%E5%BE%AE%E4%BF%A1%E7%9C%9F%E6%9C%BA%E8%81%94%E8%B0%83/unnamed.png"></p>
<span id="more"></span>

<h2 id="chrome开发者工具调试"><a href="#chrome开发者工具调试" class="headerlink" title="chrome开发者工具调试"></a>chrome开发者工具调试</h2><ol>
<li>使用微信打开 <code>http://debugx5.qq.com</code></li>
<li>在打开的网页中选择 【信息】-&gt;【TBS settings】，勾选 【是否打开 TBS 内核 Inspector 调试功能】<br><img data-src="//blogimg.jakeyu.top/Android%E5%BE%AE%E4%BF%A1%E7%9C%9F%E6%9C%BA%E8%81%94%E8%B0%83/WechatIMG8.png"></li>
<li>重启微信</li>
<li>开启安卓开发者调试工具，打开USB调试</li>
<li>使用chrome打开 <code>chrome://inspect</code></li>
</ol>
<div class="swiper">
![](//blogimg.jakeyu.top/Android微信真机联调/Jietu20180605-171919.png)
![](//blogimg.jakeyu.top/Android微信真机联调/Jietu20180605-172348.png)
</div>

<h2 id="TBS-Studio"><a href="#TBS-Studio" class="headerlink" title="TBS Studio"></a>TBS Studio</h2><p><a href="http://bbs.mb.qq.com/thread-1416936-1-1.html">官方文档</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装mongodb数据库</title>
    <url>/2016/10/21/CentOS%E5%AE%89%E8%A3%85mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>mongodb是非关系数据库，存储json格式，所以特别适合使用js操作数据库。</p>
<p><img data-src="//blogimg.jakeyu.top/20170327149054574361411.png"></p>
<span id="more"></span>

<h3 id="安装-mongodb"><a href="#安装-mongodb" class="headerlink" title="安装 mongodb"></a>安装 mongodb</h3><h4 id="yum-仓库配置"><a href="#yum-仓库配置" class="headerlink" title="yum 仓库配置"></a>yum 仓库配置</h4><blockquote>
<p>vi &#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo</p>
</blockquote>
<p>内容为：</p>
<blockquote>
<p>[mongodb-org-3.2]<br>name&#x3D;MongoDB Repository<br>baseurl&#x3D;<a href="https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/">https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/</a><br>gpgcheck&#x3D;0<br>enabled&#x3D;1</p>
</blockquote>
<h4 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb:"></a>安装mongodb:</h4><blockquote>
<p>yum install -y mongodb-org</p>
</blockquote>
<h4 id="使用mongodb"><a href="#使用mongodb" class="headerlink" title="使用mongodb:"></a>使用mongodb:</h4><p>启动:</p>
<blockquote>
<p>service mongod start</p>
</blockquote>
<p>停止:</p>
<blockquote>
<p>service mongod stop</p>
</blockquote>
<p>重启：</p>
<blockquote>
<p>service mongod restart</p>
</blockquote>
<p>客户端:</p>
<blockquote>
<p>mongo</p>
</blockquote>
<h3 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p>执行</p>
<blockquote>
<p>mongo<br>use admin</p>
</blockquote>
<p>接着我们创建一个用户，Mongodb在3.0版本时候去除了addUser这个方法，我们需要这样来创建用户</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">createUser</span>(</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">user</span>: <span class="string">&quot;&lt;username&gt;&quot;</span>,</span><br><span class="line">     <span class="attr">pwd</span>: <span class="string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">     <span class="attr">roles</span>: [ <span class="string">&quot;readWrite&quot;</span>, <span class="string">&quot;dbAdmin&quot;</span> ]</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//&lt;username&gt; 用户名</span></span><br><span class="line"><span class="comment">//&lt;password&gt; 密码</span></span><br></pre></td></tr></table></figure>

<h4 id="配置mongodb-conf"><a href="#配置mongodb-conf" class="headerlink" title="配置mongodb.conf"></a>配置mongodb.conf</h4><blockquote>
<p>vim &#x2F;etc&#x2F;mongod.conf</p>
</blockquote>
<p>修改下面配置</p>
<blockquote>
<p>#bindIp &#x3D; 127.0.0.1   &#x2F;&#x2F;注释此行</p>
</blockquote>
<p>重启mongodb</p>
<blockquote>
<p>service mongod restart</p>
</blockquote>
<h4 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h4><p>打开本地命令</p>
<blockquote>
<p>mongo 你的服务器ip地址:27017&#x2F;admin -u &lt;用户&gt; -p &lt;密码&gt;</p>
</blockquote>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><blockquote>
<p>service mongod stop</p>
</blockquote>
<h4 id="移除包"><a href="#移除包" class="headerlink" title="移除包"></a>移除包</h4><blockquote>
<p>yum erase $(rpm -qa | grep mongodb-org)</p>
</blockquote>
<h4 id="移除数据和日志文件"><a href="#移除数据和日志文件" class="headerlink" title="移除数据和日志文件"></a>移除数据和日志文件</h4><blockquote>
<p>rm -r &#x2F;var&#x2F;log&#x2F;mongodb<br>rm -r &#x2F;var&#x2F;lib&#x2F;mongo</p>
</blockquote>
<h3 id="关于更多mongodb操作，请查看"><a href="#关于更多mongodb操作，请查看" class="headerlink" title="关于更多mongodb操作，请查看"></a>关于更多mongodb操作，请查看</h3><p><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Content Security Policy (CSP) 介绍</title>
    <url>/2018/08/26/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>内容安全策略   (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。</p>
</blockquote>
<span id="more"></span>

<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>当我不经意间在 Twitter 页面 <code>view source</code> 后，发现了惊喜。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#1da1f2</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  svg &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#1da1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    fill: currentcolor;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">13px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">center</span>&gt;</span>If you’re not redirected soon, please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>use this link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;SG0bV9rOanQfzG0ccU8WQw==&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;app_shell_visited=1;path=/;max-age=5&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      location.<span class="title function_">replace</span>(location.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>相比平时看到的其他站点的源码，可以说是很清爽了。没有乱七八糟的标签，功能却一样不少。特别有迷惑性，以为这便是页面所有的源码，但查看 DevTools 的 Source 面板后很容易知道这并不是真实的 HTML 代码。但为何页面源码给出的是如此清爽的版本，这里先不研究。</p>
<p>把目光移向 script 标签时，发现一个不认识的 <code>nonce</code> 属性。它以及它后面的神秘字符串成功引起了我的好奇。再去看 Google 首页的源码，也有好些 <code>nonce</code> 的运用。是时候去了解一下这里的 <code>nonce</code> 是什么了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">! <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;SG0bV9rOanQfzG0ccU8WQw==&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;app_shell_visited=1;path=/;max-age=5&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    location.<span class="title function_">replace</span>(location.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Content-Security-Policy-CSP"><a href="#Content-Security-Policy-CSP" class="headerlink" title="Content Security Policy (CSP)"></a>Content Security Policy (CSP)</h1><p>要了解 <code>nonce</code>， 先了解 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">Content-Security-Policy(CSP)</a>。</p>
<p>我们都知道浏览器有同源策略（<a href="https://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a>）的安全限制，即每个站点只允许加载来自和自身同域（origin）的数据，<code>https://a.com</code> 是无法从 <code>https://b.com</code> 加载到资源的。每个站点被严格限制在了自已的孤岛上，自己就是一个沙盒，这样很安全，整个网络不会杂乱无章。主要地，它能解决大部分安全问题。假若没有同源策略，恶意代码能够轻松在浏览器端执行然后获取各种隐私信息：银行帐号，社交数据等。</p>
<blockquote>
<p>那网站间如何进行数据共享，当然是有办法的，了解下 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a>。</p>
</blockquote>
<p>现实中，问题是同源策略也并不是万无一失，跨域攻击 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Cross-site scripting (XSS)</a> 便包含五花八门绕开限制的手段，形式上通过向页面注入恶意代码完成信息的窃取或攻击。比如 UGC 类型的站点，因为内容依赖用户创建，这就开了很大一个口子，允许用户输入的内容运行在页面上。当然，因为我们都知道会有注入攻击，所以对用户输入的内容进行防 XSS 过滤也成了标配。</p>
<p>Content-Security-Policy 从另一方面给浏览器加了层防护，能极大地减少这种攻击的发生。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>CSP 通过告诉浏览器一系列规则，严格规定页面中哪些资源允许有哪些来源， 不在指定范围内的统统拒绝。相比同源策略，CSP 可以说是很严格了。</p>
<p>其实施有两种途径：</p>
<ul>
<li>服务器添加 <code>Content-Security-Policy</code> 响应头来指定规则</li>
<li>HTML 中添加 <meta> 标签来指定 <code>Content-Security-Policy</code> 规则</li>
</ul>
<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004494-f3c9bdf2-9e95-11e8-8793-e2966d79ecae.png"></p>
<p><em>mobile.twitter.com header 中的 CSP 规则</em></p>
<p>为了测试方便，以下示例均使用 <code>&lt;meta&gt;</code> 标签来开启 CSP 规则。但 <code>&lt;meta&gt;</code> 中有些指令是不能使用的，后面会了解到。只有响应头中才能使用全部的限制指令。</p>
<p>一个简单示例</p>
<p>创建一个 HTML 文件放入以下内容：</p>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27; https://unpkg.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在该测试文件所在目录开启一个本地 server 以访问，这里使用 Python 自带的 server:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure>

<p>然后访问 localhost:8000 以观察结果：</p>
<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004498-fdd37004-9e95-11e8-895d-53797ae105c1.png"></p>
<p>符合 CSP 规则情况下的正常访问</p>
<p>然后我们将 <code>Content-Security-Policy</code> 改成不允许任何资源再试一下：</p>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">-     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27; https://unpkg.com&quot;</span>&gt;</span></span><br><span class="line">+     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src ‘none’&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004501-0fac3a18-9e96-11e8-98bf-01e77f4a5e6a.png"></p>
<p><em>触发 CSP 规则资源被 block 的情况</em></p>
<p>下面我们来解释这里设置的 CSP 规则及理解为何资源加载失败。</p>
<p>CSP 规则<br>无论是 header 中还是 <code>&lt;meta&gt;</code> 标签中指定，其值的格式都是统一的，由一系列 CSP 指令（directive）组合而成。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: <span class="tag">&lt;<span class="name">policy-directive</span>&gt;</span>; <span class="tag">&lt;<span class="name">policy-directive</span>&gt;</span>…</span><br></pre></td></tr></table></figure>

<p>这里 directive，即指令，是 CSP 规范中规定用以详细详述某种资源的来源，比如前面示例中使用的 <code>script-src</code>，指定脚本可以有哪些合法来源，<code>img-src</code> 则指定图片，以下是常用指令：</p>
<ul>
<li><code>base-uri</code> 限制可出现在页面 <code>&lt;base&gt;</code> 标签中的链接。</li>
<li><code>child-src</code> 列出可用于 worker 及以 frame 形式嵌入的链接。 譬如: <code>child-src https://youtube.com</code> 表示只能从 Youtube 嵌入视频资源。</li>
<li><code>connect-src</code> 可发起连接的地址 (通过 XHR, WebSockets 或 EventSource)。</li>
<li><code>font-src</code> 字体来源。譬如，要使用 Google web fonts 则需要添加 <code>font-src https://themes.googleusercontent.com</code> 规则。</li>
<li><code>form-action</code> <code>&lt;form&gt;</code> 标签可提交的地址。</li>
<li><code>frame-ancestors</code> 当前页面可被哪些来源所嵌入（与 <code>child-src</code> 正好相反）。作用于 <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code>, <code>&lt;embed&gt;</code> 及 <code>&lt;applet&gt;</code>。 该指令不能通过 <code>&lt;meta&gt;</code> 指定且只对非 HTML文档类型的资源生效。</li>
<li><code>frame-src</code> 该指令已在 level 2 中废弃但会在 level 3 中恢复使用。未指定的情况下回退到 <code>tochild-src</code> 指令。</li>
<li><code>img-src</code> 指定图片来源。</li>
<li><code>media-src</code> 限制音视频资源的来源。</li>
<li><code>object-src</code> Flash 及其他插件的来源。</li>
<li><code>plugin-types</code> 限制页面中可加载的插件类型。</li>
<li><code>report-uri</code> 指定一个可接收 CSP 报告的地址，浏览器会在相应指令不通过时发送报告。不能通过 <code>&lt;meta&gt;</code> 标签来指定。</li>
<li><code>style-src</code> 限制样式文件的来源。</li>
<li><code>upgrade-insecure-requests</code> 指导客户端将页面地址重写，HTTP 转 HTTPS。用于站点中有大量旧地址需要重定向的情形。</li>
<li><code>worker-src</code> CSP Level 3 中的指令，规定可用于 worker, shared worker, 或 service worker 中的地址。</li>
</ul>
<blockquote>
<p><code>child-src</code>  与 <code>frame-ancestors</code>  看起来比较像。前者规定的是页面中可加载哪些 iframe，后者规定谁可以以 iframe 加载本页。 比如来自不同站点的两个网页 A 与 B，B，B 中有 iframe 加载了 A。那么</p>
<ul>
<li>A 的 frame-ancestors 需要包含 B</li>
<li>B 的 child-src 需要包含 A</li>
</ul>
</blockquote>
<p>默认情况下，这些指令都是最大条件开放的，可以理解为其默认值为 <code>*</code>。比如 <code>img-src</code>，如果不明确指定，则可以从所有地方加载图片资源。</p>
<p>还有种特殊的指令 <code>default-src</code>，如果指定了它的值，则相当于改变了这些未指定的指令的默认值。可以理解为，上面 <code>img-src</code> 如果没指定，本来其默认值是 <code>*</code>，可以加载所有来源的图片，但设置 <code>default-src</code> 后，默认值就成了 <code>default-src</code> 指定的值。</p>
<p>常见的做法会设置 <code>default-src ‘self’</code>，这样所有资源都被限制在了和页面同域下。如果此时想要加载从 CDN 来的图片，将图片来源单独添加上即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src ‘self’; img-src https://cdn.example.com</span><br></pre></td></tr></table></figure>

<p>现在来看开头那个示例，也许现在就能看明白了。因为页面中需要从 CDN 加载 React 库，所以我们<code>&lt;meta&gt;</code> 标签指定了如下 CSP 规则：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">script-src &#x27;self&#x27; https://unpkg.com</span><br></pre></td></tr></table></figure>

<p>这里的 <code>self</code> 及后来改成的 <code>none</code> 是预设值，需用引号包裹，否则会当成 URI 来解析。这里的 CSP 规则表示页面中脚本只能从同域及 <code>https://unpkg.com</code> 加载。假如我们把后者去掉，同样会像上图截图那样 React 库会加载失败，同时控制台中会有加载失败的日志及被触发的规则列出来。</p>
<p>改成 <code>none</code> 之后表示页面不加载任何脚本，即使自己站点上的脚本都无法被加载执行。这里不妨试一下在 <code>csp_test.html</code> 旁边创建一个脚本文件 <code>test.js</code>:</p>
<p>test.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(‘来自 test.<span class="property">js</span> 的问候！’)</span><br></pre></td></tr></table></figure>

<p>同时在页面中引用它：</p>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;none&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面执行结果：</p>
<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004512-262c4df0-9e96-11e8-88e9-df4e08cb98f1.png"></p>
<p><em>script-src none 时页面将不加载任何脚本</em></p>
<p>是的，哪怕是自己的脚本也无法被加载执行。CSP 就是这样严格和明确，不存在模棱两可的情况。所以在指定来源时，我们需要确认 URI 是否正确。</p>
<h2 id="指令可接受的值"><a href="#指令可接受的值" class="headerlink" title="指令可接受的值"></a>指令可接受的值</h2><p>指令后面跟的来源，有两种写法</p>
<ul>
<li>预设值</li>
<li>URI 通配符</li>
</ul>
<h3 id="预设值"><a href="#预设值" class="headerlink" title="预设值"></a>预设值</h3><p>其中预设值有以下这些：</p>
<ul>
<li><code>none</code> 不匹配任何东西。</li>
<li><code>self</code> 匹配当前域，但不包括子域。比如 example.com 可以，api.example.com 则会匹配失败。</li>
<li><code>unsafe-inline</code> 允许内嵌的脚本及样式。是的，没看错，对于页面中内嵌的内容也是有相应限制规则的。</li>
<li><code>unsafe-eval</code> 允许通过字符串动态创建的脚本执行，比如 eval，setTimeout 等。</li>
</ul>
<p>特别地，在 CSP 的严格控制下，页面中内联脚本及样式也会受影响，在没有明确指定的情况下，其不能被浏览器执行。</p>
<p>考虑下面的代码：</p>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hi jack!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004521-427e59bc-9e96-11e8-9608-743f4e3bfefe.png"></p>
<p><em>未指定 CSP 的情况</em></p>
<p>根据 MDN 上的描述，如果站点未指定 CSP 无则，浏览器默认不会开启相应检查，所以上面一切运行正常，只受正常的同域限制 。</p>
<blockquote>
<p>If the site doesn’t offer the CSP header, browsers likewise use the standard same-origin policy.<br>— 来自 MDN 关于 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">Content Security Policy (CSP) 的描述</a></p>
</blockquote>
<p>我们加上 CSP 限制：</p>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hi jack!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置站点默认只信息同域的资源，但注意，这个设置并不包含内联的情况，所以结果会如下图。</p>
<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004526-54cf1a5c-9e96-11e8-8bca-c980e51a82ae.png"></p>
<p><em>内联代码被禁止</em></p>
<p>如何修复它呢。如果我们想要允许页面内的内联脚本或样式，则需要明确地通过 script-src 和 style-src 指出来。</p>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">!    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27; ‘unsave-inline’&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hi jack!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里 <code>default-src &#39;self&#39; ‘unsave-inline’</code> 配置默认可信的来源有这些： 和页面同域的，以及内联的。</p>
<p>刷新页面，样式及脚本又可以正常执行了。</p>
<p>通常是不建议使用 <code>unsafe-inline</code> 的（同样也不推荐使用 <code>unsafe-eval</code>），因为内联的脚本和样式维护不便，也不利用良好地组织代码。最佳实践是样式抽离到样式文件，脚本放到单独的 js 文件中加载，让 HTML 文件纯粹一点才是好的做法。即使是 <code>onclick=“myHandler”</code> 或 <code>href=“javascript:;”</code> 这种平时常见的写法，也属于内联的脚本，是需要改造的。</p>
<p>如果页面中非得用内联的写法，还有种方式。即页面中这些内联的脚本或样式标签，赋值一个加密串，这个加密串由服务器生成，同时这个加密串被添加到页面的响应头里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script nonce=<span class="string">&quot;EDNnf03nceIOfn39fn3e9h3sdfa&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 这里放置内联在 HTML 中的代码</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>页面 HTTP 响应头的 <code>Content-Security-Policy</code> 配置中包含相同的加密串：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;nonce-EDNnf03nceIOfn39fn3e9h3sdfa&#x27;</span><br></pre></td></tr></table></figure>

<p>注意这里的 <code>nonce-</code> 前缀。</p>
<p>这也就是文章开头看到的方式，到这里明白了。</p>
<p><code>&lt;style&gt;</code> 标签也是类似的处理。</p>
<p>这里的加密串一定是随机不可预测的，否则达不到安全效果，且每次页面被访问时重新生成。</p>
<p>除了使用 <code>nonce</code> 指定加密串，还可以通过混淆的 hash 值来达到目的。这种做法不需要在标签上加 <code>nonce</code> 而是将需要内嵌的代码本身使用加密算法生成 hash 后放入 CSP 指令中作为值使用，这里的加密算法支持 sha256, sha384 和 sha512。此时 CSP 中使用的前缀为相应的算法名。</p>
<p>hash 方式的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;Hello, world.&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng=&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>js 中好些地方是可以以字符串方式动态创建代码并执行，这被认为是不安全的，所以不推荐使用，一般最佳实践里都会提。</p>
<ul>
<li><code>setTimeout/setInterval</code> 可接收一段字符串作为代码执行。<code>js setTimeout(&#39;alert(1)&#39;,1000) </code>。</li>
<li><code>eval</code> 。<code>js eval(&#39;alert(1)&#39;) </code>。</li>
<li><code>Function</code> 构造函数。 <code>js new Function(&#39;alert(1)&#39;) </code>。</li>
</ul>
<p>和内联一样，有专门的指令 <code>unsafe-eval</code> 以允许类似代码的执行。但建议的做法是对于 <code>eval</code> 和 <code>Function</code> 构造器，杜绝使用，而 <code>setTimeout/setInterval</code> 可改造为非字符串形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setTimout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>除了上面的预设值，还可通过提供完整的 URI 或带通配符 <code>*</code> 的地址来匹配，以指定资源的合法来源。这里 URI 的规则和配置服务器的跨域响应头是一样的，参考 <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a>。</p>
<ul>
<li><code>*://*.example.com:*</code> 会匹配所有 <code>example.com</code> 的子域名，但不包括 <code>example.com</code>。</li>
<li><code>http://example.com</code> 和 <code>http://www.example.com</code> 是两个不同的 URI。</li>
<li><code>http://example.com:80</code> 和 <code>http://example.com</code> 也是是两个不同的 URI，虽然网站默认端口就是 80</li>
</ul>
<blockquote>
<p>根据维基百科 <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">Uniform Resource Identifier</a> 页面 给出的解释，一个完整的 URI 由以下部分组成：<br><code>URI = scheme:[//authority]path[?query][#fragment]</code></p>
<p>其中 <code>authority</code> 又包含：<br><code>authority = [userinfo@]host[:port]</code></p>
<p>所以你可以认为其中某一项不同，那都是两个 URI。了解这点很重要，一如上面列出的第一条例子 <code>*.example.com</code>， 我们很容易先入为主地认为既然已经允许了该域名的所有子域名，那必然 <code>example.com</code> 也是合法的。</p>
</blockquote>
<p>因为 URI 是进行动态匹配的，所以解释了上面提到的预设值缘何要加引号。因为如果不加引号的话， <code>self</code> 会表示 <code>host</code> 是 <code>self</code> 的资源地址，而不会表示原有的意思。</p>
<p>优先级<br>CSP 的配置是很灵活的。每条指令可指定多个来源，空格分开。而一条 CSP 规则可由多条指令组成，指令间用分号隔开。各指令间没有顺序的要求，因为每条指令都是各司其职。甚至一次响应中， <code>Content-Security-Policy</code> 响应头都可以重复设置。</p>
<p>我们来看这些情形下 CSP 的表现。</p>
<ul>
<li>对于设置了多次响应头的情况，最严格的规则会生效。比如下面两条响应头中，虽然 第二条中设置 <code>connect-src</code> 允许 <code>http://example.com/</code>，但第一条里面设置了 <code>connect-src</code> 为 <code>none</code>，所以更加严格的 <code>none</code> 会生效。参见 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#Multiple_content_security_policies">Multiple content security policies</a>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27; http://example.com;</span><br><span class="line">                         connect-src &#x27;none&#x27;;</span><br><span class="line">Content-Security-Policy: connect-src http://example.com/;</span><br><span class="line">                         script-src http://example.com/</span><br></pre></td></tr></table></figure>

<ul>
<li>同一指令多次指定，以第一个为准，后续的会被忽略。</li>
</ul>
<p><em>csp_test.html</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;;default-src &#x27;unsafe-inline&#x27;;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hi jack!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/44004528-6a4a9f5a-9e96-11e8-88b6-6aee3342ed08.png"></p>
<p><em>重复配置同一指令时效果展示</em></p>
<p>很智能地， 浏览器不仅会将检测不过的资源及指令打印出来，重复配置时被忽略的指令也会提示出来。</p>
<ul>
<li>指定 <code>default-src</code> 的情况下，它会充当 <code>Fetch</code> 类指令 的默认值。即 <code>default-src</code> 并不对所有指令生效，其他指令默认值仍是 <code>*</code>。</li>
</ul>
<h1 id="发送报告"><a href="#发送报告" class="headerlink" title="发送报告"></a>发送报告</h1><p>当检测到非法资源时，除了控制台看到的报错信息，也可以让浏览器将日志发送到服务器以供后续分析使用。接收报告的地址可在 <code>Content-Security-Policy</code> 响应头中通过 <code>report-uri</code> 指令来配置。当然，服务端需要编写相应的服务来接收该数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;; ...; report-uri /my_amazing_csp_report_parser;</span><br></pre></td></tr></table></figure>

<p>服务端拿到的是以 JSON 形式传来的数据。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;csp-report&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;document-uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.org/page.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;referrer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://evil.example.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;blocked-uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://evil.example.com/evil.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;violated-directive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script-src &#x27;self&#x27; https://apis.google.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;original-policy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script-src &#x27;self&#x27; https://apis.google.com; report-uri http://example.org/my_amazing_csp_report_parser&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="报告模式"><a href="#报告模式" class="headerlink" title="报告模式"></a>报告模式</h1><p>CSP 提供了一种报告模式，该模式下资源不会真的被限制加载，只会对检测到的问题进行上报 ，以 <code>JSON</code> 数据的形式发送到 <code>report-uri</code> 指定的地方。</p>
<p>通过指定 <code>Content-Security-Policy-Report-Only</code> 而不是 <code>Content-Security-Policy</code>，则开启了报告模式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy-Report-Only: default-src &#x27;self&#x27;; ...; report-uri /my_amazing_csp_report_parser;</span><br></pre></td></tr></table></figure>

<p>当然，你也可以同时指定两种响应头，各自里的规则还会正常执行，不会互相影响。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: img-src *;</span><br><span class="line">Content-Security-Policy-Report-Only: img-src ‘none’; report-uri http://reportcollector.example.com/collector.cgi</span><br></pre></td></tr></table></figure>

<p>这里图片还是会正常加载，但是 <code>img-src ‘none’</code> 也会检测到并且发送报告。</p>
<p>报告模式对于测试非常有用。在开启 CSP 之前肯定需要对整站做全面的测试，将发现的问题及时修复后再真正开启，比如上面提到的对内联代码的改造。</p>
<h1 id="推荐的做法"><a href="#推荐的做法" class="headerlink" title="推荐的做法"></a>推荐的做法</h1><p>这样的安全措施当然是能尽快启用就尽快。以下是推荐的做法：</p>
<ul>
<li>先只开启报告模式，看影响范围，修改问题。</li>
<li>添加指令时从 <code>default-src ‘none’</code> 开始，查看报错，逐步添加规则直至满足要求。</li>
<li>上线后观察一段时间，稳定后再由报告模式转到强制执行。</li>
</ul>
<h1 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h1><p>目前发布的 <a href="https://www.w3.org/TR/CSP3/">Level 3</a> 规范 中大部分还未被浏览器实现，通过 <a href="https://caniuse.com/#search=CSP">Can I Use</a> 的数据 来看，除 IE 外，Level 2 的功能已经得到了很好的支持。这里还有一分来自 W3C 跟踪的各浏览器实现情况的统计：<a href="https://w3c.github.io/webappsec/implementation_reports/CSP2_implementation_report.html">Implementation Report for Content Security Policy Level 2</a>。</p>
<p>对于浏览器不支持的情况，也不必担心，会回退到同源策略的限制上。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>原文：<a href="http://www.cnblogs.com/Wayou/p/intro_to_content_security_policy.html">http://www.cnblogs.com/Wayou/p/intro_to_content_security_policy.html</a><br>作者： 刘哇勇</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客部署到服务器</title>
    <url>/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="服务器环境配置"><a href="#服务器环境配置" class="headerlink" title="服务器环境配置"></a>服务器环境配置</h1><p>我使用的是<code>root</code>执行，因为服务器只有我一个人用，不会出什么问题</p>
<h2 id="安装git和nginx"><a href="#安装git和nginx" class="headerlink" title="安装git和nginx"></a>安装git和nginx</h2><p>请查看<a href="http://i.jakeyu.top/2016/10/17/centos+nodejs+nginx+mysql%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8">CentOS7 + nodejs + nginx + MySQL搭建服务器</a></p>
<h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><p>执行：</p>
<pre><code>cat ~/.ssh/id_rsa.pub
</code></pre>
<p>把拿到的公钥添加到<code>~/.ssh/authorized_keys</code>中</p>
<p>如果你之前没有生成过公钥，则可能就没有 id_rsa.pub 文件,<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">查看这里</a></p>
<h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><pre><code>cd /home/jake
sudo git init --bare m.git
</code></pre>
<p>使用 <code>--bare</code> 参数，<code>Git</code> 就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在。</p>
<h2 id="配置git-hooks"><a href="#配置git-hooks" class="headerlink" title="配置git hooks"></a>配置git hooks</h2><p>我们这里要使用的是 <code>post-receive</code> 的 hook，这个 hook 会在整个 git 操作过程完结以后被运行。</p>
<p>在 <code>m.git/hooks</code> 目录下新建一个 <code>post-receive</code> 文件：</p>
<pre><code>cd /home/jake/m.git/hooks
vim post-receive
</code></pre>
<p>在 <code>post-receive</code> 文件中写入如下内容：</p>
<pre><code>#!/bin/sh
git --work-tree=/home/jake/m --git-dir=/home/jake/m.git checkout -f
</code></pre>
<p><code>/home/jake/m</code> 要换成你自己的部署目录。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。</p>
<p>设置这个文件的可执行权限：</p>
<pre><code>chmod +x post-receive
</code></pre>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>我用的是lnmp(如果是直接安装的Nginx，配置文件为<code>/etc/nginx/nginx.conf</code>)</p>
<pre><code>cd /usr/local/nginx/conf/vhost
vim m.conf
</code></pre>
<p>输入下面配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    <span class="comment">#listen [::]:80;</span></span><br><span class="line">    server_name i.jakeyu.top;</span><br><span class="line">    index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">    <span class="comment">#这里要改成网站的根目录</span></span><br><span class="line">    root  /home/jake/m;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#error_page   404   /404.html;</span></span><br><span class="line">    location ~ .*\.(ico|gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        access_log   off;</span><br><span class="line">        expires      1d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css|txt|xml)?$</span><br><span class="line">    &#123;</span><br><span class="line">        access_log   off;</span><br><span class="line">        expires      12h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log  /home/jake/m.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试nginx配置是否可以用</p>
<pre><code>nginx -t
</code></pre>
<p>如果返回<code>successful</code>，就表示成功了。重启<code>Nginx</code></p>
<pre><code>service nginx restart
</code></pre>
<h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><p>修改博客根目录下<code>_config.yml</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    vps: root@115.159.2.254:/home/jake/m.git</span><br></pre></td></tr></table></figure>

<p>然后执行:</p>
<pre><code>hexo new 测试.md
hexo d -g
</code></pre>
<p>访问刚刚的配置的域名就可以访问自己的网站了</p>
<p><img data-src="//blogimg.jakeyu.top/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/m.jpg"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JS继承方法</title>
    <url>/2016/09/09/JS%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/20170327149054592270732.png"></p>
<span id="more"></span>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>组合继承，指将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后思路使用用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承。这样，即通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</p>
<h3 id="下面来看一个例子"><a href="#下面来看一个例子" class="headerlink" title="下面来看一个例子"></a>下面来看一个例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">//继承属性</span></span><br><span class="line">    <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);		<span class="comment">// 第二次调用SuperType</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//继承方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();	<span class="comment">// 第一次调用SuperType</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">//输出SuperType函数的源码,即此时SubType.prototype.constructor指向SuperType函数</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubType</span>; <span class="comment">//将SubType.prototype.constructor指针指回SubType函数</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Jake&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">instance1.<span class="property">color</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">color</span>); <span class="comment">//&#x27;red,blue,green,black&#x27;</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>(); <span class="comment">//&#x27;Jake&#x27;</span></span><br><span class="line">instance1.<span class="title function_">sayAge</span>(); <span class="comment">//20</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Greg&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">color</span>); <span class="comment">//&#x27;red,blue,green&#x27;</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>(); <span class="comment">//&#x27;Greg&#x27;;</span></span><br><span class="line">instance2.<span class="title function_">sayAge</span>(); <span class="comment">//21</span></span><br></pre></td></tr></table></figure>

<p>观察输出结果，便可以发现：两个SubType实例（<code>instance1</code>和<code>instance2</code>）既分别有自己的属性，又可以使用相同的方法。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，所以是JS中最常用的继承模式。而且，<code>instanceof</code>和<code>isPrototypeOf()</code>也能够用于识别基于组合继承创建的对象。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>调用两次SuperType构造函数</li>
<li>在SubType.prototype上创建了不必要的属性</li>
</ul>
<h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><p>寄生组合继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> (name, age) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name) <span class="comment">// 通过构造函数继承实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>)	<span class="comment">//继承父类共享方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubType</span>	<span class="comment">//将SubType.prototype.constructor指针指回SubType函数</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;jake&#x27;</span>, <span class="number">22</span>)</span><br><span class="line">obj.<span class="title function_">sayName</span>()	<span class="comment">// jake</span></span><br><span class="line">obj.<span class="title function_">sayAge</span>()	<span class="comment">// 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">SubType</span>)	<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">SuperType</span>)	<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>寄生组合继承只调用了一次SuperType，所以更高效</li>
<li>避免了在SubType.prototype上创建了不必要的属性</li>
</ul>
<h2 id="下面说说原型链和构造函数的缺点"><a href="#下面说说原型链和构造函数的缺点" class="headerlink" title="下面说说原型链和构造函数的缺点"></a>下面说说原型链和构造函数的缺点</h2><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>缺点：当原型链中包含引用类型值时，原型属性会被所有实例共享；</p>
<h4 id="下面看一个例子"><a href="#下面看一个例子" class="headerlink" title="下面看一个例子"></a>下面看一个例子</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>(); <span class="comment">//继承了SuperType</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line">instance1.<span class="property">color</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">color</span>);   <span class="comment">//&#x27;red,blue,green,black&#x27;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">color</span>);   <span class="comment">//&#x27;red,blue,green,black&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>缺点：如果仅仅使用构造函数，方法都在构造函数中定义，因此函数就无法实现复用了。而且，在超类型的原型中定义的方法，对于子类型而言也是不可见的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript产生随机数</title>
    <url>/2016/05/18/JavaScript%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<p>JS产生随机数</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="title class_">Math</span>.<span class="title function_">random</span>(); 结果为<span class="number">0</span>-<span class="number">1</span>间的一个随机数(包括<span class="number">0</span>,不包括<span class="number">1</span>)</span><br><span class="line"><span class="number">2.</span><span class="title class_">Math</span>.<span class="title function_">floor</span>(num); 参数num为一个数值，函数结果为num的整数部分。</span><br><span class="line"><span class="number">3.</span><span class="title class_">Math</span>.<span class="title function_">round</span>(num); 参数num为一个数值，函数结果为num四舍五入后的整数。</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>：数学对象，提供对数据的数学计算。</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>(); 返回<span class="number">0</span>和<span class="number">1</span>间(包括<span class="number">0</span>,不包括<span class="number">1</span>)的一个随机数。</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(n); 返回大于等于n的最小整数。</span><br><span class="line">用<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>);时，主要获取<span class="number">1</span>到<span class="number">10</span>的随机整数，取<span class="number">0</span>的几率极小。</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(n); 返回n四舍五入后整数的值。</span><br><span class="line">用<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());可均衡获取<span class="number">0</span>到<span class="number">1</span>的随机整数。</span><br><span class="line">用<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>);时，可基本均衡获取<span class="number">0</span>到<span class="number">10</span>的随机整数，其中获取最小值<span class="number">0</span>和最大值<span class="number">10</span> 的几率少一半。</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(n); 返回小于等于n的最大整数。</span><br><span class="line">用<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>);时，可均衡获取<span class="number">0</span>到<span class="number">9</span>的随机整数。</span><br></pre></td></tr></table></figure>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="title function_">GetRandomNum</span>(<span class="params">Min,Max</span>)</span><br><span class="line">&#123;   </span><br><span class="line">	<span class="keyword">var</span> <span class="title class_">Range</span> = <span class="title class_">Max</span> - <span class="title class_">Min</span>;   </span><br><span class="line">	<span class="keyword">var</span> <span class="title class_">Rand</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>();   </span><br><span class="line">	<span class="keyword">return</span>(<span class="title class_">Min</span> + <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Rand</span> * <span class="title class_">Range</span>));   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> num = <span class="title class_">GetRandomNum</span>(<span class="number">10</span>,<span class="number">100</span>);   </span><br><span class="line"><span class="title function_">alert</span>(num);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现继承的几种方式</title>
    <url>/2016/06/20/JavaScript%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/20170327149054592270732.png"></p>
<span id="more"></span>
<h1 id="原型链继承："><a href="#原型链继承：" class="headerlink" title="原型链继承："></a>原型链继承：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Base</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">level</span> = <span class="number">1</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="title class_">Base</span>.<span class="property">CONSTANT</span> = <span class="string">&quot;constant&quot;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Sub</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Base</span>();  </span><br><span class="line"><span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;sub&quot;</span>;  </span><br></pre></td></tr></table></figure>
<p>优点：从<code>instanceof</code>关键字来看，实例既是父类的实例，又是子类的实例，看起来似乎是最纯粹的继承。<br>缺点：子类区别于父类的属性和方法，必须在<code>Sub.prototype = new Base()</code>这样的语句之后分别执行，无法被包装到<code>Sub</code>这个构造器里面去。例如：<code>Sub.prototype.name = &quot;sub&quot;</code>无法实现多重继承。</p>
<h1 id="构造继承："><a href="#构造继承：" class="headerlink" title="构造继承："></a>构造继承：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Base</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">level</span> = <span class="number">1</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="title class_">Base</span>.<span class="property">CONSTANT</span> = <span class="string">&quot;constant&quot;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Sub</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Base</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;sub&quot;</span>;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>优点：可以实现多重继承，可以把子类特有的属性设置放在构造器内部。<br>缺点：使用<code>instanceof</code>发现，对象不是父类的实例。</p>
<h1 id="实例继承："><a href="#实例继承：" class="headerlink" title="实例继承："></a>实例继承：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Base</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">level</span> = <span class="number">1</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="title class_">Base</span>.<span class="property">CONSTANT</span> = <span class="string">&quot;constant&quot;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Sub</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">Base</span>();  </span><br><span class="line">    instance.<span class="property">name</span> = <span class="string">&quot;sub&quot;</span>;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>优点：是父类的对象，并且使用new构造对象和不使用<code>new</code>构造对象，都可以获得相同的效果。<br>缺点：生成的对象实质仅仅是父类的实例，并非子类的对象；不支持多继承。</p>
<h1 id="拷贝继承："><a href="#拷贝继承：" class="headerlink" title="拷贝继承："></a>拷贝继承：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Base</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">level</span> = <span class="number">1</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="title class_">Base</span>.<span class="property">CONSTANT</span> = <span class="string">&quot;constant&quot;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Sub</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="keyword">new</span> <span class="title class_">Base</span>();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> base)  </span><br><span class="line">        <span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span>[i] = base[i];  </span><br><span class="line">    <span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;sub&quot;</span>;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>
<p>优点：支持多继承。<br>缺点：效率较低；无法获取父类不可枚举的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> <span class="title class_">Scope</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">$clone</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> f = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;; <span class="comment">//创建一个新的构造函数</span></span><br><span class="line">		f.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>; <span class="comment">//将它的原型指向 当前的这个Scope 实例</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">f</span>(); <span class="comment">//返回 新创建的这个对象的实例</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scopeA = <span class="keyword">new</span> <span class="title class_">Scope</span>();</span><br><span class="line">scopeA.<span class="property">title</span> = <span class="string">&#x27;My title&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scopeB = scopeA.$clone();</span><br><span class="line"><span class="comment">//实例有$clone方法用创建一个对象克隆，表现如下</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(scopeB.<span class="property">title</span> === <span class="string">&#x27;My title&#x27;</span>); <span class="comment">//输出true</span></span><br><span class="line">scopeA.<span class="property">title</span> = <span class="string">&#x27;Home title&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(scopeB.<span class="property">title</span> === <span class="string">&#x27;Home title&#x27;</span>); <span class="comment">//输出true</span></span><br><span class="line"><span class="comment">//但是一旦scopeB主动修改它的属性，scopeA并不受影响</span></span><br><span class="line">scopeB.<span class="property">title</span> = <span class="string">&#x27;scopeB title&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(scopeA.<span class="property">title</span> === <span class="string">&#x27;Home title&#x27;</span>) <span class="comment">//输出true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(scopeB.<span class="property">title</span>) <span class="comment">//输出 scopeB title</span></span><br></pre></td></tr></table></figure>

<p>这几种形式各有特点，仅就我提供的代码而言，满足下面的表格：</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">instanceof父类</th>
<th>instanceof子类</th>
<th>子类constructor</th>
<th>不可枚举方法的继承</th>
<th>多继承可实现</th>
</tr>
</thead>
<tbody><tr>
<td align="left">原型链继承</td>
<td align="left">TRUE</td>
<td>TRUE</td>
<td>FALSE</td>
<td>TRUE</td>
<td>FALSE</td>
</tr>
<tr>
<td align="left">构造继承</td>
<td align="left">FALSE</td>
<td>TRUE</td>
<td>TRUE</td>
<td>TRUE</td>
<td>TRUE</td>
</tr>
<tr>
<td align="left">实例继承</td>
<td align="left">TRUE</td>
<td>FALSE</td>
<td>FALSE</td>
<td>TRUE</td>
<td>FALSE</td>
</tr>
<tr>
<td align="left">拷贝继承</td>
<td align="left">FALSE</td>
<td>TRUE</td>
<td>TRUE</td>
<td>FALSE</td>
<td>TRUE</td>
</tr>
</tbody></table>
<hr>
<h5 id="补充，如果我们不需要类继承，只需要对象继承，对于支持-ECMAScript-5-的浏览器来说，还可以用Object-create方法来实现："><a href="#补充，如果我们不需要类继承，只需要对象继承，对于支持-ECMAScript-5-的浏览器来说，还可以用Object-create方法来实现：" class="headerlink" title="补充，如果我们不需要类继承，只需要对象继承，对于支持 ECMAScript 5 的浏览器来说，还可以用Object.create方法来实现："></a>补充，如果我们不需要类继承，只需要对象继承，对于支持 ECMAScript 5 的浏览器来说，还可以用Object.create方法来实现：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Base</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">level</span> = <span class="number">1</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;base&quot;</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="title class_">Base</span>.<span class="property">CONSTANT</span> = <span class="string">&quot;constant&quot;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="keyword">new</span> <span class="title class_">Base</span>());  </span><br><span class="line">sub.<span class="property">name</span> = <span class="string">&quot;sub&quot;</span>;  </span><br></pre></td></tr></table></figure>

<p>转载自：<a href="http://raychase.iteye.com/blog/1337415">http://raychase.iteye.com/blog/1337415</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript原生base64编码解码函数btoa(atob)用法</title>
    <url>/2018/05/08/Javascript%E5%8E%9F%E7%94%9Fbase64%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%E5%87%BD%E6%95%B0btoa(atob)%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><code>window.btoa</code>和<code>window.atob</code>分别编码与解码<code>base64 </code>，它们在现代浏览器中受到广泛的支持。</p>
<span id="more"></span>

<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><iframe data-feature="atob-btoa" src="https://caniuse.bitsofco.de/embed/index.html?feat=atob-btoa&periods=current&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe>

<h2 id="编码base64函数btoa"><a href="#编码base64函数btoa" class="headerlink" title="编码base64函数btoa"></a>编码base64函数btoa</h2><p>提示：函数名中的b表示binary即原始的待编码数据，a表示ASCII，即编码后的结果（base64编码后，就只是纯的ASCII字符），btoa就是将binary的数据转为ASCII字符（串）。</p>
<p>用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">btoa</span>(<span class="string">&#x27;Hello world!&#x27;</span>));<span class="comment">//SGVsbG8gd29ybGQh</span></span><br></pre></td></tr></table></figure>

<h2 id="解码base64函数atob"><a href="#解码base64函数atob" class="headerlink" title="解码base64函数atob"></a>解码base64函数atob</h2><p>可以将base64字符串还原成二进制格式（通常是原始的字符串，JavaScript中字符串就是一种序列化的二进制数据）</p>
<p>用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">atob</span>(<span class="string">&#x27;SGVsbG8gd29ybGQh&#x27;</span>));<span class="comment">//Hello world!</span></span><br></pre></td></tr></table></figure>

<h2 id="原始数据含非ASCII字符（例如中文）时的处理"><a href="#原始数据含非ASCII字符（例如中文）时的处理" class="headerlink" title="原始数据含非ASCII字符（例如中文）时的处理"></a>原始数据含非ASCII字符（例如中文）时的处理</h2><p>执行下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">btoa</span>(<span class="string">&#x27;我是中文&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>会有如下的报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught DOMException: Failed to execute ‘btoa’ on ‘Window’: The string to be encoded contains characters outside of the Latin1 range.(…)</span><br></pre></td></tr></table></figure>

<p>说明只能对ASCII字符进行编码，对于中文来说，可以通过下面的方式进行编码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">btoa</span>(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;我是中文&#x27;</span>))));<span class="comment">//5oiR5piv5Lit5paH</span></span><br></pre></td></tr></table></figure>

<p>解码方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="title function_">atob</span>(<span class="string">&#x27;5oiR5piv5Lit5paH&#x27;</span>))));<span class="comment">//我是中文</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>作者：lyz810<br>原文：<a href="https://blog.lyz810.com/article/2016/07/javascript-base64-encode-and-decode/">https://blog.lyz810.com/article/2016/07/javascript-base64-encode-and-decode/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 彻底删除 Atom</title>
    <url>/2018/05/17/Mac-%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4-Atom/</url>
    <content><![CDATA[<p>![](&#x2F;&#x2F;blogimg.jakeyu.top&#x2F;Mac 彻底删除 Atom&#x2F;1_JSK29tJmY2hyGS9xDOGkzg.png)</p>
<span id="more"></span>

<p>自从更新到<code>1.25.0</code>后，经常崩溃，查到原因<a href="https://github.com/atom/atom/issues/17020">ISSUES</a>，但是官方还没有解决，所以需要删除Atom，重新安装<code>1.24.1</code>。</p>
<h2 id="删除所有Package"><a href="#删除所有Package" class="headerlink" title="删除所有Package"></a>删除所有Package</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.atom/packages</span><br></pre></td></tr></table></figure>

<h2 id="彻底卸载Atom"><a href="#彻底卸载Atom" class="headerlink" title="彻底卸载Atom"></a>彻底卸载Atom</h2><p>参考: <a href="https://discuss.atom.io/t/how-to-completely-uninstall-atom-for-mac/9084/34">How to Completely Uninstall Atom for Mac?</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.atom</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/bin/atom</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/bin/apm</span><br><span class="line"><span class="built_in">rm</span> -rf /Applications/Atom.app</span><br><span class="line"><span class="built_in">rm</span> -rf ~/Library/Preferences/com.github.atom.plist</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;~/Library/Application Support/com.github.atom.ShipIt&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;~/Library/Application Support/Atom&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;~/Library/Saved Application State/com.github.atom.savedState&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/Library/Caches/com.github.atom</span><br><span class="line"><span class="built_in">rm</span> -rf ~/Library/Caches/Atom</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>NexT v5.1.4 进阶配置</title>
    <url>/2018/06/04/NexT%20v5.1.4%20%E8%BF%9B%E9%98%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/swiper%E5%86%85%E5%AE%B9%E8%B6%85%E5%87%BA%E7%BA%B5%E5%90%91%E6%BB%9A%E5%8A%A8/big.jpg"></p>
<span id="more"></span>

<h2 id="添加swiper"><a href="#添加swiper" class="headerlink" title="添加swiper"></a>添加swiper</h2><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p><a href="https://i.jakeyu.top/2018/06/03/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/#%E6%88%AA%E5%9B%BE">https://i.jakeyu.top/2018/06/03/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/#%E6%88%AA%E5%9B%BE</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑主题配置文件<code>/themes/next/_config.ylm</code>，在vendors下面添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swiper version 4.3.2</span></span><br><span class="line"><span class="comment"># http://www.swiper.com.cn/</span></span><br><span class="line"><span class="attr">swiper_css:</span> <span class="string">//cdnjs.loli.net/ajax/libs/Swiper/4.3.2/css/swiper.min.css</span></span><br><span class="line"><span class="attr">swiper_js:</span> <span class="string">//cdnjs.loli.net/ajax/libs/Swiper/4.3.2/js/swiper.min.js</span></span><br></pre></td></tr></table></figure>

<p>编辑<code>/themes/next/layout/_partials/head.swig</code>，添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; theme.vendors.swiper_css &#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建<code>/themes/next/layout/_third-party/swiper/swiper.swig</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; theme.vendors.swiper_js &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>编辑<code>/themes/next/layout/_layout.swig</code>，添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.......</span><br><span class="line">&#123;% include &#x27;_scripts/boostrap.swig&#x27; %&#125;</span><br><span class="line">&#123;% include &#x27;_third-party/swiper/swiper.swig&#x27; %&#125;</span><br><span class="line">&#123;% include &#x27;_third-party/comments/index.swig&#x27; %&#125;</span><br><span class="line">&#123;% include &#x27;_third-party/search/index.swig&#x27; %&#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>新建<code>/themes/next/source/css/_common/components/third-party/swiper.styl</code></p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">.swiper&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑<code>/themes/next/source/css/_common/components/third-party/third-party.styl</code>，添加：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">.......</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;busuanzi-counter&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;swiper&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;algolia-search&quot;</span> <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;algolia_search.enable&#x27;</span>);</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>编辑<code>/themes/next/source/js/src/util.js</code>，添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NexT</span>.<span class="property">utils</span> = <span class="title class_">NexT</span>.<span class="property">$u</span> = &#123;</span><br><span class="line">  <span class="attr">swiper</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.swiper&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,item</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> _ = $(item)</span><br><span class="line">      <span class="keyword">var</span> wapper = $(<span class="string">&#x27;&lt;div class=&quot;swiper-wrapper&quot;&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">      _.<span class="title function_">addClass</span>(<span class="string">&#x27;swiper-&#x27;</span> + (index+<span class="number">1</span>))</span><br><span class="line">      _.<span class="title function_">append</span>(<span class="string">&#x27;&lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;&lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;&lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">      _.<span class="title function_">find</span>(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index,item</span>) &#123;</span><br><span class="line">        wapper.<span class="title function_">append</span>($(<span class="string">&#x27;&lt;div class=&quot;swiper-slide&quot;&gt;&lt;/div&gt;&#x27;</span>).<span class="title function_">append</span>(item))</span><br><span class="line">      &#125;)</span><br><span class="line">      _.<span class="title function_">prepend</span>(wapper)</span><br><span class="line">      _.<span class="title function_">find</span>(<span class="string">&#x27;br&#x27;</span>).<span class="title function_">remove</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;.swiper-&#x27;</span> + (index + <span class="number">1</span>), &#123;</span><br><span class="line">      	<span class="attr">autoHeight</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">preloadImages</span>: <span class="literal">true</span>,</span><br><span class="line">        loop : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pagination</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">navigation</span>: &#123;</span><br><span class="line">          <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">          <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">mousewheel</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Wrap images with fancybox support.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">wrapImageWithFancyBox</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  .......</span><br></pre></td></tr></table></figure>

<p>编辑<code>/themes/next/source/js/src/bootstrap.js</code>，添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="title class_">NexT</span>.<span class="property">utils</span>.<span class="title function_">swiper</span>()</span><br><span class="line"><span class="variable constant_">CONFIG</span>.<span class="property">fancybox</span> &amp;&amp; <span class="title class_">NexT</span>.<span class="property">utils</span>.<span class="title function_">wrapImageWithFancyBox</span>();</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>注意：一定要在<code>CONFIG.fancybox &amp;&amp; NexT.utils.wrapImageWithFancyBox();</code>前面添加</p>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper&quot;</span>&gt;</span></span></span><br><span class="line">![](<span class="link">//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180604-141733.png</span>)</span><br><span class="line">![](<span class="link">//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180604-141841.png</span>)</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="添加运行时间"><a href="#添加运行时间" class="headerlink" title="添加运行时间"></a>添加运行时间</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>编辑<code>/themes/next/source/css/_mixins/base.styl</code>，添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.since-line</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#since</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑<code>/themes/next/layout/_layout.swig</code>，添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;footer id=&quot;footer&quot; class=&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;footer-inner&quot;&gt;</span><br><span class="line">    &#123;% include &#x27;_partials/footer.swig&#x27; %&#125;</span><br><span class="line">    &#123;% include &#x27;_third-party/analytics/analytics-with-widget.swig&#x27; %&#125;</span><br><span class="line">    &#123;% block footer %&#125;&#123;% endblock %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider since-line&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;since&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>_layout.swig</code>文件最后添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">show_date_time</span> () &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">show_date_time</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">BirthDay</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> timeold = (today.<span class="title function_">getTime</span>() - <span class="title class_">BirthDay</span>.<span class="title function_">getTime</span>());</span><br><span class="line">    <span class="keyword">var</span> msPerDay = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> e_daysold = timeold / msPerDay;</span><br><span class="line">    <span class="keyword">var</span> daysold = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e_daysold);</span><br><span class="line">    <span class="keyword">var</span> e_hrsold = (e_daysold - daysold) * <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">var</span> hrsold = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e_hrsold);</span><br><span class="line">    <span class="keyword">var</span> e_minsold = (e_hrsold - hrsold) * <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">var</span> minsold = <span class="title class_">Math</span>.<span class="title function_">floor</span>((e_hrsold - hrsold) * <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((e_minsold - minsold) * <span class="number">60</span>);</span><br><span class="line">    $(<span class="string">&#x27;#since&#x27;</span>).<span class="title function_">html</span>(daysold + <span class="string">&quot;天&quot;</span> + hrsold + <span class="string">&quot;小时&quot;</span> + minsold + <span class="string">&quot;分&quot;</span> + seconds + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">show_date_time</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Object.create</title>
    <url>/2018/08/23/Object-create/</url>
    <content><![CDATA[<p>在Vue和Vuex的源码中，作者都使用了<code>Object.create(null)</code>来初始化一个新对象。为什么不用更简洁的<code>&#123;&#125;</code>呢？</p>
<p>在<code>SegmentFault</code>和<code>Stack Overflow</code>等开发者社区中也有很多人展开了讨论，在这里总结成文，温故知新。</p>
<span id="more"></span>

<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>照搬一下MDN上的定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(proto,[propertiesObject])</span><br></pre></td></tr></table></figure>

<ul>
<li>proto:新创建对象的原型对象</li>
<li>propertiesObject:可选。要添加到新对象的可枚举（新添加的属性是其自身的属性，而不是其原型链上的属性）的属性。</li>
</ul>
<h1 id="实现类式继承"><a href="#实现类式继承" class="headerlink" title="实现类式继承"></a>实现类式继承</h1><p>下面的例子演示了如何使用<code>Object.create()</code>来实现类式继承。这是一个所有版本<code>JavaScript</code>都支持的单继承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Shape - 父类(superclass)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Shape</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类的方法</span></span><br><span class="line"><span class="title class_">Shape</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> += x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> += y;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Shape moved.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle - 子类(subclass)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rectangle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Shape</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>); <span class="comment">// call super constructor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类续承父类</span></span><br><span class="line"><span class="title class_">Rectangle</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Shape</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Rectangle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Rectangle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Is rect an instance of Rectangle?&#x27;</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> <span class="title class_">Rectangle</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Is rect an instance of Shape?&#x27;</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> <span class="title class_">Shape</span>); <span class="comment">// true</span></span><br><span class="line">rect.<span class="title function_">move</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Outputs, &#x27;Shape moved.&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果你希望能继承到多个对象，则可以使用混入的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="title class_">SuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="title class_">OtherSuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承一个类</span></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 混合其它</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">OtherSuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 重新指定constructor</span></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">MyClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// do a thing</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 会把<code>OtherSuperClass</code>原型上的函数拷贝到 <code>MyClass</code>原型上，使 <code>MyClass</code> 的所有实例都可用 <code>OtherSuperClass</code> 的方法。<code>Object.assign</code> 是在 ES2015 引入的，且可用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill">polyfilled</a>。要支持旧浏览器的话，可用使用 <a href="https://api.jquery.com/jQuery.extend/">jQuery.extend()</a> 或者 <a href="https://lodash.com/docs/#assign">_.assign()</a>。</p>
<h1 id="使用-Object-create-的-propertyObject参数"><a href="#使用-Object-create-的-propertyObject参数" class="headerlink" title="使用 Object.create 的 propertyObject参数"></a>使用 Object.create 的 propertyObject参数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个原型为null的空对象</span></span><br><span class="line">o = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></span><br><span class="line">o = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="comment">// foo会成为所创建对象的数据属性</span></span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// bar会成为所创建对象的访问器属性</span></span><br><span class="line">  <span class="attr">bar</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting `o.bar` to&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">o = <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br><span class="line"><span class="comment">// 上面的一句就相当于:</span></span><br><span class="line">o = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></span><br><span class="line">o = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></span><br><span class="line">o.<span class="property">p</span> = <span class="number">24</span></span><br><span class="line">o.<span class="property">p</span></span><br><span class="line"><span class="comment">//42</span></span><br><span class="line"></span><br><span class="line">o.<span class="property">q</span> = <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(prop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&quot;q&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> o.<span class="property">p</span></span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个可写的,可枚举的,可配置的属性p</span></span><br><span class="line">o2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">p</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Object-create-、-…-的区别"><a href="#Object-create-、-…-的区别" class="headerlink" title="Object.create()、{…}的区别"></a>Object.create()、{…}的区别</h1><p>先看看我们经常使用的<code>&#123;&#125;</code>创建的对象是什么样子的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>

<p>在chrome控制台打印如下：</p>
<p><img data-src="//blogimg.jakeyu.top/%E8%AF%A6%E8%A7%A3Object.create/Jietu20180823-225215@2x.png"></p>
<p>从上图可以看到，新创建的对象继承了<code>Object</code>自身的方法，如<code>hasOwnProperty</code>、<code>toString</code>等，在新对象上可以直接使用。</p>
<p>再看看使用<code>Object.create()</code>创建对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>,&#123;</span><br><span class="line">    <span class="attr">a</span>:&#123;</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>

<p>在chrome控制台打印如下：</p>
<p><img data-src="//blogimg.jakeyu.top/%E8%AF%A6%E8%A7%A3Object.create/Jietu20180823-225402@2x.png"></p>
<p>可以看到，新创建的对象除了自身属性a之外，原型链上没有任何属性，也就是没有继承<code>Object</code>的任何东西，此时如果我们调用<code>o.toString()</code>会报<code>Uncaught TypeError</code>的错误。</p>
<p>大家可能会注意到，第一个参数使用了<code>null</code>。也就是说将<code>null</code>设置成了新创建对象的原型，自然就不会有原型链上的属性。我们再把上面的例子改一改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;,&#123;</span><br><span class="line">    <span class="attr">a</span>:&#123;</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>

<p>将<code>null</code>改为<code>&#123;&#125;</code>，结果是怎样的？在chrome控制台打印如下：</p>
<p><img data-src="//blogimg.jakeyu.top/%E8%AF%A6%E8%A7%A3Object.create/Jietu20180823-225532@2x.png"></p>
<p>我们看到，这样创建的对象和使用<code>&#123;&#125;</code>创建对象已经很相近了，但是还是有一点区别：多了一层<code>proto</code>嵌套。</p>
<p>我们最后再来改一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,&#123;</span><br><span class="line">    <span class="attr">a</span>:&#123;</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>

<p>chrome控制台打印如下：</p>
<p><img data-src="//blogimg.jakeyu.top/%E8%AF%A6%E8%A7%A3Object.create/Jietu20180823-225725@2x.png"></p>
<p>这次就和使用<code>&#123;&#125;</code>创建的对象一模一样了。至此，我相信大家已经对两者的区别十分清楚了。</p>
<h1 id="Object-create-null-的使用场景"><a href="#Object-create-null-的使用场景" class="headerlink" title="Object.create(null)的使用场景"></a>Object.create(null)的使用场景</h1><p>再回到文章开头的问题，为什么很多源码作者会使用<code>Object.create(null)</code>来初始化一个新对象呢？这是作者的习惯，还是一个最佳实践？</p>
<p>其实都不是，这并不是作者不经思考随便用的，也不是javascript编程中的最佳实践，而是需要因地制宜，具体问题具体分析。</p>
<p>我们进一步比较一下<code>Object.create(null)</code>和<code>&#123;&#125;</code>创建控对象的区别：</p>
<p>在chrome打印如下：</p>
<p><img data-src="//blogimg.jakeyu.top/%E8%AF%A6%E8%A7%A3Object.create/Jietu20180823-230002@2x.png"></p>
<p>从上图可以看到，使用<code>create</code>创建的对象，没有任何属性，显示<code>No properties</code>，我们可以把它当作一个非常纯净的<code>map</code>来使用，我们可以自己定义<code>hasOwnProperty</code>、<code>toString</code>方法，不管是有意还是不小心，我们完全不必担心会将原型链上的同名方法覆盖掉。举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo1:</span></span><br><span class="line"><span class="keyword">var</span> a= &#123;...省略很多属性和方法...&#125;;</span><br><span class="line"><span class="comment">//如果想要检查a是否存在一个名为toString的属性，你必须像下面这样进行检查：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(a,<span class="string">&#x27;toString&#x27;</span>))&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为什么不能直接用a.hasOwnProperty(&#x27;toString&#x27;)?因为你可能给a添加了一个自定义的hasOwnProperty</span></span><br><span class="line"><span class="comment">//你无法使用下面这种方式来进行判断,因为原型上的toString方法是存在的：</span></span><br><span class="line"><span class="keyword">if</span>(a.<span class="property">toString</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Demo2:</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">//你可以直接使用下面这种方式判断，因为存在的属性，都将定义在a上面，除非手动指定原型：</span></span><br><span class="line"><span class="keyword">if</span>(a.<span class="property">toString</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>另一个使用<code>create(null)</code>的理由是，在我们使用<code>for..in</code>循环的时候会遍历对象原型链上的属性，使用<code>create(null)</code>就不必再对属性进行检查了，当然，我们也可以直接使用<code>Object.keys[]</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>你需要一个非常干净且高度可定制的对象当作数据字典的时候；</li>
<li>想节省<code>hasOwnProperty</code>带来的一丢丢性能损失并且可以偷懒少些一点代码的时候</li>
</ol>
<p>用<code>Object.create(null)</code>吧！其他时候，请用<code>&#123;&#125;</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://juejin.im/post/5acd8ced6fb9a028d444ee4e">详解Object.create(null)</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill">Object.create()–MDN</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Object 方法</title>
    <url>/2018/12/10/Object-preventExtensions-Object-seal-Object-freeze/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th>详情</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Object.preventExtensions()</td>
<td align="left">让一个对象变的不可扩展，也就是永远不能再添加新的属性。</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">MDN</a></td>
</tr>
<tr>
<td align="left">Object.isExtensible()</td>
<td align="left">判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible">MDN</a></td>
</tr>
<tr>
<td align="left">Object.seal()</td>
<td align="left">封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">MDN</a></td>
</tr>
<tr>
<td align="left">Object.isSealed()</td>
<td align="left">判断一个对象是否被密封。</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed">MDN</a></td>
</tr>
<tr>
<td align="left">Object.freeze()</td>
<td align="left">冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">MDN</a></td>
</tr>
<tr>
<td align="left">Object.isFrozen()</td>
<td align="left">判断一个对象是否被冻结。</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen">MDN</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Semver(npm 语义化版本号)</title>
    <url>/2019/01/10/Semver-npm-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/semver/3649824190-5ad41542bc553_articlex.png"></p>
<span id="more"></span>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的包越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p>
<p>在依赖高的系统中发布新版本包可能很快会成为噩梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个依赖包改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本依赖被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p>
<p>因此，Github 起草了一个具有指导意义的，统一的版本号表示规则，称为 Semantic Versioning(语义化版本表示)。该规则规定了版本号如何表示，如何增加，如何进行比较，不同的版本号意味着什么。</p>
<h1 id="版本格式"><a href="#版本格式" class="headerlink" title="版本格式"></a>版本格式</h1><p>版本格式：<code>主版本号.次版本号.修订号</code>，版本号递增规则如下：</p>
<ol>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ol>
<p>先行版本号及版本编译元数据可以加到<code>主版本号.次版本号.修订号</code>的后面，作为延伸。</p>
<h1 id="先行版本"><a href="#先行版本" class="headerlink" title="先行版本"></a>先行版本</h1><p>当要发布<strong>大版本</strong>或者<strong>核心的 Feature</strong> 时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和 RC 版本。Semver规范中使用alpha、beta、rc (以前叫做gama)来修饰即将要发布的版本。它们的含义是：</p>
<ul>
<li>alpha: 内部版本</li>
<li>beta: 公测版本</li>
<li>rc: 即Release candiate，正式版本的候选版本</li>
</ul>
<p>比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc 后需要带上次数信息。</p>
<h1 id="版本发布准则"><a href="#版本发布准则" class="headerlink" title="版本发布准则"></a>版本发布准则</h1><p>列举出比较实用的一些规则：</p>
<ul>
<li>标准的版本号必须采用XYZ的格式，并且X、Y 和 Z 为非负的整数，禁止在数字前方补零，版本发布需要严格递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li>
<li>某个软件版本发行后，任何修改都必须以新版本发行。</li>
<li>1.0.0 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的API时，就可以发布 1.0.0 版本了。</li>
<li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较。</li>
</ul>
<h1 id="npm包依赖"><a href="#npm包依赖" class="headerlink" title="npm包依赖"></a>npm包依赖</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>项目对包的依赖可以使用下面的 3 种方法来表示(假设当前版本号是 16.2.0):</p>
<ul>
<li>兼容模块新发布的补丁版本：~16.2.0、16.2.x、16.2</li>
<li>兼容模块新发布的小版本、补丁版本：^16.2.0、16.x、16</li>
<li>兼容模块新发布的大版本、小版本、补丁版本：*、x</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="^"></a>^</h2><blockquote>
<p>允许在不修改 [major, minor, patch] 中最左非零数字的更改（匹配大于 X、Y、Z 的更新 Y、Z 的版本号）</p>
</blockquote>
<p>在 X.Y.Z 结构的版本号中，X、Y、Z 都是非负的整数，上面定义的意思就是说从左向右，遇到第一个非零数字是不可修改的，下一个数字可以更改，比如:</p>
<ul>
<li>X、Y、Z 都不为 0，<code>^15.6.1</code>,最左的非零数字是15，所以 X 是不允许更新的，也就是说主版本号不会超过15，表示的就是版本号<code>&gt;=15.6.1 &amp;&amp; &lt;16.0.0</code></li>
<li>如果 X 为 0，那么第一个非零数字就是 Y，就只能对 z 做出修改，<code>^0.1.2</code>表示版本号<code>&gt;=0.1.2 &amp;&amp; &lt; 0.2.0</code></li>
<li>如果 X、Y 的数字都是 0 的话，第一个非零数字就是 Z，表示的就是版本号不允许更新；<code>^0.0.2</code>，主版本号和次版本号都是 0，修订号为非零，表示的就是版本号<code>&gt;=0.0.2 &amp;&amp; &lt; 0.0.3</code></li>
</ul>
<h2 id="-1"><a href="#-1" class="headerlink" title="~"></a>~</h2><blockquote>
<p>匹配大于 <code>X.Y.Z</code> 的更新 <code>Z</code> 的版本号</p>
</blockquote>
<ul>
<li>X、Y、Z 都不为 0，<code>~1.2.3</code> 表示版本号 <code>&gt;=1.2.3 &amp;&amp; &lt; 1.3.0</code></li>
<li>X 为 0，<code>~0.2.3</code> 表示版本号 <code>&gt;=0.2.3 &amp;&amp; &lt; 0.3.0</code>，这种情况下，~ 等价于 ^</li>
<li>X、Y 为0，<code>0.0.3</code> 表示版本号 <code>&gt;=0.0.3 &amp;&amp; &lt; 0.1.0</code></li>
</ul>
<h2 id="x"><a href="#x" class="headerlink" title="x"></a>x</h2><blockquote>
<p>可以替代 X、Y、Z 中任意一个，表示该位置可更新</p>
</blockquote>
<ul>
<li><strong>1.2.x</strong>: <code>&gt;=1.2.0 &amp;&amp; &lt; 1.3.0</code></li>
<li><strong>1.x</strong>: <code>&gt;=1.0.0 &amp;&amp; &lt; 2.0.0</code></li>
<li><strong>*</strong>: 任意版本都可以</li>
</ul>
<p>上面的 <code>x</code> 可以用 <code>*</code> 代替，其实，用 <code>x</code> 或 <code>*</code> 的地方可以省略不写，比如 <code>1.2.x</code> 和 <code>1.2</code> 表示的意思是一样的</p>
<h1 id="npm包发布"><a href="#npm包发布" class="headerlink" title="npm包发布"></a>npm包发布</h1><p>通常我们发布一个包到 npm 仓库时，我们的做法是先修改 <code>package.json</code> 为某个版本，然后执行 <code>npm publish</code> 命令。手动修改版本号的做法建立在你对 Semver 规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从 Semver 规范：</p>
<ul>
<li>升级补丁版本号：npm version patch</li>
<li>升级小版本号：npm version minor</li>
<li>升级大版本号：npm version major</li>
</ul>
<p>当执行 <code>npm publish</code> 时，会首先将当前版本发布到 <code>npm registry</code>，然后更新 <code>dist-tags.latest</code> 的值为新版本。<br>当执行 <code>npm publish --tag=next</code> 时，会首先将当前版本发布到 <code>npm registry</code>，并且更新 <code>dist-tags.next</code> 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://semver.org/lang/zh-CN/">https://semver.org/lang/zh-CN/</a></li>
<li><a href="https://juejin.im/post/5ad413ba6fb9a028b5485866">Semver(语义化版本号)扫盲 - 腾讯IVWEB团队</a></li>
<li><a href="https://juejin.im/post/5a1ad2166fb9a044fd117874">语义化版本控制模块-Semver</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS攻击与预防</title>
    <url>/2017/03/31/XSS%E6%94%BB%E5%87%BB%E4%B8%8E%E9%A2%84%E9%98%B2/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/2017033114909695634288.jpg"></p>
<span id="more"></span>

<h2 id="Web安全之模拟XSS攻击"><a href="#Web安全之模拟XSS攻击" class="headerlink" title="Web安全之模拟XSS攻击"></a>Web安全之模拟XSS攻击</h2><p>跨站脚本（XSS, Cross Site Script）攻击指的是，攻击者可以让某网站执行一段非法脚本。这种情况很常见，比如提交一个表单用于修改用户名，我们可以在文本框中输入一些特殊字符，比如<code>&lt;</code>,<code>&gt;</code>,<code>&#39;</code>,<code>&quot;</code>等，检查一下用户名是否正确修改了。</p>
<h3 id="XSS的攻击方式"><a href="#XSS的攻击方式" class="headerlink" title="XSS的攻击方式"></a>XSS的攻击方式</h3><ul>
<li>反射型<blockquote>
<p>发出请求是,XSS代码出现在URL中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随着响应内容一起传回浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,故叫做反射型XSS。</p>
</blockquote>
</li>
<li>存储型<blockquote>
<p>存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面是不用再提交XSS代码。</p>
</blockquote>
</li>
</ul>
<p><code>XSS</code>一定是由用户的输入引起的，无论是提交表单、还是点击链接（参数）的方式，只要是对用户的输入不做任何转义就写到数据库，或者写到<code>html</code>，<code>js</code>中，就很有可能出错。</p>
<p>从一个请求发出开始，到浏览器显示内容，与<code>XSS</code>相关的有三个地方<code>URL、HTML、JavaScript</code>。至于后台方面，它分两个功能，一个是将数据写到数据库，这时候也要对数据进行转义，但不是XSS的范畴，它更多是防止数据破坏<code>SQL</code>语句的结构；另一个是从数据库读取数据，直接生成<code>HTML</code>或者以<code>JSON</code>的方式传给前端，这些数据都必须转义后才能显示到浏览器中。</p>
<h2 id="HTML字符"><a href="#HTML字符" class="headerlink" title="HTML字符"></a>HTML字符</h2><p><code>HTML</code>本身是一个文本文档，但在浏览器中却可以显现得花样百出，是因为很多字符对于浏览器来说是有特殊含义的，比如在<code>&lt;script&gt;</code>中的内容，浏览器会做一些动画等等。那么对这些特殊字符进行转义，就意味着让浏览器对待它们的时候，就像普通字符一样，比如<code>&amp;lg;script&amp;gt;</code>这段文字在浏览器中就会正常显示为<code>&lt;script&gt;</code>。</p>
<h3 id="简单的用来转义HTML的JavaScript方法"><a href="#简单的用来转义HTML的JavaScript方法" class="headerlink" title="简单的用来转义HTML的JavaScript方法"></a>简单的用来转义<code>HTML</code>的<code>JavaScript</code>方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encodeHTML</span> (a) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>(a)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&quot;&amp;amp;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&quot;&amp;quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&quot;&amp;#39;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>那么有哪些字符需要转义呢？这里列了一些常见的。</p>
<p><code>&quot; --&gt; &amp;#34;</code><br><code># --&gt; &amp;#35;</code><br><code>$ --&gt; &amp;#36;</code><br><code>&amp; --&gt; &amp;#38;</code><br><code>&#39; --&gt; &amp;#39;</code><br><code>( --&gt; &amp;#40;</code><br><code>) --&gt; &amp;#41;</code><br><code>; --&gt; &amp;#59;</code><br><code>&lt; --&gt; &amp;#60;</code><br><code>&gt; --&gt; &amp;#62;</code></p>
<p>在 escapeHTML 方法中，我使用了别名的方式转义，因为它比较容易记一点。无论是别名还是十六进制，它们表示的含义都是一样的，比如<code>&amp;amp;</code>和<code>&amp;#38;</code>都表示<code>&amp;</code>符号。想要看更具体的列表可以参考<a href="http://ascii.cl/htmlcodes.htm">这个网站</a></p>
<p>在浏览器收到 HTML 之后，首先会对所有的内容进行解码，它会把所有能识别的编码符号，解码成字面值。比如有</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>my name is<span class="symbol">&amp;#58;</span><span class="symbol">&amp;#32;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https<span class="symbol">&amp;#58;</span><span class="symbol">&amp;#47;</span><span class="symbol">&amp;#47;</span>i.jakeyu.top&quot;</span>&gt;</span>名一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>经过浏览器解码就变成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>my name is: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://i.jakeyu.top&quot;</span>&gt;</span>名一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里要说的是，浏览器只会对两个地方解码，一个是标签的<strong>内容</strong>（即<code>textContent</code>，除了<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>标签），另一个是标签的<strong>属性值</strong>。对于属性名是不会解码的。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>早些时候，服务端还不支持在<code>URL</code>中直接传输<code>Unicode</code>，比如<code>https://i.jakeyu.top/search?q=你好</code>这样的地址，服务端无法识别“你好”这个值，所以必须编码之后进行传输。</p>
<p>那么对于 URL，我们只需要对参数的值进行编码就可以了。比如上面这个链接，编码之后就是<code>https://i.jakeyu.top/find?q=%E4%BD%A0%E5%A5%BD</code>。</p>
<p>如果对整个 URL 编码，那么链接就无效了。</p>
<p>编码的方式很简单，浏览器提供了全局的<code>encodeURI</code>方法，调用之后就可以实现转义了。</p>
<p>有一点很重要<code>encodeURI</code>是不会转义<code>:</code>,<code>/</code>,<code>?</code>,<code>&amp;</code>,<code>=</code>这些在<code>URL</code>中有特殊含义的字符的，那么如果有个参数正好包含了这些字符，就不会转义，比如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://i.jakeyu.top/login?name=名一&amp;from=http://other.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; https://i.jakeyu.top/login?name=%E5%90%8D%E4%B8%80&amp;from=http://other.com</span></span><br></pre></td></tr></table></figure>


<p>from 参数的值并没有转义，这时候，就需要用到另一个方法<code>encodeURIComponent</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = <span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;http://other.com&#x27;</span>);</span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://i.jakeyu.top/login?name=名一&amp;from=&#x27;</span>) + param;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; https://i.jakeyu.top/login?name=%E5%90%8D%E4%B8%80&amp;from=http%3A%2F%2Fother.com</span></span><br></pre></td></tr></table></figure>

<p>所以结论就是，如果要对整个 URL 进行转义，使用 encodeURI，如果对参数的值进行转义，使用 encodeURIComponent。</p>
<p>当动态生成的链接地址需要赋值给<code>href</code>或者<code>src</code>属性时，需要对这些地址进行<code>URL</code>转义。当然，如果服务端支持在<code>URL</code>中包含<code>UTF-8</code>的字符的话，其实不转义也不会错，这就是为什么我们平时不会太注意对表单和<code>URL</code>参数进行转义的原因，因为服务端表现良好。</p>
<h2 id="JavaScript-特殊字符"><a href="#JavaScript-特殊字符" class="headerlink" title="JavaScript 特殊字符"></a>JavaScript 特殊字符</h2><p>JS 中的转义都是通过反斜杠完成，有三种类型，以<code>&#39;</code>和<code>&quot;</code>为例</p>
<ul>
<li>直接反斜杠 –&gt; &#39;&quot;</li>
<li>十六进制 –&gt; \x22\x27</li>
<li>Unicode –&gt; \u0022\u0027</li>
</ul>
<p>一般情况下可以直接通过反斜杠转义，但有些字符我们不知道怎么输入，很常见的比如 Web Font，在 CSS 中可以看到类似这样的代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.glyphicon-home</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那个 content 中的值可以通过十六进制或者 Unicode 的方式来代替。</p>
<p>JS 转义一般用于显示用户输入的时候，比如用户输入了反斜杠，需要显示时，就必须<code>alert(&#39;\\&#39;);</code>。</p>
<h2 id="解码顺序"><a href="#解码顺序" class="headerlink" title="解码顺序"></a>解码顺序</h2><p>当浏览器进行绘制时，首先会对 HTML 进行解码，然后是 URL，最后是执行 JS 时对它进行解码。</p>
<p>现在考虑这三种编码同时存在的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript&amp;#58;&amp;#32;alert(&#x27;\&lt;https&amp;#58;&amp;#47;&amp;#47;i.jakeyu.top/find?q=%E4%BD%A0%E5%A5%BD\&gt;&#x27;);&quot;</span>&gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>首先是<code>HTML</code>解码，结果为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript: alert(&#x27;\&lt;https://i.jakeyu.top/find?q=%E4%BD%A0%E5%A5%BD\&gt;&#x27;);&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后是<code>URL</code>解码，结果为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript: alert(&#x27;\&lt;https://i.jakeyu.top/find?q=你好\&gt;&#x27;);&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后是<code>JS</code>解码，结果为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript: alert(&#x27;&lt;https://i.jakeyu.top/find?q=你好&gt;&#x27;);&quot;</span>&gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>单击链接后，应该会出现一个弹窗，内容是<code>&lt;https://i.jakeyu.top/find?q=你好&gt;</code>。</p>
<p>本文更多的是介绍如何防止XSS的发生，而不是它的危害。核心就是用适当的方法对 HTML, JS 进行转义。</p>
<blockquote>
<p>来自<a href="https://segmentfault.com/a/1190000003874852">[Web 安全]了解XSS与防范</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>方案</tag>
      </tags>
  </entry>
  <entry>
    <title>antd upload组件不能显示参数图片缩略图</title>
    <url>/2018/12/13/antd-upload%E7%BB%84%E4%BB%B6%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%8F%82%E6%95%B0%E5%9B%BE%E7%89%87%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
    <content><![CDATA[<p>在使用<a href="https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn/">ant-design-vue</a>的upload组件时，无法显示加密图片，经过测试，凡是带参数的图片地址都无法显示缩略图。</p>
<span id="more"></span>

<h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><p>这个组件是基于<a href="https://github.com/ant-design/ant-design">ant-design</a>改写的，在issues中发现了解决办法 <a href="https://github.com/ant-design/ant-design/issues/10102#issuecomment-382748024">#10102</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  将图片转换成base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url 图片地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> base64Url = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">    reader.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      self.<span class="title function_">postMessage</span>(reader.<span class="property">result</span>) <span class="comment">//web worker 通信</span></span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(xhr.<span class="property">response</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>ajax</code>获取图片，并将图片转为<code>base64</code>。</p>
<h1 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h1><p>但是由于我开发的业务页面中有大量图片，如果每个图片都这样操作，页面会有些卡顿。所以需要进行优化。</p>
<p>我选择使用<code>Web Worker</code>，关于<code>Web Worker</code>可以查看阮一峰老师的文章： </p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">Web Worker 使用教程</a></li>
</ul>
<p>创建一个生成<code>Web Worker</code>的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建web worker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; f 要在worker中执行的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Strint</span>&#125; args 函数参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createWorker</span> = (<span class="params">f, args</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;(&#x27;</span> + f.<span class="title function_">toString</span>() + <span class="string">&#x27;)(&quot;&#x27;</span> + args + <span class="string">&#x27;&quot;)&#x27;</span>])</span><br><span class="line">  <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  <span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(url)</span><br><span class="line">  <span class="keyword">return</span> worker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myWorker = <span class="title function_">createWorker</span>(base64Url, url)</span><br><span class="line"><span class="comment">// 监听message事件</span></span><br><span class="line">myWorker.<span class="property">onmessage</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">data</span>)  <span class="comment">//打印转换后的base64</span></span><br><span class="line">  myWorker.<span class="title function_">terminate</span>()  <span class="comment">//销毁 web worker</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>异步编程之async</title>
    <url>/2017/03/15/async/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/async/async.png"></p>
<span id="more"></span>

<p><a href="http://caolan.github.io/async/index.html">async官方DOC</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h3><pre><code>npm install async --save
</code></pre>
<p>使用</p>
<pre><code>var async = require(&#39;async&#39;)
</code></pre>
<h3 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h3><p><a href="https://github.com/caolan/async/tree/master/dist">https://github.com/caolan/async/tree/master/dist</a></p>
<p>async提供了很多函数用于异步流程控制，下面是async核心的几个函数，完整的函数请看<a href="http://caolan.github.io/async/index.html">async官方DOC</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">map</span>([<span class="string">&#x27;file1&#x27;</span>,<span class="string">&#x27;file2&#x27;</span>,<span class="string">&#x27;file3&#x27;</span>], fs.<span class="property">stat</span>, <span class="keyword">function</span>(<span class="params">err, results</span>) &#123;</span><br><span class="line">   <span class="comment">// results is now an array of stats for each file</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.<span class="title function_">filter</span>([<span class="string">&#x27;file1&#x27;</span>,<span class="string">&#x27;file2&#x27;</span>,<span class="string">&#x27;file3&#x27;</span>], <span class="keyword">function</span>(<span class="params">filePath, callback</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">access</span>(filePath, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, !err)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, results</span>) &#123;</span><br><span class="line">    <span class="comment">// results now equals an array of the existing files</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.<span class="title function_">parallel</span>([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>) &#123; ... &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>) &#123; ... &#125;</span><br><span class="line">], <span class="keyword">function</span>(<span class="params">err, results</span>) &#123;</span><br><span class="line">    <span class="comment">// optional callback</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.<span class="title function_">series</span>([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>) &#123; ... &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>) &#123; ... &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h2 id="series串行"><a href="#series串行" class="headerlink" title="series串行"></a>series串行</h2><p><code>series</code>的作用就是按照顺序一次执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">series</span>([</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">err, results</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<pre><code>[ 1, 2 ]
</code></pre>
<p><code>series</code>函数的第一个参数可以是一个数组也可以是一个JSON对象，参数类型不同，影响的是返回数据的格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">series</span>(&#123;</span><br><span class="line">	<span class="attr">one</span>: <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">		<span class="title function_">callback</span>(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">two</span>: <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">		<span class="title function_">callback</span>(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err, results</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出为</p>
<pre><code>&#123;one: 1, two: 2&#125;
</code></pre>
<h2 id="waterfall瀑布流"><a href="#waterfall瀑布流" class="headerlink" title="waterfall瀑布流"></a>waterfall瀑布流</h2><p><code>waterfall</code>和<code>series</code>函数都是按照顺序执行，不同之处是<code>waterfall</code>每个函数产生的值都可以传递给下一个函数，<code>series</code>不可以。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">waterfall</span>([</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">		<span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">arg1, arg2, callback</span>) &#123;</span><br><span class="line">		<span class="comment">// arg1 now equals &#x27;one&#x27; and arg2 now equals &#x27;two&#x27;</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function 2&#x27;</span>)</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1: &#x27;</span> + arg1)</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg2: &#x27;</span> + arg2)</span><br><span class="line">		<span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;three&#x27;</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">arg1, callback</span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function 3&#x27;</span>)</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1: &#x27;</span> + arg1)</span><br><span class="line">			<span class="comment">// arg1 now equals &#x27;three&#x27;</span></span><br><span class="line">		<span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">], <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">	<span class="comment">// result now equals &#x27;done&#x27;</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="number">2</span></span><br><span class="line"><span class="attr">arg1</span>: one</span><br><span class="line"><span class="attr">arg2</span>: two</span><br><span class="line"><span class="keyword">function</span> <span class="number">3</span></span><br><span class="line"><span class="attr">arg1</span>: three</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><code>waterfall</code>第一个参数只能为数组。当中途有函数出错，其err直接传给最终callback，结果被丢弃，后面的函数不再执行。</p>
<h2 id="parallel-tasks-callback"><a href="#parallel-tasks-callback" class="headerlink" title="parallel(tasks, [callback])"></a>parallel(tasks, [callback])</h2><p><code>paraller</code>函数是并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。<br>传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">parallel</span>([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="keyword">function</span>(<span class="params">err, results</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>tasks参数可以是一个数组或是json对象，和<code>series</code>函数一样，tasks参数类型不同，返回的results格式会不一样。</p>
<p>将示例中tasks的回调函数用setTimeout在1000毫秒后调用，然后在<code>parallel</code>的回调函数中输出results，看一看整个过程花费了1s还是2s。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span>=<span class="built_in">require</span>(<span class="string">&quot;async&quot;</span>);</span><br><span class="line"><span class="keyword">async</span>.<span class="title function_">parallel</span>([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="keyword">function</span>(<span class="params">err, results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="parallelLimit-tasks-limit-callback"><a href="#parallelLimit-tasks-limit-callback" class="headerlink" title="parallelLimit(tasks, limit, [callback])"></a>parallelLimit(tasks, limit, [callback])</h2><p><code>parallelLimit</code>函数和<code>parallel</code>类似，但是它多了一个参数limit。 limit参数限制任务只能同时并发一定数量，而不是无限制并发，示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">parallelLimit</span>([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="number">2</span>,</span><br><span class="line"><span class="keyword">function</span>(<span class="params">err, results</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将示例中tasks的回调函数用setTimeout在1000毫秒后调用，limit参数设置为1，然后在parallelLimit的回调函数中输出results，看一看整个过程花费了1s还是2s。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span>=<span class="built_in">require</span>(<span class="string">&quot;async&quot;</span>);</span><br><span class="line"><span class="keyword">async</span>.<span class="title function_">parallelLimit</span>([</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="keyword">function</span>(<span class="params">err, results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="map-coll-iteratee-callbackopt"><a href="#map-coll-iteratee-callbackopt" class="headerlink" title="map(coll, iteratee, callbackopt)"></a>map(coll, iteratee, callbackopt)</h2><p><code>map</code>函数遍历传入的数组，并执行同样的操作，最终返回结果</p>
<ul>
<li>cool:数组</li>
<li>iteratee:对数组每一项要执行的函数</li>
<li>callbackopt:回调函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>.<span class="title function_">map</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">item, callback</span>) &#123;</span><br><span class="line">		<span class="title function_">callback</span>(<span class="literal">null</span>, item + <span class="number">5</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>[ 6, 7, 8, 9, 10 ]
</code></pre>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas多指触控[转]</title>
    <url>/2017/09/18/canvas%E5%A4%9A%E6%8C%87/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/2017091815057255674792.png"></p>
<span id="more"></span>


<blockquote>
<p><strong>原文：</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch_events">触摸事件</a></p>
</blockquote>
<p>为了给触摸界面提供有力支持, 触摸事件提供了响应用户对触摸屏或者触摸板上操作的能力.</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="平面"><a href="#平面" class="headerlink" title="平面"></a>平面</h2><p>对触摸敏感的平面</p>
<h2 id="触摸点"><a href="#触摸点" class="headerlink" title="触摸点"></a>触摸点</h2><p>平面上的一个接触点. 有可能是手指 (或者 肘部, 耳朵, 鼻子, 或任何东西, 不过大多数情况下是手指) 或者触摸笔.</p>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="TouchEvent"><a href="#TouchEvent" class="headerlink" title="TouchEvent"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent">TouchEvent</a></h2><p>代表当触摸行为在平面上变化的时候发生的事件.</p>
<h2 id="Touch"><a href="#Touch" class="headerlink" title="Touch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch">Touch</a></h2><p>代表用户与触摸平面间的一个接触点.</p>
<h2 id="TouchList"><a href="#TouchList" class="headerlink" title="TouchList"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList">TouchList</a></h2><p>代表一系列的Touch; 一般在用户多个手指同时接触触控平面时使用这个接口.</p>
<h2 id="DocumentTouch"><a href="#DocumentTouch" class="headerlink" title="DocumentTouch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentTouch">DocumentTouch</a></h2><p>包含了一些创建<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch">Touch</a>对象与<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList">TouchList</a>对象的便捷方法.</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>这个例子可跟踪多点同时触控,允许用户用多指触摸的方式在<code>&lt;canvas&gt;</code>元素上画图. 这个例子只会在支持触摸事件的浏览器下生效.</p>
<blockquote>
<p><strong>注意</strong>: 我们用“手指”表示用户与触摸平面进行交互,除此以外也可以是触摸笔或者其他方式.</p>
</blockquote>
<h2 id="创建-canvas"><a href="#创建-canvas" class="headerlink" title="创建 canvas"></a>创建 canvas</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:solid black 1px;&quot;</span>&gt;</span></span><br><span class="line">  Your browser does not support canvas element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;startup()&quot;</span>&gt;</span>Initialize<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Log: <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #ccc;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置事件处理器"><a href="#设置事件处理器" class="headerlink" title="设置事件处理器"></a>设置事件处理器</h2><p>当页面加载时，下面的<code>startup()</code>函数本应通过我们在<code>&lt;body&gt;</code>元素上设置的<code>onload</code> 属性而被<em>触发，但是由于MND在线案例系统限制，我们在这里通过一个按钮的点击事件触发。</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;canvas&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  el.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, handleStart, <span class="literal">false</span>);</span><br><span class="line">  el.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, handleEnd, <span class="literal">false</span>);</span><br><span class="line">  el.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, handleMove, <span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">log</span>(<span class="string">&quot;initialized.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里给我们的<code>&lt;canvas&gt;</code>元素设置了所有触摸相关的事件监听器，因此当事件触发时我们就可以处理它们.</p>
<h2 id="跟踪新的触摸行为"><a href="#跟踪新的触摸行为" class="headerlink" title="跟踪新的触摸行为"></a>跟踪新的触摸行为</h2><p>我们将检测正在进行的触摸事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ongoingTouches = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br></pre></td></tr></table></figure>

<p>当一个 <code>touchstart</code> 事件被触发, 代表在触摸板上一个发生了一个新的触摸行为,下面的 <code>handleStart()</code>函数会被调用.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleStart</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;canvas&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> ctx = el.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> touches = evt.<span class="property">changedTouches</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;touches.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    ongoingTouches.<span class="title function_">push</span>(touches[i]);</span><br><span class="line">    <span class="keyword">var</span> color = <span class="title function_">colorForTouch</span>(touches[i]);</span><br><span class="line">    ctx.<span class="property">fillStyle</span> = color;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(touches[i].<span class="property">pageX</span>-<span class="number">2</span>, touches[i].<span class="property">pageY</span>-<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault">event.preventDefault()</a>阻止了浏览器继续处理触摸事件 (这同样也阻止了鼠标事件的传递). 而后我们拿到事件上下文，从事件的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/changedTouches">TouchEvent.changedTouches</a> 属性中拿到改变中的触摸点列表.</p>
<p> 我们遍历上述的点列表<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch">Touch</a> 并把这些点压入一个代表当前活动的触摸点组成的数组中，以这些点为起点画矩形; 我们设置线条宽度为四像素，所以最终我们画出来的是一个四乘四的正方形。</p>
<h2 id="当触摸移动时绘制"><a href="#当触摸移动时绘制" class="headerlink" title="当触摸移动时绘制"></a>当触摸移动时绘制</h2><p>每当一根或者几根手指在触摸平面上移动时, <code>touchmove</code> 事件被触发, 随之<code>handleMove()</code>函数被调用.此例子中，这个函数更新了上面保存过的触摸点信息，之后，从触摸点之前的位置到现在的位置之间绘制直线，且对每个点都进行这样的操作.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleMove</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;canvas&quot;</span>)[<span class="number">0</span>];  </span><br><span class="line">  <span class="keyword">var</span> ctx = el.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> touches = evt.<span class="property">changedTouches</span>;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">lineWidth</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;touches.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="title function_">colorForTouch</span>(touches[i]);</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="title function_">ongoingTouchIndexById</span>(touches[i].<span class="property">identifier</span>);</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">fillStyle</span> = color;</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(ongoingTouches[idx].<span class="property">pageX</span>, ongoingTouches[idx].<span class="property">pageY</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(touches[i].<span class="property">pageX</span>, touches[i].<span class="property">pageY</span>);</span><br><span class="line">    ctx.<span class="title function_">closePath</span>();</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">    ongoingTouches.<span class="title function_">splice</span>(idx, <span class="number">1</span>, touches[i]);  <span class="comment">// swap in the new touch record</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里同样遍历了所有被改变的触摸点,但为了决定每次新触摸要绘制的线段的起点，它也查询了我们先前缓存的触摸信息数组。这是通过查找每个触摸的  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch/identifier">Touch.identifier</a> 属性来做到的.这个属性是个整数，每次触摸都不同，在触摸事件期间手指一直接触表面，这个属性保持不变。</p>
<p>这样我们就可以拿到先前每个触摸的坐标点，之后以适当的上下文方法将两点连接起来，并绘制线段。</p>
<p>当这条线绘制完毕后我们调用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.splice()</a>,把<code>ongoingTouches</code>数组中之前的触摸点信息用现在的信息来代替.</p>
<h2 id="对触摸行为的结束进行处理"><a href="#对触摸行为的结束进行处理" class="headerlink" title="对触摸行为的结束进行处理"></a>对触摸行为的结束进行处理</h2><p>当用户从触摸表面抬起手指时，<code>touchend</code> 事件被触发. 类似的当手指移除<code>canvas</code>区域外，我们会得到<code>touchleave</code> 事件. 我们利用相同的方式来处理这两种情况，即调用下面的<code>handleEnd()</code>函数.这个函数的作用是给每个已经结束的触摸绘制最后一段线段，同时把这个触摸点从进行中的触摸列表数组中移除.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleEnd</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;canvas&quot;</span>)[<span class="number">0</span>];  </span><br><span class="line">  <span class="keyword">var</span> ctx = el.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> touches = evt.<span class="property">changedTouches</span>;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">lineWidth</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;touches.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="title function_">colorForTouch</span>(touches[i]);</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="title function_">ongoingTouchIndexById</span>(touches[i].<span class="property">identifier</span>);</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">fillStyle</span> = color;</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(ongoingTouches[i].<span class="property">pageX</span>, ongoingTouches[i].<span class="property">pageY</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(touches[i].<span class="property">pageX</span>, touches[i].<span class="property">pageY</span>);</span><br><span class="line">    ongoingTouches.<span class="title function_">splice</span>(i, <span class="number">1</span>);  <span class="comment">// remove it; we&#x27;re done</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数跟之前的函数很类似，唯一的区别是我们调用<a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice">Array.splice()</a>时, 在正在进行的触摸列表中，我们仅仅将一个触摸的标识移除，而不再添加这个触摸新的信息。结果就是我们停止跟踪这个触摸点。</p>
<h2 id="处理取消触摸事件"><a href="#处理取消触摸事件" class="headerlink" title="处理取消触摸事件"></a>处理取消触摸事件</h2><p>如果用户的手指滑出触摸区域，滑入浏览器界面时，或者触摸需要取消时，<code>touchcancel</code> 事件会被传递,下面的 <code>handleCancel()</code> 函数会被触发.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleCancel</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">var</span> touches = evt.<span class="property">changedTouches</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;touches.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    ongoingTouches.<span class="title function_">splice</span>(i, <span class="number">1</span>);  <span class="comment">// remove it; we&#x27;re done</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们的目的是立刻结束触摸，所以我们直接从正在进行的触摸列表中删除，不会绘制最后一部分线段。</p>
<h2 id="便捷函数"><a href="#便捷函数" class="headerlink" title="便捷函数"></a>便捷函数</h2><p>这个例子使用了两个很方便的函数，有必要简单了解下这两个函数，会有助于更加清楚的理解代码剩余的部分。</p>
<h2 id="为每次触摸选择一个颜色"><a href="#为每次触摸选择一个颜色" class="headerlink" title="为每次触摸选择一个颜色"></a>为每次触摸选择一个颜色</h2><p>为了让每次触摸绘制的内容看起来不相同，colorForTouch()函数用来根据每一次触摸所独有的标识来取颜色 . 这个标识的范围通常是0到所有活动触摸对象的数量-1. 而基本不可能会有人用多于16根手指去使用这个demo,我们直接把这种情况转为灰色。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">colorForTouch</span>(<span class="params">touch</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> id = touch.<span class="property">identifier</span>;</span><br><span class="line">  id = id.<span class="title function_">toString</span>(<span class="number">16</span>); <span class="comment">// make it a hex digit</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> + id + id + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数返回一个字符串，可以用在 <code>&lt;canvas&gt;</code> 函数中用来设置绘制颜色. 举例来说，若触摸的标识符<code>Touch.identifier</code>为10, 转换后的字符串为 “#aaa”.</p>
<h2 id="查询正在进行的触摸行为"><a href="#查询正在进行的触摸行为" class="headerlink" title="查询正在进行的触摸行为"></a>查询正在进行的触摸行为</h2><p>下面的<code>ongoingTouchIndexById()</code> 函数通过遍历查找数组 <code>ongoingTouches</code> 来找到与给定标识相匹配的触摸行为，之后返回这个触摸行为在数组中的下标。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ongoingTouchIndexById</span>(<span class="params">idToFind</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ongoingTouches.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> id = ongoingTouches[i].<span class="property">identifier</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (id == idToFind) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;    <span class="comment">// not found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 + nodejs + nginx + MySQL搭建服务器</title>
    <url>/2016/10/17/centos+nodejs+nginx+mysql%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>最近项目要求，需要一台服务器，阿里和腾讯都不错，我选择了腾讯云，系统为CentOS 7（linux）。记录搭建服务器的过程，方便以后再次搭建是借鉴和给第一次搭建服务器的朋友借鉴之用。</p>
<p><img data-src="//blogimg.jakeyu.top/20170327149054583559344.png"></p>
<span id="more"></span>

<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p>执行：</p>
<blockquote>
<p>sudo yum install git</p>
</blockquote>
<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><h2 id="使用EPEL安装"><a href="#使用EPEL安装" class="headerlink" title="使用EPEL安装"></a>使用EPEL安装</h2><p>EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL&#x2F;CentOS提供他们默认不提供的软件包。<br>先安装epel-release包：</p>
<blockquote>
<p>sudo yum install epel-release</p>
</blockquote>
<p>安装完后，就可以使用yum命令安装nodejs了，安装的一般会是较新的版本，并且会将npm作为依赖包一起安装</p>
<blockquote>
<p>sudo yum install nodejs</p>
</blockquote>
<p>安装完成后，验证是否正确的安装</p>
<blockquote>
<p>node -v<br>v6.9.4</p>
</blockquote>
<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p><a href="https://nodejs.org/zh-cn/">官网</a>查看最新版本</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先进入&#x2F;usr&#x2F;src文件夹，这个文件夹通常用来存放软件源代码:</p>
<blockquote>
<p>cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;<br>wget <a href="https://nodejs.org/dist/v4.6.0/node-v4.6.0.tar.gz">https://nodejs.org/dist/v4.6.0/node-v4.6.0.tar.gz</a></p>
</blockquote>
<p>版本自己替换</p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><blockquote>
<p>tar zxvf node-v4.6.0.tar.gz</p>
</blockquote>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><blockquote>
<p>cd node-v4.6.0&#x2F;<br>.&#x2F;configure    &#x2F;&#x2F; 执行 Node.js 安装包自带的脚本，修改相关的系统配置文件</p>
</blockquote>
<p>发现报错了，提示系统中没有安装C编译器，接下来先安装C编译器</p>
<p>安装gcc</p>
<blockquote>
<p>yum install gcc</p>
</blockquote>
<p>安装g++</p>
<blockquote>
<p>yum install gcc-c++</p>
</blockquote>
<p>安装gfortran</p>
<blockquote>
<p>yum install gcc-gfortran</p>
</blockquote>
<p>重新执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> node-v4.6.0/</span><br><span class="line">./configure    // 执行 Node.js 安装包自带的脚本，修改相关的系统配置文件</span><br><span class="line">make          //编译 C源代码为 可执行的 Linux程序</span><br></pre></td></tr></table></figure>

<p>好慢啊。。。。。。难道是我买的最低配置的原因么。。。。。。</p>
<p>终于跑完了😂，全程大约十几分钟，所以大家要耐心等待哦。。。。。。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo make install			//	安装文件</span><br><span class="line">node --version				//查看安装node的版本</span><br><span class="line">npm -v						//查看npm的版本</span><br></pre></td></tr></table></figure>

<p>现在已经安装了Node.js, 可以开始部署应用程序, 首先要使用Node.js的模块管理器npm安装Express middleware 和forever（一个用来确保应用程序启动并且在需要时重启的非常有用的模块）,其中g参数是把express安装到NodeJS的lib目录，d参数表示同时安装依赖模块包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -gd express-generator forever</span><br></pre></td></tr></table></figure>

<h2 id="建立测试项目并执行"><a href="#建立测试项目并执行" class="headerlink" title="建立测试项目并执行"></a>建立测试项目并执行</h2><p>在<code>/home</code>文件夹下执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">express testapp</span><br><span class="line"><span class="built_in">cd</span> testapp</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>上面，第一条命令是创建express框架通用项目，第三条命令是安装依赖包，第四条是执行。<br>执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> package.json</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/%E6%88%AA%E5%9B%BE%202016-10-17.jpg"></p>
<p>第四条命令就相当于执行了<code>node ./bin/www</code>。</p>
<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/QQ20161017-1.png"></p>
<p>这样就运行成功了。<br>但是当我们关闭终端之后，进程就将结束，现在刚安装的<code>forever</code>就派上用场了,<code>forever</code>可以让进程在终端关闭之后继续运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forever start ./bin/www</span><br></pre></td></tr></table></figure>

<p>我们可以使用下面命令查看<code>forever</code>运行的程序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forever list</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/QQ20161017-2.png"></p>
<p>现在我们就可以在浏览器中输入：公网IP + :3000，来访问我们的程序。<br>如果要修改<code>3000</code>端口，我们可以修改<code>./bin/www</code>文件中关于监听3000端口的字段。</p>
<p>停止运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forever stop 0		//0代表前面[0],这是当前进程的ID</span><br></pre></td></tr></table></figure>

<p>停止所有:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forever stopall</span><br></pre></td></tr></table></figure>

<h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>HTTP请求是80端口，但是在Linux上非root权限是无法使用1024以下端口的，并且因为安全原因，最好不要使用root权限登录服务器，所以无法直接用node.js程序监听80端口。因此我们需要使用Nginx给node.js做反向代理，将80端口指向应用程序监听的端口(如node.js默认的3000端口)。</p>
<h2 id="添加Nginx仓库"><a href="#添加Nginx仓库" class="headerlink" title="添加Nginx仓库"></a>添加Nginx仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure>

<h2 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>


<h2 id="启用nginx服务"><a href="#启用nginx服务" class="headerlink" title="启用nginx服务"></a>启用nginx服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure>

<h2 id="添加开机启动"><a href="#添加开机启动" class="headerlink" title="添加开机启动"></a>添加开机启动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>

<h2 id="修改Nginx配置文件"><a href="#修改Nginx配置文件" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf	//使用lnpm意见安装，Nginx 目录: /usr/local/nginx/</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name jakexin.top,www.jakexin.top;             <span class="comment">#绑定的域名</span></span><br><span class="line">	<span class="comment"># 开启gzip</span></span><br><span class="line">	gzip on;</span><br><span class="line">	<span class="comment"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line">	gzip_min_length 1k;</span><br><span class="line">	<span class="comment"># gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span></span><br><span class="line">	gzip_comp_level 2;</span><br><span class="line">	<span class="comment"># 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span></span><br><span class="line">	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">	<span class="comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span></span><br><span class="line">	gzip_vary on;</span><br><span class="line">	<span class="comment"># 禁用IE 6 gzip</span></span><br><span class="line">	gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#配置缓存</span></span><br><span class="line">	location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123; </span><br><span class="line">        access_log   off; </span><br><span class="line">        expires      30d;</span><br><span class="line">	&#125;</span><br><span class="line">	location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">	    access_log   off;</span><br><span class="line">	    expires      24h;</span><br><span class="line">	&#125;</span><br><span class="line">	location ~* ^.+\.(html|htm)$ &#123;</span><br><span class="line">	        expires      1h;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">      proxy_set_header   X-Real-IP            <span class="variable">$remote_addr</span>;</span><br><span class="line">      proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      proxy_set_header   Host                   <span class="variable">$http_host</span>;</span><br><span class="line">      proxy_set_header   X-NginX-Proxy    <span class="literal">true</span>;</span><br><span class="line">      proxy_set_header   Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_pass http://127.0.0.1:3000;              <span class="comment">#对应该的Nodejs程序端口</span></span><br><span class="line">    &#125;</span><br><span class="line">    access_log  /mnt/log/www/jakexin_access.log;    <span class="comment">#网站访问日志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试配置文件是否能够正确运行"><a href="#测试配置文件是否能够正确运行" class="headerlink" title="测试配置文件是否能够正确运行"></a>测试配置文件是否能够正确运行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/QQ20161017-0.png"></p>
<p>这样就是配置成功</p>
<h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>

<p>现在直接在浏览器中输入我们配置的域名就可以访问我们的项目了。</p>
<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>查看可用版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum list | grep mysql</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/QQ20161014-0.png"></p>
<p>在centOS 7中不能使用<code>yum -y install mysql mysql-server mysql-devel</code>安装，这样会默认安装mysql的分支mariadb。</p>
<blockquote>
<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的<br>的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>
</blockquote>
<h2 id="正确的安装方法"><a href="#正确的安装方法" class="headerlink" title="正确的安装方法"></a>正确的安装方法</h2><p>众所周知，Linux系统自带的repo是不会自动更新每个软件的最新版本（基本都是比较靠后的稳定版），所以无法通过yum方式安装MySQL的高级版本。所以我们需要先安装带有当前可用的mysql5系列社区版资源的rpm包。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span>   //查看当前可用资源</span><br></pre></td></tr></table></figure>
<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/QQ20161014-2.png"><br>从上面的列表可以看出， mysql56-community&#x2F;x86_64 和 MySQL 5.6 Community Server 可以使用。</p>
<p>因此，我们就可以直接用yum方式安装了MySQL5.6版本了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<h2 id="MySQL基础配置"><a href="#MySQL基础配置" class="headerlink" title="MySQL基础配置"></a>MySQL基础配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld		//添加到开机启动</span><br><span class="line">systemctl start mysqld		//启用进程</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line">In order to <span class="built_in">log</span> into MySQL to secure it, we<span class="string">&#x27;ll need the current</span></span><br><span class="line"><span class="string">password for the root user.  If you&#x27;</span>ve just installed MySQL, and</span><br><span class="line">you haven<span class="string">&#x27;t set the root password yet, the password will be blank,</span></span><br><span class="line"><span class="string">so you should just press enter here.</span></span><br><span class="line"><span class="string">Enter current password for root (enter for none): </span></span><br><span class="line"><span class="string">OK, successfully used password, moving on...</span></span><br><span class="line"><span class="string">Setting the root password ensures that nobody can log into the MySQL</span></span><br><span class="line"><span class="string">root user without the proper authorisation.</span></span><br><span class="line"><span class="string">Set root password? [Y/n] y                  [设置root用户密码]</span></span><br><span class="line"><span class="string">New password: </span></span><br><span class="line"><span class="string">Re-enter new password: </span></span><br><span class="line"><span class="string">Password updated successfully!</span></span><br><span class="line"><span class="string">Reloading privilege tables..</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string">By default, a MySQL installation has an anonymous user, allowing anyone</span></span><br><span class="line"><span class="string">to log into MySQL without having to have a user account created for</span></span><br><span class="line"><span class="string">them.  This is intended only for testing, and to make the installation</span></span><br><span class="line"><span class="string">go a bit smoother.  You should remove them before moving into a</span></span><br><span class="line"><span class="string">production environment.</span></span><br><span class="line"><span class="string">Remove anonymous users? [Y/n] y                 [删除匿名用户]</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string">Normally, root should only be allowed to connect from &#x27;</span>localhost<span class="string">&#x27;.  This</span></span><br><span class="line"><span class="string">ensures that someone cannot guess at the root password from the network.</span></span><br><span class="line"><span class="string">Disallow root login remotely? [Y/n] y       [禁止root远程登录]</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string">By default, MySQL comes with a database named &#x27;</span><span class="built_in">test</span><span class="string">&#x27; that anyone can</span></span><br><span class="line"><span class="string">access.  This is also intended only for testing, and should be removed</span></span><br><span class="line"><span class="string">before moving into a production environment.</span></span><br><span class="line"><span class="string">Remove test database and access to it? [Y/n] y          [删除test数据库]</span></span><br><span class="line"><span class="string"> - Dropping test database...</span></span><br><span class="line"><span class="string">ERROR 1008 (HY000) at line 1: Can&#x27;</span>t drop database <span class="string">&#x27;test&#x27;</span>; database doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string"> ... Failed!  Not critical, keep moving...</span></span><br><span class="line"><span class="string"> - Removing privileges on test database...</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string">Reloading the privilege tables will ensure that all changes made so far</span></span><br><span class="line"><span class="string">will take effect immediately.</span></span><br><span class="line"><span class="string">Reload privilege tables now? [Y/n] y            [刷新权限]</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">All done!  If you&#x27;</span>ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks <span class="keyword">for</span> using MySQL! </span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>

<h1 id="操作MySQL"><a href="#操作MySQL" class="headerlink" title="操作MySQL"></a>操作MySQL</h1><h2 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span> with grant option;		</span><br><span class="line"><span class="comment">##添加授权的用户 </span></span><br><span class="line"><span class="comment">##root是用户名，%代表任意主机，&#x27;123456&#x27;指定的登录密码（这个和本地的root密码可以设置不同的，互不影响）</span></span><br><span class="line">flush privileges;	//刷新数据库</span><br></pre></td></tr></table></figure>

<h2 id="检测是否开启3306端口"><a href="#检测是否开启3306端口" class="headerlink" title="检测是否开启3306端口"></a>检测是否开启3306端口</h2><blockquote>
<p>netstat -tunlp</p>
</blockquote>
<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/QQ20161015-0.png"></p>
<p>看到3306端口被开启之后，我们就可以使用本地客户端远程访问数据库了</p>
<p><img data-src="//blogimg.jakeyu.top//nodejs+MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/%E6%88%AA%E5%9B%BE%202016-10-15%2011%E6%97%B638%E5%88%8609%E7%A7%92.jpg"></p>
<h2 id="数据库备份与还原"><a href="#数据库备份与还原" class="headerlink" title="数据库备份与还原"></a>数据库备份与还原</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>连接数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>查看数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">show databases; </span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top/20170628149862866369896.jpg"></p>
<p>退出数据库进行备份</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p rap_db &gt; rap.sql</span><br></pre></td></tr></table></figure>
<p>备份完成</p>
<h3 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p rap_db &lt; rap.sql</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 使用 Clash 梯子</title>
    <url>/2021/11/27/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/</url>
    <content><![CDATA[<p>服务器访问 npm、github 等真让人捉急，折腾一下配个 clash。</p>
<p><img data-src="//blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/logo.png"></p>
<span id="more"></span>

<h2 id="下载-clash"><a href="#下载-clash" class="headerlink" title="下载 clash"></a>下载 clash</h2><p>去 <a href="https://github.com/Dreamacro/clash/releases">github</a> 下载最新 linux 版本，一般使用 <code>linux-amd64</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gunzip clash-linux-amd64-v1.8.0.gz</span><br><span class="line">mv clash-linux-amd64-v1.8.0 ~/clash</span><br><span class="line">chmod +x ~/clash</span><br><span class="line">./clash</span><br></pre></td></tr></table></figure>

<p>一套执行完后会生成默认配置文件 <code>~/.config/clash</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">l ~/.config/clash</span><br><span class="line">-rw-r--r-- 1 root root 190K 11月 24 16:38 config.yaml</span><br><span class="line">-rw-r--r-- 1 root root 5.7M 11月 24 16:02 Country.mmdb</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我是用的是 <a href="https://join.v2fly.club/#/register?code=C5EnE7vC">V2Club</a>。</p>
<h3 id="复制订阅地址"><a href="#复制订阅地址" class="headerlink" title="复制订阅地址"></a>复制订阅地址</h3><p><img data-src="http://blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/iShot2021-11-27%2023.29.16.png"></p>
<p>这个配置我们不能直接使用，需要使用 <a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/</a> 服务生成订阅地址，然后打开订阅地址就可以看到明文配置。</p>
<p>使用这份配置覆盖 <code>~/.config/clash/config.yaml</code>。</p>
<h3 id="启动代理"><a href="#启动代理" class="headerlink" title="启动代理"></a>启动代理</h3><p>然后启动 clash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./clash</span><br></pre></td></tr></table></figure>

<p>设置终端使用 clash 代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure>

<p>可以使用 <code>curl</code> 测试是否连接成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://www.google.com</span><br></pre></td></tr></table></figure>

<h2 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h2><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.config/clash/config.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span></span><br><span class="line"><span class="comment"># 一定要配置 secret，用来远程访问安全</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure>

<p>重启 clash 服务。</p>
<p>打开官方 <a href="http://clash.razord.top/">http://clash.razord.top/</a>，在设置中填写相应的端口，secret 配置。配置完成就即可远程管理</p>
<p><img data-src="http://blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/iShot2021-11-27%2023.50.06.png"></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7中firewall防火墙常用命令</title>
    <url>/2017/02/27/centos7%E4%B8%ADfirewall%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/firewall/firewall%202.jpeg"></p>
<span id="more"></span>

<p>最近在搭建小程序服务端的时候想远程连接服务器mongodb数据库，发现一直出错，原来是这货。</p>
<p>firewall是centos7的一大特性，最大的好处有两个：</p>
<ul>
<li>支持动态更新</li>
<li>不用重启服务；</li>
</ul>
<h2 id="开启、关闭firewall"><a href="#开启、关闭firewall" class="headerlink" title="开启、关闭firewall"></a>开启、关闭firewall</h2><h3 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h3><pre><code>systemctl start firewalld
</code></pre>
<h3 id="查看状态："><a href="#查看状态：" class="headerlink" title="查看状态："></a>查看状态：</h3><pre><code>systemctl status firewalld 或者 firewall-cmd –state
</code></pre>
<h3 id="停止："><a href="#停止：" class="headerlink" title="停止："></a>停止：</h3><pre><code>systemctl disable firewalld
</code></pre>
<h3 id="禁用："><a href="#禁用：" class="headerlink" title="禁用："></a>禁用：</h3><pre><code>systemctl stop firewalld
</code></pre>
<h2 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h2><h3 id="打开一个端口："><a href="#打开一个端口：" class="headerlink" title="打开一个端口："></a>打开一个端口：</h3><pre><code>firewall-cmd --permanent --add-port=8080/tcp
</code></pre>
<h3 id="关闭一个端口："><a href="#关闭一个端口：" class="headerlink" title="关闭一个端口："></a>关闭一个端口：</h3><pre><code>firewall-cmd --permanent --remove-port=8080/tcp
</code></pre>
<h3 id="打开某项服务："><a href="#打开某项服务：" class="headerlink" title="打开某项服务："></a>打开某项服务：</h3><pre><code>firewall-cmd --permanent --add-service=http
</code></pre>
<h3 id="关闭某项服务："><a href="#关闭某项服务：" class="headerlink" title="关闭某项服务："></a>关闭某项服务：</h3><pre><code>firewall-cmd --permanent --remove-service=http
</code></pre>
<h3 id="进行端口转发："><a href="#进行端口转发：" class="headerlink" title="进行端口转发："></a>进行端口转发：</h3><pre><code>firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=192.0.2.55
</code></pre>
<h3 id="允许转发到其他地址："><a href="#允许转发到其他地址：" class="headerlink" title="允许转发到其他地址："></a>允许转发到其他地址：</h3><pre><code>firewall-cmd --permanent --add-masquerade
</code></pre>
<h3 id="重新加载防火墙："><a href="#重新加载防火墙：" class="headerlink" title="重新加载防火墙："></a>重新加载防火墙：</h3><pre><code>firewall-cmd --reload
</code></pre>
<h2 id="配置firewall"><a href="#配置firewall" class="headerlink" title="配置firewall"></a>配置firewall</h2><h3 id="查看版本："><a href="#查看版本：" class="headerlink" title="查看版本："></a>查看版本：</h3><pre><code>firewall-cmd –version
</code></pre>
<h3 id="查看帮助："><a href="#查看帮助：" class="headerlink" title="查看帮助："></a>查看帮助：</h3><pre><code>firewall-cmd –help
</code></pre>
<h3 id="查看设置："><a href="#查看设置：" class="headerlink" title="查看设置："></a>查看设置：</h3><ul>
<li>显示状态：$ firewall-cmd –state</li>
<li>查看区域信息: $ firewall-cmd –get-active-zones</li>
<li>查看指定接口所属区域：$ firewall-cmd –get-zone-of-interface&#x3D;eth0</li>
</ul>
<h3 id="拒绝所有包："><a href="#拒绝所有包：" class="headerlink" title="拒绝所有包："></a>拒绝所有包：</h3><pre><code>firewall-cmd –panic-on
</code></pre>
<h3 id="取消拒绝状态："><a href="#取消拒绝状态：" class="headerlink" title="取消拒绝状态："></a>取消拒绝状态：</h3><pre><code>firewall-cmd –panic-off
</code></pre>
<h3 id="查看是否拒绝："><a href="#查看是否拒绝：" class="headerlink" title="查看是否拒绝："></a>查看是否拒绝：</h3><pre><code>firewall-cmd –query-panic
</code></pre>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>centos使用SS翻墙</title>
    <url>/2017/03/16/centos%E4%BD%BF%E7%94%A8SS%E7%BF%BB%E5%A2%99/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/shadowsocks.png"></p>
<span id="more"></span>

<div class="note danger"><p>梯子服务商推荐 <a href="https://join.v2fly.club/#/register?code=C5EnE7vC">V2Club</a>，支持全平台，安全、稳定。</p>
</div>

<h2 id="socks5-全局代理"><a href="#socks5-全局代理" class="headerlink" title="socks5 全局代理"></a>socks5 全局代理</h2><h3 id="安装-sslocal"><a href="#安装-sslocal" class="headerlink" title="安装 sslocal"></a>安装 sslocal</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks <span class="comment"># pip安装ss客户端</span></span><br><span class="line">如果提示 -bash: pip: <span class="built_in">command</span> not found</span><br><span class="line">运行 yum -y install python-pip</span><br></pre></td></tr></table></figure>

<h3 id="shadowsocks-json"><a href="#shadowsocks-json" class="headerlink" title="shadowsocks.json"></a>shadowsocks.json</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br><span class="line">--- shadowsocks.json ---</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;SERVER-IP&quot;</span>,   <span class="comment"># 你的服务器ip</span></span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>:PORT,    <span class="comment"># 服务器端口</span></span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;PASSWORD&quot;</span>,    <span class="comment"># 密码</span></span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-128-cfb&quot;</span>, <span class="comment"># 加密方式</span></span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;workers&quot;</span>: 1</span><br><span class="line">&#125;</span><br><span class="line">--- shadowsocks.json ---</span><br></pre></td></tr></table></figure>

<h3 id="运行-sslocal"><a href="#运行-sslocal" class="headerlink" title="运行 sslocal"></a>运行 sslocal</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> sslocal -c /etc/shadowsocks.json &amp;&gt;&gt; /var/log/sslocal.log &amp;</span><br></pre></td></tr></table></figure>


<h2 id="privoxy篇"><a href="#privoxy篇" class="headerlink" title="privoxy篇"></a>privoxy篇</h2><h3 id="安装-privoxy"><a href="#安装-privoxy" class="headerlink" title="安装 privoxy"></a>安装 privoxy</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install privoxy</span><br></pre></td></tr></table></figure>

<h3 id="配置-socks5-全局代理"><a href="#配置-socks5-全局代理" class="headerlink" title="配置 socks5 全局代理"></a>配置 socks5 全局代理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;forward-socks5 / 127.0.0.1:1080 .&#x27;</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure>

<h3 id="设置-http-x2F-https-代理"><a href="#设置-http-x2F-https-代理" class="headerlink" title="设置 http&#x2F;https 代理"></a>设置 http&#x2F;https 代理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118 <span class="comment"># privoxy默认监听端口为8118</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure>

<h3 id="运行-privoxy"><a href="#运行-privoxy" class="headerlink" title="运行 privoxy"></a>运行 privoxy</h3><pre><code>service privoxy start
</code></pre>
<h3 id="测试-socks5-全局代理"><a href="#测试-socks5-全局代理" class="headerlink" title="测试 socks5 全局代理"></a>测试 socks5 全局代理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl www.google.com</span><br><span class="line"><span class="comment">## 如果出现下面这段输出则代理成功！</span></span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=<span class="string">&quot;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/%3Fgws_rd%3Dcr&amp;amp;ust=1480320257875871&amp;amp;usg=AFQjCNHg9F5zMg83aD2KKHHHf-yecq0nfQ&quot;</span>&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<h2 id="简化使用"><a href="#简化使用" class="headerlink" title="简化使用"></a>简化使用</h2><p>进过上面的步骤我们的确代理成功了。。但是每次都要输入这么多命令太麻烦<br>这时我们可以利用 命令别名 来简化我们的操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ssinit=<span class="string">&#x27;nohup sslocal -c /etc/shadowsocks.json &amp;&gt;&gt; /var/log/sslocal.log &amp;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> sson=<span class="string">&#x27;export http_proxy=http://127.0.0.1:8118 &amp;&amp; export https_proxy=http://127.0.0.1:8118 &amp;&amp; systemctl start privoxy&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ssoff=<span class="string">&#x27;unset http_proxy &amp;&amp; unset https_proxy &amp;&amp; systemctl stop privoxy &amp;&amp; pkill sslocal&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre><code>### 开启ss代理
ssinit
sson
## 关闭ss代理
ssoff
</code></pre>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>css3实现文字渐变色动画</title>
    <url>/2018/06/27/css3%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E6%B8%90%E5%8F%98%E8%89%B2%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/css3%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E6%B8%90%E5%8F%98%E8%89%B2%E5%8A%A8%E7%94%BB/Untitled.gif"></p>
<span id="more"></span>

<p>利用css3<code>background-clip</code>属性：</p>
<p>background-clip: border-box || padding-box || context-box || no-clip || text</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>彩蛋不只是结尾才有<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#4e17df</span>, <span class="number">#fb6bea</span> <span class="number">25%</span>, <span class="number">#4e17df</span> <span class="number">50%</span>, <span class="number">#fb6bea</span> <span class="number">75%</span>, <span class="number">#4e17df</span>);</span><br><span class="line">  -webkit-text-fill-<span class="attribute">color</span>: transparent;</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">600%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: title <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> title &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">300%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css3自定义滚动条</title>
    <url>/2018/09/04/css3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>webkit</code>支持拥有<code>overflow</code>属性的区域，列表框，下拉菜单，<code>textarea</code>的滚动条自定义样式，所以用处还是挺大的。当然，兼容所有浏览器的滚动条样式目前是不存在的。</p>
<p><a href="https://i.jakeyu.top/demo/CSS3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F.html">DEMO</a></p>
<h1 id="滚动条属性"><a href="#滚动条属性" class="headerlink" title="滚动条属性"></a>滚动条属性</h1><ul>
<li><strong>::-webkit-scrollbar</strong> 滚动条整体部分</li>
<li><strong>::-webkit-scrollbar-thumb</strong>  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li>
<li><strong>::-webkit-scrollbar-track</strong>  滚动条的轨道（里面装有Thumb）</li>
<li><strong>::-webkit-scrollbar-button</strong> 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</li>
<li><strong>::-webkit-scrollbar-track-piece</strong> 内层轨道，滚动条中间部分（除去）</li>
<li><strong>::-webkit-scrollbar-corner</strong> 边角，即两个滚动条的交汇处</li>
<li><strong>::-webkit-resizer</strong> 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li>
</ul>
<h1 id="简洁版"><a href="#简洁版" class="headerlink" title="简洁版"></a>简洁版</h1><p>这里就不贴出详细代码了，demo里面可以通过查看源码寻找具体样式的设置。来看看demo中第二个滚动条的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span></span><br><span class="line">::-webkit-scrollbar</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滚动条轨道 内阴影+圆角*/</span></span><br><span class="line">::-webkit-scrollbar-track</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滑块 内阴影+圆角*/</span></span><br><span class="line">::-webkit-scrollbar-thumb</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="详细设置"><a href="#详细设置" class="headerlink" title="详细设置"></a>详细设置</h1><p>定义滚动条就是利用伪元素与伪类，那什么是伪元素和伪类呢？</p>
<p>伪类大家应该很熟悉<code>:link</code>,<code>:focus</code>,<code>:hover</code>，此外CSS3中又增加了许多伪类选择器，如<code>:nth-child</code>，<code>:last-child</code>，<code>:nth-last-of-type()</code>等。</p>
<p>CSS中的伪元素大家以前看过：<code>:first-line</code>,<code>:first-letter</code>,<code>:before</code>,<code>:after</code>。那么在CSS3中，伪元素进行了调整，在以前的基础上增加了一个<code>：</code>也就是现在变成了<code>::first-letter</code>,<code>::first-line</code>,<code>::before</code>,<code>::after</code>，另外CSS3还增加了一个<code>::selection</code>。两个<code>：：</code>和一个<code>：</code>在css3中主要用来区分伪类和伪元素。</p>
<p>webkit的伪类和伪元素的实现很强，可以把滚动条当成一个页面元素来定义，再结合一些高级的CSS3属性，比如渐变、圆角、RGBa等等。然后如果有些地方要用图片，可以把图片也可以转换成Base64，不然每次都得加载那个多个图片，增加请求数。</p>
<p>任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。下面的伪类可以应用到上面的伪元素中。有点小复杂，具体怎么写可以看第一个demo，那里也有注释。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">:horizontal</span><br><span class="line"><span class="comment">/*horizontal伪类适用于任何水平方向上的滚动条*/</span></span><br><span class="line"></span><br><span class="line">:vertical</span><br><span class="line"><span class="comment">/*vertical伪类适用于任何垂直方向的滚动条*/</span></span><br><span class="line"></span><br><span class="line">:decrement</span><br><span class="line"><span class="comment">/*decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮*/</span></span><br><span class="line"></span><br><span class="line">:increment</span><br><span class="line"><span class="comment">/*increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮*/</span></span><br><span class="line"></span><br><span class="line">:start</span><br><span class="line"><span class="comment">/*start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面*/</span></span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line"><span class="comment">/*end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面*/</span></span><br><span class="line"></span><br><span class="line">:double-button</span><br><span class="line"><span class="comment">/*double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。*/</span></span><br><span class="line"></span><br><span class="line">:single-button</span><br><span class="line"><span class="comment">/*single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。*/</span></span><br><span class="line"></span><br><span class="line">:no-button</span><br><span class="line"><span class="comment">/*no-button伪类表示轨道结束的位置没有按钮。*/</span></span><br><span class="line"></span><br><span class="line">:corner-present</span><br><span class="line"><span class="comment">/*corner-present伪类表示滚动条的角落是否存在。*/</span></span><br><span class="line"></span><br><span class="line">:window-inactive</span><br><span class="line"><span class="comment">/*适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。*/</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track-piece:start &#123;</span><br><span class="line"><span class="comment">/*滚动条上半边或左半边*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb:window-inactive &#123;</span><br><span class="line"><span class="comment">/*当焦点不在当前区域滑块的状态*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-button:horizontal:decrement:hover &#123;</span><br><span class="line"><span class="comment">/*当鼠标在水平滚动条下面的按钮上的状态*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>地址： <a href="https://www.xuanfengge.com/css3-webkit-scrollbar.html">CSS3自定义滚动条样式 -webkit-scrollbar - 轩枫阁</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css响应式正方形居中</title>
    <url>/2018/11/27/css%E5%93%8D%E5%BA%94%E5%BC%8F%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<p><code>body -&gt; div#box</code>，body铺满屏幕，box是一个宽度为body一半的正方形，用css使box垂直水平居中。</p>
<span id="more"></span>

<p><code>padding</code>百分比继承自父元素宽度，然后通过绝对定位和<code>translate</code>来实现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现三角形</title>
    <url>/2016/05/19/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<p>css实现三角形</p>
<span id="more"></span>
<h5 id="创建一个-lt-div-gt-标签"><a href="#创建一个-lt-div-gt-标签" class="headerlink" title="创建一个&lt;div&gt;标签"></a>创建一个<code>&lt;div&gt;</code>标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//把div的width，height都设置为0，然后使用border属性</span><br></pre></td></tr></table></figure>
<h5 id="下面是针对这个div创建的css"><a href="#下面是针对这个div创建的css" class="headerlink" title="下面是针对这个div创建的css"></a>下面是针对这个div创建的css</h5><h6 id="向上的箭头"><a href="#向上的箭头" class="headerlink" title="向上的箭头"></a>向上的箭头</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h6 id="向下的箭头"><a href="#向下的箭头" class="headerlink" title="向下的箭头"></a>向下的箭头</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h6 id="向左的箭头"><a href="#向左的箭头" class="headerlink" title="向左的箭头"></a>向左的箭头</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="向右的箭头"><a href="#向右的箭头" class="headerlink" title="向右的箭头"></a>向右的箭头</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h6 id="平分一个正方形"><a href="#平分一个正方形" class="headerlink" title="平分一个正方形"></a>平分一个正方形</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">50px</span> solid blue;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">50px</span> solid green;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">50px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css扩展语言通过变量声明媒体查询</title>
    <url>/2018/04/14/css%E6%89%A9%E5%B1%95%E8%AF%AD%E8%A8%80%E9%80%9A%E8%BF%87%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h1><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mobile</span>: <span class="string">&#x27;only screen and (max-device-width: 720px),</span></span><br><span class="line"><span class="string">only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 720px)&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> #&#123;<span class="variable">$mobile</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: (<span class="number">100vw</span>/<span class="number">7.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@mobile:</span> <span class="string">~&quot;only screen and (max-device-width: 720px), only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 720px)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="variable">@mobile</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: (<span class="number">100vw</span>/<span class="number">7.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a>postcss</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@custom-media --mobile only screen and (max-device-width: 720px),</span><br><span class="line">                       only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 720px);</span><br><span class="line"></span><br><span class="line">@media (--mobile)&#123;</span><br><span class="line">    font-size: (100vw/7.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>express处理views中HTML和ejs共存</title>
    <url>/2017/08/11/express%E5%A4%84%E7%90%86views%E4%B8%ADHTML%E5%92%8Cejs%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<span id="more"></span>

<p>配置模版渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="property">renderFile</span>)</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>之后可以再<code>html</code>文件中使用<code>ejs</code>语法渲染变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">render</span>(<span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;哦&#x27;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>flex的各种值</title>
    <url>/2018/12/08/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/bg2015071002.png"></p>
<span id="more"></span>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
</blockquote>
<p>关于详细<code>flex</code>使用，可以查看<a href="http://www.ruanyifeng.com/">阮一峰</a>的两篇文章:</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool">Flex 布局教程：语法篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a></li>
</ul>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先明确一点是， <code>flex</code> 是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的缩写。故其取值可以考虑以下情况：</p>
<p><code>flex</code> 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 <code>flex</code> 的默认值是 <code>0 1 auto</code>。同理，如下是等同的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2333</span> <span class="number">3222</span> <span class="number">234px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2333</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">3222</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">234px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为 <code>none</code>，则计算值为 <code>0 0 auto</code>，如下是等同的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为 <code>auto</code>，则计算值为 <code>1 1 auto</code>，如下是等同的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: auto;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为一个非负数字，则该数字为 <code>flex-grow</code> 值，<code>flex-shrink</code> 取 1，<code>flex-basis</code> 取 0%，如下是等同的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为一个长度或百分比，则视为 <code>flex-basis</code> 值，<code>flex-grow</code> 取 1，<code>flex-shrink</code> 取 1，有如下等同情况（注意 <code>0%</code> 是一个百分比而不是一个非负数字）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;<span class="attribute">flex</span>: <span class="number">0%</span>;&#125;</span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;<span class="attribute">flex</span>: <span class="number">24px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为两个非负数字，则分别视为 <code>flex-grow</code> 和 <code>flex-shrink</code> 的值，<code>flex-basis</code> 取 0%，如下是等同的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2</span> <span class="number">3</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>flex</code> 取值为一个非负数字和一个长度或百分比，则分别视为 <code>flex-grow</code> 和 <code>flex-basis</code> 的值，<code>flex-shrink</code> 取 1，如下是等同的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2333</span> <span class="number">3222px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2333</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">3222px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>flex-basis</code> 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。<code>flex-basis</code> 规定的范围取决于 <code>box-sizing</code>。这里主要讨论以下 <code>flex-basis</code> 的取值情况：</p>
<ul>
<li><strong>auto</strong>：首先检索该子元素的主尺寸，如果主尺寸不为 <code>auto</code>，则使用值采取主尺寸之值；如果也是 <code>auto</code>，则使用值为 <code>content</code>。</li>
<li><strong>content</strong>：指根据该子元素的内容自动布局。有的用户代理没有实现取 <code>content</code> 值，等效的替代方案是 <code>flex-basis</code> 和主尺寸都取 <code>auto</code>。</li>
<li><strong>百分比</strong>：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 <code>auto</code> 一样。</li>
</ul>
<p>举一个不同的值之间的区别：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: darkblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height='265' scrolling='no' title='flex 不同的值' src='//codepen.io/JakeLaoyu/embed/OrLrZP/?height=265&theme-id=light&default-tab=css,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/JakeLaoyu/pen/OrLrZP/'>flex 不同的值</a> by Jake (<a href='https://codepen.io/JakeLaoyu'>@JakeLaoyu</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<ul>
<li>主轴上父容器总尺寸为 600px</li>
<li>子元素的总基准值是：0% + auto + 200px &#x3D; 300px，其中<ul>
<li>0% 即 0 宽度</li>
<li>auto 对应取主尺寸即 100px</li>
</ul>
</li>
<li>故剩余空间为 600px - 300px &#x3D; 300px</li>
<li>伸缩放大系数之和为： 2 + 2 + 1 &#x3D; 5</li>
<li>剩余空间分配如下：<ul>
<li>item-1 和 item-2 各分配 2&#x2F;5，各得 120px</li>
<li>item-3 分配 1&#x2F;5，得 60px</li>
</ul>
</li>
<li>各项目最终宽度为：<ul>
<li>item-1 &#x3D; 0% + 120px &#x3D; 120px</li>
<li>item-2 &#x3D; auto + 120px &#x3D; 220px</li>
<li>item-3 &#x3D; 200px + 60px &#x3D; 260px</li>
</ul>
</li>
<li>当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设</li>
<li>而 item-2 基准值取 <code>auto</code> 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://segmentfault.com/q/1010000004080910/a-1020000004121373">https://segmentfault.com/q/1010000004080910/a-1020000004121373</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>获取元素样式</title>
    <url>/2018/11/29/getComputedStyle/</url>
    <content><![CDATA[<p>引用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle">MND</a>的说明：</p>
<blockquote>
<p>Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。</p>
</blockquote>
<span id="more"></span>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(element, [pseudoElt]);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>element</strong>: 用语获取计算样式的Element</li>
<li><strong>pseudoElt</strong>: 指定一个要匹配的伪元素的字符串。必须对普通元素省略（或null）。</li>
</ul>
<p>例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(dom , <span class="string">&quot;:after&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(dom , <span class="string">&quot;:after&quot;</span>).<span class="property">content</span></span><br></pre></td></tr></table></figure>

<h1 id="getComputedStyle与style的区别"><a href="#getComputedStyle与style的区别" class="headerlink" title="getComputedStyle与style的区别"></a>getComputedStyle与style的区别</h1><p>我们使用<code>element.style</code>也可以获取元素的CSS样式声明对象，但是其与<code>getComputedStyle</code>方法还有有一些差异的。</p>
<ol>
<li>只读与可写</li>
</ol>
<ul>
<li>正如上面提到的<code>getComputedStyle</code>方法是只读的，只能获取样式，不能设置；而<code>element.style</code>能读能写，能屈能伸。</li>
</ul>
<ol start="2">
<li>获取的对象范围</li>
</ol>
<ul>
<li><code>getComputedStyle</code>方法获取的是最终应用在元素上的所有CSS属性对象（即使没有CSS代码，也会把默认的祖宗八代都显示出来）；而<code>element.style</code>只能获取元素<code>style</code>属性中的CSS样式。因此对于一个光秃秃的元素<code>&lt;p&gt;</code>，<code>getComputedStyle</code>方法返回对象中<code>length</code>属性值（如果有）就是190+(据我测试FF:192, IE9:195, Chrome:253, 不同环境结果可能有差异), 而<code>element.style</code>就是<code>0</code>。</li>
</ul>
<h1 id="getComputedStyle与defaultView"><a href="#getComputedStyle与defaultView" class="headerlink" title="getComputedStyle与defaultView"></a>getComputedStyle与defaultView</h1><p>许多在线的演示代码中，<code>getComputedStyle</code>是通过 <code>document.defaultView</code> 对象来调用的。大部分情况下，这是不需要的，因为可以直接通过<code>window</code>对象调用。但有一种情况，你必需要使用 <code>defaultView</code>,  那是在firefox3.6上访问子框架内的样式 。</p>
<h1 id="getPropertyValue"><a href="#getPropertyValue" class="headerlink" title="getPropertyValue"></a>getPropertyValue</h1><p><code>getPropertyValue</code>方法可以获取CSS样式申明对象上的属性值（直接属性名称），例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(element, <span class="literal">null</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&quot;float&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果我们不使用<code>getPropertyValue</code>方法，直接使用键值访问，其实也是可以的。但是，比如这里的的<code>float</code>，如果使用键值访问，则不能直接使用<code>getComputedStyle(element, null).float</code>，而应该是<code>cssFloat</code>与<code>styleFloat</code>，自然需要浏览器判断了，比较折腾！</p>
<p>使用<code>getPropertyValue</code>方法不必可以驼峰书写形式（不支持驼峰写法），例如：<code>style.getPropertyValue(&quot;border-top-left-radius&quot;)</code></p>
<h1 id="获取变量"><a href="#获取变量" class="headerlink" title="获取变量"></a>获取变量</h1><p>例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attr">--testMargin</span>:<span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  读取</span></span><br><span class="line"><span class="keyword">var</span> root = <span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>);</span><br><span class="line"><span class="keyword">var</span> cssVariable = root.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;--testMargin&#x27;</span>).<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cssVariable); <span class="comment">// &#x27;75px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--testMargin&#x27;</span>, <span class="string">&#x27;100px&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="CSSStyleDeclaration"><a href="#CSSStyleDeclaration" class="headerlink" title="CSSStyleDeclaration"></a>CSSStyleDeclaration</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><code>CSSStyleDeclaration</code> 表示一个CSS属性键值对的集合。它被用于一些API中：</p>
<ul>
<li><code>HTMLElement.style</code> - 用于操作单个元素的样式(<elem style="...">)；</li>
<li>(TODO: reword) 作为 <a href="https://www.w3.org/TR/1998/REC-CSS2-19980512/syndata.html#block">declaration block</a> 的接口，当规则为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSRule">CSSStyleRule</a> 时，由stylesheet中的 style  属性返回 。</li>
<li><code>CSSStyleDeclaration</code>也是由<code>window.getComputedStyle()</code>返回的只读接口.</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><code>CSSStyleDeclaration.getPropertyPriority()</code>: 返回可选的优先级，”Important”, 例如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">priString= styleObj.<span class="title function_">getPropertyPriority</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><code>CSSStyleDeclaration.getPropertyValue()</code>: 返回属性值。例如:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">valString= styleObj.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><code>CSSStyleDeclaration.item()</code>: 返回属性名。 例如:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nameString= styleObj.<span class="title function_">item</span>(<span class="number">0</span>) <span class="title class_">Alternative</span>: nameString= styleObj[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li>
<li><code>CSSStyleDeclaration.removeProperty()</code>: 返回被删除的属性。例如:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">valString= styleObj.<span class="title function_">removeProperty</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><code>CSSStyleDeclaration.setProperty()</code>: 没有返回值。例如:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">styleObj.<span class="title function_">setProperty</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;important&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><code>CSSStyleDeclaration.getPropertyCSSValue()</code>: 仅支持通过getComputedStyle的方式。 在Firefox (CSSPrimitiveValue中返回  ROCSSPrimitiveValue, 在其他实现 CSSValue，或为null 速记属性。</li>
</ul>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><iframe data-feature="getcomputedstyle" src="https://caniuse.bitsofco.de/embed/index.html?feat=getcomputedstyle&periods=current&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle">MDN</a></li>
<li><a href="https://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/">获取元素CSS值之getComputedStyle方法熟悉–张鑫旭</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration">CSSStyleDeclaration–MDN</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>git commit规范 和 Change log</title>
    <url>/2018/05/10/git-commit%E8%A7%84%E8%8C%83-%E5%92%8C-Change-log/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/git/ITH_Managing-Code-in-GIT.jpg"></p>
<span id="more"></span>

<p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码的<code>-m</code>参数，就是用来指定 commit mesage 的。</p>
<p>如果一行不够，可以只执行<code>git commit</code>，就会跳出文本编辑器，让你写多行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p>基本上，你写什么都行（<a href="http://www.commitlogsfromlastnight.com/">这里</a>，<a href="http://blog.no-panic.at/2014/10/20/funny-initial-git-commit-messages/">这里</a>和<a href="http://whatthecommit.com/">这里</a>）。</p>
<p><img data-src="//blogimg.jakeyu.top/git/bg2016010601.png"></p>
<p>但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。</p>
<p><img data-src="//blogimg.jakeyu.top/git/bg2016010602.png"></p>
<p>目前，社区有多种 Commit message 的写法规范。本文介绍<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0">Angular 规范</a>（见上图），这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。</p>
<h1 id="Commit-message-的作用"><a href="#Commit-message-的作用" class="headerlink" title="Commit message 的作用"></a>Commit message 的作用</h1><p>格式化的Commit message，有几个好处。</p>
<ol>
<li>提供更多的历史信息，方便快速浏览。</li>
</ol>
<p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top/git/bg2016010604.png"></p>
<ol start="2">
<li>可以过滤某些commit（比如文档改动），便于快速查找信息。</li>
</ol>
<p>比如，下面的命令仅仅显示本次发布新增加的功能。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以直接从commit生成Change log。</li>
</ol>
<p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。</p>
<p><img data-src="//blogimg.jakeyu.top/git/bg2016010603.png"></p>
<h1 id="Commit-message-的格式"><a href="#Commit-message-的格式" class="headerlink" title="Commit message 的格式"></a>Commit message 的格式</h1><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<p>其中，Header 是必需的，Body 和 Footer 可以省略。</p>
<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header部分只有一行，包括三个字段：<code>type </code>（必需）、<code>scope </code>（可选）和<code>subject </code>（必需）。</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p><code>type</code>用于说明 commit 的类别，只允许使用下面7个标识。</p>
<ul>
<li>build：影响构建系统或外部依赖项的更改（示例范围：gulp，broccoli，npm）。如果添加某个依赖 A，那可能是<code>build(npm): add dependenceA</code></li>
<li>ci：我们的CI配置文件和脚本的更改（示例范围：Travis，Circle，BrowserStack，SauceLabs）</li>
<li>feat：新功能（feature）</li>
<li>fix：修补bug</li>
<li>docs：文档（documentation）</li>
<li>style： 不影响代码含义的更改（空格，格式，缺少分号等）</li>
<li>perf: 代码更改可提高性能</li>
<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>
<li>test：增加测试</li>
<li>chore：构建过程或辅助工具的变动</li>
</ul>
<p>如果<code>type</code>为<code>feat</code>和<code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（<code>docs</code>、<code>chore</code>、<code>style</code>、<code>refactor</code>、<code>test</code>）由你决定，要不要放入 Change log，建议是不要。</p>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p>
<ul>
<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>
<li>第一个字母小写</li>
<li>结尾不加句号（.）</li>
</ul>
<h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">More detailed explanatory text, if necessary.  Wrap it to</span><br><span class="line">about 72 characters or so.</span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">- Bullet points are okay, too</span><br><span class="line">- Use a hanging indent</span><br></pre></td></tr></table></figure>

<p>有两个注意点。</p>
<blockquote>
<ol>
<li>使用第一人称现在时，比如使用change而不是changed或changes。</li>
<li>应该说明代码变动的动机，以及与以前行为的对比。</li>
</ol>
</blockquote>
<h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>Footer 部分只用于两种情况。</p>
<h3 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;attribute&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;@&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>

<h3 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h3><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Closes #234</span><br></pre></td></tr></table></figure>

<p>也可以一次关闭多个 issue 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>

<h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revert: feat(pencil): add &#x27;graphiteWidth&#x27; option</span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>

<p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。</p>
<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p>
<h1 id="commit验证"><a href="#commit验证" class="headerlink" title="commit验证"></a>commit验证</h1><h2 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h2><p><a href="https://github.com/marionebl/commitlint">commitlint</a> 提供了检测 commit 的功能和一些最基础的规则。使用者需要根据这些规则配置出自己的规范。</p>
<p>首先在项目中安装依赖</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add @commitlint/cli @commitlint/config-conventional --dev</span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>中添加： </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;commitlint&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;@commitlint/config-conventional&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;subject-case&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>检查<code>commit</code>当然是要在每次执行<code>git commit</code>的时候，所以我们使用<a href="https://github.com/typicode/husky">husky</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add husky --dev</span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>中添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commitlint -e $GIT_PARAMS&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a>validate-commit-msg</h2><p><a href="https://github.com/kentcdodds/validate-commit-msg">validate-commit-msg</a> 用于检查 Node 项目的 Commit message 是否符合格式。</p>
<p>它的安装是手动的。首先，拷贝下面这个<a href="https://github.com/kentcdodds/validate-commit-msg/blob/master/index.js">JS文件</a>，放入你的代码库。文件名可以取为<code>validate-commit-msg.js</code>。</p>
<p>接着，把这个脚本加入 Git 的 hook。下面是在<code>package.json</code>里面使用 <a href="http://npm.im/ghooks">ghooks</a>，把这个脚本加为<code>commit-msg</code>时运行。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ghooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./validate-commit-msg.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后，每次<code>git commit</code>的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br><span class="line">$ git commit -m <span class="string">&quot;edit markdown&quot;</span></span><br><span class="line">INVALID COMMIT MSG: does not match <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot;</span> ! was: edit markdown</span><br></pre></td></tr></table></figure>

<h1 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h1><p><a href="https://github.com/commitizen/cz-cli">Commitizen</a>是一个撰写合格 Commit message 的工具。</p>
<p>安装命令如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen</span><br></pre></td></tr></table></figure>

<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>

<p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。这时，就会出现选项，用来生成符合格式的 Commit message。</p>
<p><img data-src="//blogimg.jakeyu.top/git/bg2016010605.png"></p>
<h1 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h1><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（<a href="https://github.com/ajoslin/conventional-changelog/blob/master/CHANGELOG.md">例1</a>，<a href="https://github.com/karma-runner/karma/blob/master/CHANGELOG.md">例2</a>，<a href="https://github.com/btford/grunt-conventional-changelog/blob/master/CHANGELOG.md">例3</a>）。</p>
<p>生成的文档包括以下三个部分。</p>
<ul>
<li>New features</li>
<li>Bug fixes</li>
<li>Breaking changes.</li>
</ul>
<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>
<p><a href="https://github.com/conventional-changelog/conventional-changelog">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g conventional-changelog</span><br><span class="line">$ cd my-project</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>

<p>上面命令不会覆盖以前的 Change log，只会在<code>CHANGELOG.md</code>的头部加上自从上次发布以来的变动。</p>
<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>

<p>为了方便使用，可以将其写入<code>package.json</code>的<code>scripts</code>字段。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>以后，直接运行下面的命令即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm run changelog</span><br></pre></td></tr></table></figure>

<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><blockquote>
<p>作者： 阮一峰<br>转载自： <a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>img加载图片失败时，使用默认图片</title>
    <url>/2016/11/26/img%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E6%97%B6%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="onError属性"><a href="#onError属性" class="headerlink" title="onError属性"></a>onError属性</h3><p><code>img</code>标签自带<code>onError</code>属性，当图片加载失败时，触发<code>error</code>事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.png&quot;</span> <span class="attr">onError</span>=<span class="string">&#x27;this.src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="jQuery的error事件"><a href="#jQuery的error事件" class="headerlink" title="jQuery的error事件"></a>jQuery的error事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">error</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>,<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="jQuery的one绑定"><a href="#jQuery的one绑定" class="headerlink" title="jQuery的one绑定"></a>jQuery的one绑定</h3><p>使用onerror或者jQuery的error事件时，如果默认图片也发生加载失败，则会形成死循环，最好的办法是使用one绑定事件，只执行一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">one</span>(<span class="string">&quot;error&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">     $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ul>
<li>另外error事件，不支持冒泡，jquery.delegate函数捕捉不到error事件。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>方案</tag>
      </tags>
  </entry>
  <entry>
    <title>ios微信background-attachment失效解决</title>
    <url>/2018/03/08/ios%E5%BE%AE%E4%BF%A1background-attachment%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/bg.png?ewrfg&quot;</span>) center no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery中animate动画效果</title>
    <url>/2016/05/06/jQuery%E4%B8%ADanimate%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>参考:<a href="http://www.w3school.com.cn/jquery/effect_animate.asp">http://www.w3school.com.cn/jquery/effect_animate.asp</a></p>
<span id="more"></span>

<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>animate() 方法执行 CSS 属性集的自定义动画。</p>
<p>该方法通过CSS样式将元素从一个状态改变为另一个状态。CSS属性值是逐渐改变的，这样就可以创建动画效果。</p>
<p>只有数字值可创建动画（比如 “margin:30px”）。字符串值无法创建动画（比如 “background-color:red”）。</p>
<p>注释：使用 “+&#x3D;” 或 “-&#x3D;” 来创建相对动画（relative animations）。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法 1"></a>语法 1</h3><blockquote>
<p>$(selector).animate(styles,speed,easing,callback)</p>
</blockquote>
<h3 id="参数描述"><a href="#参数描述" class="headerlink" title="参数	描述"></a>参数	描述</h3><h4 id="styles"><a href="#styles" class="headerlink" title="styles"></a>styles</h4><p>必需。规定产生动画效果的 CSS 样式和值。</p>
<h4 id="可能的-CSS-样式值（提供实例）："><a href="#可能的-CSS-样式值（提供实例）：" class="headerlink" title="可能的 CSS 样式值（提供实例）："></a>可能的 CSS 样式值（提供实例）：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">backgroundPosition</span><br><span class="line">borderWidth</span><br><span class="line">borderBottomWidth</span><br><span class="line">borderLeftWidth</span><br><span class="line">borderRightWidth</span><br><span class="line">borderTopWidth</span><br><span class="line">borderSpacing</span><br><span class="line">margin</span><br><span class="line">marginBottom</span><br><span class="line">marginLeft</span><br><span class="line">marginRight</span><br><span class="line">marginTop</span><br><span class="line">outlineWidth</span><br><span class="line">padding</span><br><span class="line">paddingBottom</span><br><span class="line">paddingLeft</span><br><span class="line">paddingRight</span><br><span class="line">paddingTop</span><br><span class="line">height</span><br><span class="line">width</span><br><span class="line">maxHeight</span><br><span class="line">maxWidth</span><br><span class="line">minHeight</span><br><span class="line">minWidth</span><br><span class="line">font</span><br><span class="line">fontSize</span><br><span class="line">bottom</span><br><span class="line">left</span><br><span class="line">right</span><br><span class="line">top</span><br><span class="line">letterSpacing</span><br><span class="line">wordSpacing</span><br><span class="line">lineHeight</span><br><span class="line">textIndent</span><br><span class="line">注释：CSS 样式使用 DOM 名称（比如 &quot;fontSize&quot;）来设置，而非 CSS 名称（比如 &quot;font-size&quot;）。</span><br></pre></td></tr></table></figure>

<h4 id="speed"><a href="#speed" class="headerlink" title="speed"></a>speed</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">可选。规定动画的速度。默认是 &quot;normal&quot;。</span><br><span class="line">可能的值：</span><br><span class="line">毫秒 （比如 1500）</span><br><span class="line">&quot;slow&quot;</span><br><span class="line">&quot;normal&quot;</span><br><span class="line">&quot;fast&quot;</span><br></pre></td></tr></table></figure>

<h4 id="easing"><a href="#easing" class="headerlink" title="easing"></a>easing</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">可选。规定在不同的动画点中设置动画速度的 easing 函数。</span><br><span class="line">内置的 easing 函数：</span><br><span class="line">swing</span><br><span class="line">linear</span><br><span class="line">扩展插件中提供更多 easing 函数。</span><br></pre></td></tr></table></figure>

<h4 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">可选。animate 函数执行完之后，要执行的函数。</span><br><span class="line">如需学习更多有关 callback 的内容，请访问我们的 jQuery Callback 这一章。</span><br></pre></td></tr></table></figure>

<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法 2"></a>语法 2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">animate</span>(styles,options)</span><br></pre></td></tr></table></figure>

<h3 id="参数描述-1"><a href="#参数描述-1" class="headerlink" title="参数	描述"></a>参数	描述</h3><h4 id="styles必需。规定产生动画效果的-CSS-样式和值（同上）。"><a href="#styles必需。规定产生动画效果的-CSS-样式和值（同上）。" class="headerlink" title="styles	必需。规定产生动画效果的 CSS 样式和值（同上）。"></a>styles	必需。规定产生动画效果的 CSS 样式和值（同上）。</h4><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>可选。规定动画的额外选项。<br>可能的值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">speed - 设置动画的速度</span><br><span class="line">easing - 规定要使用的 easing 函数</span><br><span class="line">callback - 规定动画完成之后要执行的函数</span><br><span class="line">step - 规定动画的每一步完成之后要执行的函数</span><br><span class="line">queue - 布尔值。指示是否在效果队列中放置动画。如果为 false，则动画将立即开始</span><br><span class="line">specialEasing - 来自 styles 参数的一个或多个 CSS 属性的映射，以及它们的对应 easing 函数</span><br></pre></td></tr></table></figure>

<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;.btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;p&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">top</span>:<span class="string">&quot;100px&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;.btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;p&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">top</span>:<span class="string">&quot;0px&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>Animate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow;width:100px;position:absolute&quot;</span>&gt;</span>This is a  paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器创建swap[译]</title>
    <url>/2017/04/04/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BAswap/</url>
    <content><![CDATA[<blockquote>
<p>原文：<a href="https://sg.godaddy.com/zh/help/add-memory-swap-ubuntu-or-debian-7-17326">Add Memory Swap - Ubuntu or Debian 7</a><br>翻译：Jake</p>
</blockquote>
<p>如果你想提高你的服务器的性能,增加交换空间(内存交换)是一个强大的和相对简单的开始。</p>
<p><img data-src="//blogimg.jakeyu.top/20170405149132163776809.gif"></p>
<span id="more"></span>


<h1 id="swap介绍"><a href="#swap介绍" class="headerlink" title="swap介绍"></a>swap介绍</h1><p>一旦内存快满的时候,交换空间是一个专用的服务器可以在其内存转储的内容的硬盘。要理解的真正好处,您需要熟悉处理器架构,但这里有一个简要的说明:</p>
<ul>
<li>RAM处理器快速提供数据,这使得它非常有价值。</li>
<li>一旦你的内存满是它需要删除或移动数据。</li>
<li>删除内存的数据意味着它必须找到和检索的硬盘(缓慢)下次请求的数据。</li>
<li>通过将数据从内存和交换空间,而不是简单地删除它从RAM,更快找到下一次的数据请求。</li>
<li>从内存到交换空间移动数据消耗处理器资源,这样做实际上不断会降低应用程序的性能(这就是所谓的交换)。为了找到最优交换率,它需要调优。</li>
</ul>
<p>最后———虽然差异是分钟,为了清楚起见,本文将指导您通过创建一个交换文件——不是一个交换分区。如果你不知道这意味着什么,别担心。</p>
<h1 id="检查当前使用交换空间"><a href="#检查当前使用交换空间" class="headerlink" title="检查当前使用交换空间"></a>检查当前使用交换空间</h1><p>防止添加交换时有任何问题,首先检查你的系统没有启用已经交换空间。</p>
<p>找到任何交换空间驱动:</p>
<pre><code>sudo swapon -s
</code></pre>
<p>如果结果是空的,输出类似于下面的例子,你目前没有交换空间启用:</p>
<pre><code>Filename                Type        Size    Used    Priority
</code></pre>
<p>如果您的系统是否已经配置了交换,结果看起来像这个例子:</p>
<pre><code>Filename           Type         Size      Used  Priority
/dev/sda7          partition    123450    100   -1
</code></pre>
<h1 id="检查你的可用空间"><a href="#检查你的可用空间" class="headerlink" title="检查你的可用空间"></a>检查你的可用空间</h1><p>现在,您已经准备好创建一个交换文件,你需要找到你的服务器的硬盘空间。</p>
<p>检查服务器上的可用空间量:</p>
<pre><code>df -h
</code></pre>
<p>这个命令显示了硬盘上的自由空间。在接下来的例子中,你有40 GB可用。确保有足够的自由空间交换文件。取决于你的需求所需要的空间,但一般来说,相当于系统RAM的二倍。</p>
<pre><code>Filesystem      Size  Used Avail Use% Mounted on    
/dev/vda         50G  10G   40G   20% /             
none            4.0K     0  4.0K   0% /sys/fs/cgroup  
udev            2.0G   12K  2.0G   1% /dev           
tmpfs           396M  312K  396M   1% /run    
none            5.0M     0  5.0M   0% /run/lock  
none            2.0G     0  2.0G   0% /run/shm  
none            100M     0  100M   0% /run/user      
</code></pre>
<h1 id="创建一个交换文件"><a href="#创建一个交换文件" class="headerlink" title="创建一个交换文件"></a>创建一个交换文件</h1><p>将交换空间添加到系统通过创建一个名为swapfile的文件在你的根目录(&#x2F;)和分配它作为交换。有两个命令,您可以使用它来创建交换文件:</p>
<ul>
<li>fallocate</li>
<li>dd</li>
</ul>
<p>你只需要使用其中的一个。我们建议使用fallocate,但如果它不支持的文件系统上,您可以使用dd。</p>
<p>你可以获得更多的文件空间使用<code>fallocate</code>,<code>fallocate </code>是一个用于操作文件空间的命令。<code>fallocate</code>命令创建了一个预先分配大小并且没有初始化的文件,与<code>dd</code>命令相比,它需要更长的时间,因为它必须写入0作为虚拟内容。</p>
<h2 id="使用fallocate创建一个交换文件"><a href="#使用fallocate创建一个交换文件" class="headerlink" title="使用fallocate创建一个交换文件"></a>使用fallocate创建一个交换文件</h2><p>创建用于交换的文件。对于这个示例,我们添加一个4 GB的文件:</p>
<pre><code>sudo fallocate -l 4G /swapfile
</code></pre>
<p>确认正确的数量的空间被保留:</p>
<pre><code>ls -lh /swapfile
</code></pre>
<p>这个结果表明,添加文件是使用正确的留出的空间量:</p>
<pre><code>-rw------- 1 root root 4.0G Jul 08 10:52 /swapfile
</code></pre>
<p>如果你得到一个失败消息说fallocate失败:操作不支持,您的文件系统目前不支持fallocate(例如,ext3)。使用更传统的方式使用dd命令。(这种情况应该很少)。</p>
<h2 id="使用dd创建一个交换文件"><a href="#使用dd创建一个交换文件" class="headerlink" title="使用dd创建一个交换文件"></a>使用dd创建一个交换文件</h2><p>在这个例子中,我们将添加一个不同大小的交换文件,1 GB,为了适应小型服务器。</p>
<p>添加1 GB交换文件,通过指定一个块大小250MB并且数量为4。</p>
<blockquote>
<p>记得要仔细检查你的指令!这个命令有可能破坏数据如果(输出文件)指出错误的位置。</p>
</blockquote>
<pre><code>sudo dd if=/dev/zero of=/swapfile bs=250M count=4
</code></pre>
<p>几秒钟后,生成的输出是这样的:</p>
<pre><code>4+0 records in
4+0 records out
1048576000 bytes (1.0 GB) copied, 1.47414 s, 711 MB/s
</code></pre>
<p>验证文件在服务器上创建:</p>
<pre><code>ls -lh /swapfile
</code></pre>
<p>如果文件被创建,命令返回类似于:</p>
<pre><code>-rw-r--r-- 1 root root 1.0G Jul 08 10:30 swapfile
</code></pre>
<h1 id="使交换文件"><a href="#使交换文件" class="headerlink" title="使交换文件"></a>使交换文件</h1><p>现在创建的文件,格式互换,然后启用它。</p>
<p>锁定交换文件的权限,因此只有<code>root</code>用户可以访问它:</p>
<pre><code>sudo chmod 600 /swapfile
</code></pre>
<p>当第一次创建时,交换文件是可读的,所以锁权限可以防止用户阅读潜在的敏感信息。</p>
<p>确认文件正确的权限:</p>
<pre><code>ls -lh /swapfile
</code></pre>
<p>这个命令返回类似于:</p>
<pre><code>-rw------- 1 root root 4.0G Jul 08 10:40 /swapfile
</code></pre>
<p>这证实了,只有<code>root</code>用户启用了读写权限。</p>
<p>格式文件创建一个交换空间:</p>
<pre><code>sudo mkswap /swapfile
</code></pre>
<p>如果成功,该命令会返回类似这样:</p>
<pre><code>Setting up swapspace version 1, size = 4194300 KiB
no label, UUID=e2f1e9cf-c0a9-4ed4-b8ab-714b8a7d6944
</code></pre>
<p>挂载&#x2F;启用系统中的交换空间:</p>
<pre><code>sudo swapon /swapfile
</code></pre>
<p>验证交换空间是通过检查系统报告:</p>
<pre><code>sudo swapon -s
</code></pre>
<p>这个命令返回类似于:</p>
<pre><code>Filename Type Size Used Priority
swapfile file 4194300 0 -1
</code></pre>
<h1 id="使交换文件永久生效"><a href="#使交换文件永久生效" class="headerlink" title="使交换文件永久生效"></a>使交换文件永久生效</h1><p>最后一步是将交换文件集成到您的系统的存储分区,通过<code>fstab </code>。</p>
<p>打开<code>fstab </code></p>
<pre><code>sudo vim /etc/fstab
</code></pre>
<p>在fstab文件最后,添加这一行告诉系统自动使用新创建的交换空间:</p>
<pre><code>/swapfile none swap sw 0 0
</code></pre>
<p>保存并关闭该文件:</p>
<pre><code>:wq!
</code></pre>
<p>在下次重新启动后,自动交换使用</p>
<h1 id="调整交换文件"><a href="#调整交换文件" class="headerlink" title="调整交换文件"></a>调整交换文件</h1><p>现在您已经创建了交换文件,你应该进行调优,以确保它给你最佳性能。这不是你可以轻松地一口气就完成的工作，而是你会定期的作为管理员工作。</p>
<p>优化你的交换文件意味着修补的设置,使其执行交换(也就是说,将内容从RAM交换):</p>
<ul>
<li>虚拟运存控制</li>
<li>缓存压力<br>调优是很重要的,因为一个配置不佳的交换文件会损害应用程序的性能。系统的RAM和交换空间之间的相互作用是时间密集的（在计算规模上），并且尝试交换频率太高（即交换冲突）可能需要更多的时间，而不仅仅是从硬盘中恢复数据。</li>
</ul>
<h2 id="虚拟运存控制"><a href="#虚拟运存控制" class="headerlink" title="虚拟运存控制"></a>虚拟运存控制</h2><p>Swappiness只是设置控制频率使用交换文件。</p>
<p>一个0到100之间的比例,swappiness值:</p>
<ul>
<li>0意味着避免交换过程的物理内存,直到绝对必要的(内存耗尽)</li>
<li>100意味着积极(立刻)移动交换过程的物理内存和交换缓存</li>
</ul>
<p>你可以改变你的服务器的<code>swapiness</code>在<code>sysctl.conf</code>文件中。</p>
<p>打开<code>/etc/sysctl.conf</code>:</p>
<pre><code>sudo vim /etc/sysctl.conf
</code></pre>
<p>在文件的最后一行添加:</p>
<pre><code>vm.swappiness=10
</code></pre>
<p>保存并且退出:</p>
<pre><code>:wq!
</code></pre>
<p>来优化您的应用程序中,您可以测试更改swappiness值(0到100之间)和运行性能测试。</p>
<h2 id="缓存压力"><a href="#缓存压力" class="headerlink" title="缓存压力"></a>缓存压力</h2><p>另一个设置是<code>vfs_cache_pressure</code>。 当VFS（虚拟文件系统）缓存对象（称为dentry和inode_cache对象）占用更大量的内存而不是其他数据（如页面缓存和交换）时，更改此设置可能会有所帮助。 因为VFS缓存访问有关文件系统的数据，所以经常被请求并且非常耗资源。 因此，它是您的系统缓存的主要设置。</p>
<p><code>vfs_cache_pressure</code>的值越高，您的服务器越有可能使用其交换。</p>
<p>你可以改变你的服务器的缓存压力在<code>sysctl.conf</code>。</p>
<p>打开<code>/etc/sysctl.conf</code>:</p>
<pre><code>sudo vim /etc/sysctl.conf
</code></pre>
<p>在文件最后一行添加:</p>
<pre><code>vm.vfs_cache_pressure = 50
</code></pre>
<p>保存并关闭文件:</p>
<pre><code>:wq!
</code></pre>
<p>像<code>swappiness</code>,你可以提高性能通过测试不同的值。</p>
<h1 id="启用交换空间"><a href="#启用交换空间" class="headerlink" title="启用交换空间"></a>启用交换空间</h1><p>使用以下三个命令检查您的工作：</p>
<h2 id="swapon-s命令："><a href="#swapon-s命令：" class="headerlink" title="swapon -s命令："></a>swapon -s命令：</h2><pre><code>sudo swapon -s
</code></pre>
<p>输出可能如下所示：</p>
<pre><code>Filename                Type        Size    Used    Priority
/swapfile               file        4194300 0       -1
</code></pre>
<p>您会看到添加了4 G的交换文件。</p>
<h2 id="有关更详细的报告："><a href="#有关更详细的报告：" class="headerlink" title="有关更详细的报告："></a>有关更详细的报告：</h2><pre><code>free -m
</code></pre>
<h2 id="关于交换详细信息的报告："><a href="#关于交换详细信息的报告：" class="headerlink" title="关于交换详细信息的报告："></a>关于交换详细信息的报告：</h2><pre><code>cat /proc/meminfo | grep -i swap
</code></pre>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>交换可以有利于允许您的系统利用比原来可用的更多的内存。 在优化应用程序配置，添加更多RAM或升级服务器之前，这是一个可行的选择。</p>
<p>但是，请务必记住定期调整交换文件，以确保您最充分地使用它。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>mac好用的软件整理</title>
    <url>/2018/06/03/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/bijibendiannaotupian5.jpeg"></p>
<span id="more"></span>

<p>先粗略写一下，后面详细说明</p>
<div class="note danger"><p>如果点击app store地址打开错误，请关闭电脑代理再打开 </p>
</div>

<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="iHosts"><a href="#iHosts" class="headerlink" title="iHosts"></a>iHosts</h2><p><a href="https://itunes.apple.com/cn/app/ihosts-%E7%BC%96%E8%BE%91%E7%A5%9E%E5%99%A8/id1102004240?mt=12">app store 地址</a></p>
<p>host管理工具，随时快捷键呼出，呼出位置是鼠标所在位置。切换配置过得代理</p>
<p><video src="//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180604-131614-HD.mp4" controls="controls">Your browser does not support the video tag.</video></p>
<h2 id="iTerm2-Oh-My-ZSH"><a href="#iTerm2-Oh-My-ZSH" class="headerlink" title="iTerm2 + Oh My ZSH"></a>iTerm2 + Oh My ZSH</h2><p><a href="https://www.iterm2.com/">https://www.iterm2.com/</a><br><a href="http://ohmyz.sh/">http://ohmyz.sh/</a></p>
<p>终端神器</p>
<h2 id="go2Shell"><a href="#go2Shell" class="headerlink" title="go2Shell"></a>go2Shell</h2><p><a href="http://zipzapmac.com/go2shell">http://zipzapmac.com/go2shell</a></p>
<p>在当前文件夹打开终端</p>
<video src="//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180604-131015.mp4" controls="controls">
Your browser does not support the video tag.
</video>

<h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><p><a href="https://www.getpostman.com/">https://www.getpostman.com/</a></p>
<p>功能强大的网页调试与发送网页HTTP请求的工具。</p>
<h2 id="sourcetree"><a href="#sourcetree" class="headerlink" title="sourcetree"></a>sourcetree</h2><p><a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></p>
<p>git图形管理</p>
<h2 id="gitter"><a href="#gitter" class="headerlink" title="gitter"></a>gitter</h2><p><a href="https://gitter.im/vuejs/vue">https://gitter.im/vuejs/vue</a></p>
<p>Gitter是GitHub存储库的开发人员和用户的即时通讯聊天室系统。</p>
<h2 id="Medis"><a href="#Medis" class="headerlink" title="Medis"></a>Medis</h2><p><a href="https://github.com/luin/medis">https://github.com/luin/medis</a></p>
<p>redis 数据库客户端</p>
<h2 id="Studio-3T"><a href="#Studio-3T" class="headerlink" title="Studio 3T"></a>Studio 3T</h2><p><a href="https://studio3t.com/">https://studio3t.com/</a></p>
<p>mongodb 数据库客户端，个人用户免费</p>
<h2 id="Cyberduck"><a href="#Cyberduck" class="headerlink" title="Cyberduck"></a>Cyberduck</h2><p><a href="https://cyberduck.io/">https://cyberduck.io/</a></p>
<p>Cyberduck is a libre server and cloud storage browser for Mac and Windows with support for FTP, SFTP, WebDAV, Amazon S3, OpenStack Swift, Backblaze B2, Microsoft Azure &amp; OneDrive, Google Drive and Dropbox.</p>
<h2 id="ForkLift"><a href="#ForkLift" class="headerlink" title="ForkLift"></a>ForkLift</h2><p><a href="https://itunes.apple.com/cn/app/forklift-file-manager-and-ftp-sftp-webdav-amazon-s3-client/id412448059?mt=12">app store</a></p>
<p> FTP + SFTP + WebDAV + Amazon s3 客户端</p>
<h2 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h2><p><a href="https://www.charlesproxy.com/">https://www.charlesproxy.com/</a></p>
<p>mac http 代理、抓包等工具</p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="Bear"><a href="#Bear" class="headerlink" title="Bear"></a>Bear</h2><p><a href="http://www.bear-writer.com/">http://www.bear-writer.com/</a></p>
<p>高颜值、高效率的写作工具</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/Jietu20180604-133443.png"></p>
<h2 id="奇妙清单"><a href="#奇妙清单" class="headerlink" title="奇妙清单"></a>奇妙清单</h2><p><a href="https://www.wunderlist.com/zh/">https://www.wunderlist.com/zh/</a></p>
<p>记录待办事项，并可以设置提醒</p>
<p>和<code>Bear</code>各有优势。<code>Bear</code>如果要和其他设备同步需要付费，<code>奇妙清单</code>是免费的。所以工作的时候我选择<code>Bear</code>，因为工作离不开电脑。平时自己的项目或者记录要做的时用<code>奇妙清单</code>，随时可以添加，因为idea转瞬即逝，即便没有电脑也可以使用手机添加</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/Jietu20180604-133607.png"></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="imageOptim"><a href="#imageOptim" class="headerlink" title="imageOptim"></a>imageOptim</h2><p><a href="https://imageoptim.com/mac">https://imageoptim.com/mac</a></p>
<p>图片压缩</p>
<h2 id="PicU"><a href="#PicU" class="headerlink" title="PicU"></a>PicU</h2><p><a href="https://github.com/chenxtdo/UPImageMacApp">https://github.com/chenxtdo/UPImageMacApp</a></p>
<p>七牛图片上传</p>
<h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><h2 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a>IINA</h2><p><a href="https://lhc70000.github.io/iina/zh-cn/">https://lhc70000.github.io/iina/zh-cn/</a></p>
<p>支持全格式、颜值很高的视频播放器，</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="Haste"><a href="#Haste" class="headerlink" title="Haste"></a>Haste</h2><p><a href="https://itunes.apple.com/cn/app/haste-quick-web-search/id1175250324?mt=12">https://itunes.apple.com/cn/app/haste-quick-web-search/id1175250324?mt=12</a></p>
<p>Haste 是一款一站式，大撒网式搜索工具，当你双击 ⌘  键两次后会自动弹出搜索框，输入关键目标词，按回车键即可在包括主流搜索引擎在内的所有互联网网站上进行目标搜索。</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/Jietu20181004-172333@2x.png"></p>
<h2 id="OmniDiskSweeper"><a href="#OmniDiskSweeper" class="headerlink" title="OmniDiskSweeper"></a>OmniDiskSweeper</h2><p><a href="https://www.omnigroup.com/more/">https://www.omnigroup.com/more/</a></p>
<p>清理电脑神器</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/Jietu20180815-221430@2x.png"></p>
<h2 id="iStat-Menus"><a href="#iStat-Menus" class="headerlink" title="iStat Menus"></a>iStat Menus</h2><p><a href="https://bjango.com/mac/istatmenus/">https://bjango.com/mac/istatmenus/</a></p>
<p>系统监控</p>
<h2 id="yomail"><a href="#yomail" class="headerlink" title="yomail"></a>yomail</h2><p><a href="http://www.yomail.com/">http://www.yomail.com/</a></p>
<p>邮箱客户端</p>
<h2 id="Maipo"><a href="#Maipo" class="headerlink" title="Maipo"></a>Maipo</h2><p><a href="https://weiboformac.sinaapp.com/">https://weiboformac.sinaapp.com/</a></p>
<p>微博客户端</p>
<h2 id="Tickeys"><a href="#Tickeys" class="headerlink" title="Tickeys"></a>Tickeys</h2><p><a href="http://www.yingdev.com/projects/tickeys">官网</a></p>
<p>打字机械音效声音模拟器</p>
<h2 id="Bartender"><a href="#Bartender" class="headerlink" title="Bartender"></a>Bartender</h2><p><a href="https://www.macbartender.com/">https://www.macbartender.com/</a></p>
<p>图标整理</p>
<h2 id="NameChanger"><a href="#NameChanger" class="headerlink" title="NameChanger"></a>NameChanger</h2><p><a href="https://mrrsoftware.com/namechanger/?utm_source=toolstouse.github.io">官网</a></p>
<p>批量修改文件名</p>
<h2 id="SiteSucker"><a href="#SiteSucker" class="headerlink" title="SiteSucker"></a>SiteSucker</h2><p><a href="http://ricks-apps.com/">http://ricks-apps.com/</a></p>
<p>站点文件爬取</p>
<h2 id="iText"><a href="#iText" class="headerlink" title="iText"></a>iText</h2><p><a href="https://itunes.apple.com/cn/app/itext-ocr-%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/id1314980676?mt=12">app store</a></p>
<p>图片翻译成文字</p>
<h2 id="magnet"><a href="#magnet" class="headerlink" title="magnet"></a>magnet</h2><p><a href="https://itunes.apple.com/cn/app/magnet/id441258766?mt=12">app store</a></p>
<p>调整应用窗口大小</p>
<h2 id="cakebrew"><a href="#cakebrew" class="headerlink" title="cakebrew"></a>cakebrew</h2><p><a href="https://www.cakebrew.com/">https://www.cakebrew.com/</a></p>
<p>brew安装的软件管理</p>
<h2 id="The-Unarchiver"><a href="#The-Unarchiver" class="headerlink" title="The Unarchiver"></a>The Unarchiver</h2><p><a href="https://itunes.apple.com/cn/app/the-unarchiver/id425424353?mt=12">app store</a></p>
<p>功能强大的解压工具</p>
<h2 id="Keka"><a href="#Keka" class="headerlink" title="Keka"></a>Keka</h2><p><a href="https://www.keka.io/en/">https://www.keka.io/en/</a></p>
<p>这款软件 app store 售价为 ￥12，而官网下载是免费的。<br>主要用于压缩，而解压功能远不如 <a href="#The-Unarchiver">The Unarchiver</a> 强大</p>
<h2 id="macDown"><a href="#macDown" class="headerlink" title="macDown"></a>macDown</h2><p><a href="https://macdown.uranusjr.com/">https://macdown.uranusjr.com/</a></p>
<p>简单好用的markdow编辑工具</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><a href="https://itunes.apple.com/cn/app/%E6%88%AA%E5%9B%BE-jietu-%E5%BF%AB%E9%80%9F%E6%A0%87%E6%B3%A8-%E4%BE%BF%E6%8D%B7%E5%88%86%E4%BA%AB%E7%9A%84%E6%88%AA%E5%B1%8F%E5%B7%A5%E5%85%B7/id1059334054?mt=12">app store</a></p>
<p>截图功能包括区域截图／窗口截图／全屏截图／倒计时截图／录制屏幕，保存可自定义选择图片和视频质量</p>
<div class="swiper">
![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w.jpg)
![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w1.jpg)
![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w2.jpg)
![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w3.jpg)
![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w4.jpg)
</div>

<h2 id="LICEcap"><a href="#LICEcap" class="headerlink" title="LICEcap"></a>LICEcap</h2><p><a href="https://www.cockos.com/licecap/">官网</a></p>
<p>LICEcap 是一款屏幕录制工具，支持导出 GIF 动画图片格式，轻量级、使用简单，录制过程中可以随意改变录屏范围。</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/Jietu20180627-174341@2x.png"></p>
<p>LICEcap 非常轻量级，安装包不到 500KB。运行后会以窗口的方式显示在桌面，拖动选取一个合适的大小范围，点击 Record 选取保存路径就开始录屏了。LICEcap 在录屏过程中可以随时拖动窗口改变录屏范围，Stop 过后自动保存为 GIF 格式。</p>
<h2 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h2><p><a href="https://itunes.apple.com/cn/app/paste-2/id967805235?mt=12">app store</a></p>
<p>保存复制过的内容</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/paste.png"></p>
<h2 id="1password"><a href="#1password" class="headerlink" title="1password"></a>1password</h2><p><a href="https://itunes.apple.com/cn/app/1password-7/id1333542190?mt=12">app store</a></p>
<p>保存密码工具，大概每个月28元，但是跟安全相比，很便宜了</p>
<h2 id="Reeder-3"><a href="#Reeder-3" class="headerlink" title="Reeder 3"></a>Reeder 3</h2><p><a href="https://itunes.apple.com/cn/app/reeder-3/id880001334?mt=12">app store</a></p>
<p>RSS等订阅工具</p>
<h2 id="appcleaner"><a href="#appcleaner" class="headerlink" title="appcleaner"></a>appcleaner</h2><p><a href="https://freemacsoft.net/appcleaner/">https://freemacsoft.net/appcleaner/</a></p>
<p>软件卸载</p>
<h2 id="Sip"><a href="#Sip" class="headerlink" title="Sip"></a>Sip</h2><p><a href="https://sipapp.io/">https://sipapp.io/</a></p>
<p>屏幕取色器</p>
<h2 id="sketch"><a href="#sketch" class="headerlink" title="sketch"></a>sketch</h2><p><a href="https://www.sketchapp.com/">https://www.sketchapp.com/</a></p>
<p>轻量，易用的矢量设计工具</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/Jietu20180606-095302.png"></p>
<h2 id="加速大师"><a href="#加速大师" class="headerlink" title="加速大师"></a>加速大师</h2><p><a href="https://itunes.apple.com/cn/app/%E5%8A%A0%E9%80%9F%E5%A4%A7%E5%B8%88/id1144825078?mt=12">app store</a></p>
<p>Mac加速大师是一款功能强大的多合一系统优化App，它可以清理Mac多种类型的垃圾文件，优化启动项目，清理无用的app。适合Mac的日常维护，尤其适合于使用多年的旧Mac，性能提升显著。更重要的是它完全免费，绝对值得拥有。</p>
<div class="swiper">
![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095457@2x.png)
![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095531@2x.png)
![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095549@2x.png)
![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095517@2x.png)
</div>

<h2 id="handshaker"><a href="#handshaker" class="headerlink" title="handshaker"></a>handshaker</h2><p><a href="https://itunes.apple.com/cn/app/handshaker-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/id1012930195?mt=12">app store</a></p>
<p>在mac上管理安卓手机</p>
<h2 id="Irvue"><a href="#Irvue" class="headerlink" title="Irvue"></a>Irvue</h2><p><a href="https://itunes.apple.com/cn/app/irvue/id1039633667?mt=12">app store</a></p>
<p>自动换壁纸软件,它自动获取 Unsplash 上的高质量无版权图片作为壁纸。在其菜单栏菜单中的 Update interval（更新时间）中可以设置更新间隔，从每半小时到每月都可以设置，也可以选择手动更新。</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/v2-b4315ba434fa712d0cc5d40968a2417d_hd.jpg"></p>
<h2 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h2><p><a href="https://itunes.apple.com/cn/app/unsplash-wallpapers/id1284863847?mt=12">app store</a></p>
<p>作为质量最高的免费无版权图片资源网站之一，Unsplash 一直被众多第三方壁纸应用选为图片来源，而这个高质量的照片网站终于有官方的 Mac 客户端了。Unsplash 的 macOS 客户端设计非常简约，打开应用后它会常驻在菜单栏上，点击图标即可看到当前壁纸缩略图，你可以选择随机更换一张新壁纸、下载原图或在 Unsplash 网站上查看图片。</p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/v2-72675cc6687447d4dca5dd15f7d2ac3d_hd.jpg"></p>
<h1 id="屏保"><a href="#屏保" class="headerlink" title="屏保"></a>屏保</h1><h2 id="Aerial"><a href="#Aerial" class="headerlink" title="Aerial"></a>Aerial</h2><p>项目地址: <a href="https://github.com/JohnCoates/Aerial">JohnCoates&#x2F;Aerial: Apple TV Aerial Screensaver for Mac</a></p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/v2-405866de1e275d972dcff2fab1c527a0_b.gif"></p>
<h2 id="极简时钟：Fliqlo"><a href="#极简时钟：Fliqlo" class="headerlink" title="极简时钟：Fliqlo"></a>极简时钟：Fliqlo</h2><p>官网: <a href="https://fliqlo.com/#about-screensaver">Fliqlo - The Flip Clock Screensaver</a></p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/v2-90dd82e5da45361b7b9441ee39077baa_hd.jpg"></p>
<h2 id="更简约的时钟：Padbury"><a href="#更简约的时钟：Padbury" class="headerlink" title="更简约的时钟：Padbury"></a>更简约的时钟：Padbury</h2><p>官网：<a href="http://padbury.me/clock/">Padbury Clock — A Screen Saver for macOS</a></p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/v2-4c550cd86d79c21f32d0935fc8bbf42c_hd.jpg"></p>
<h2 id="Watch-Screensaver-for-OSX"><a href="#Watch-Screensaver-for-OSX" class="headerlink" title="Watch Screensaver for OSX"></a>Watch Screensaver for OSX</h2><p>官网: <a href="http://www.rasmusnielsen.dk/applewatch/">rasmusnielsen — creative</a></p>
<p><img data-src="//blogimg.jakeyu.top/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/v2-3d1b8cffb2c69e0537aacfa3946027d4_b.gif"></p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mockjs让前端开发独立于后端</title>
    <url>/2016/08/19/mockjs%E8%AE%A9%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%8D%E4%BE%9D%E8%B5%96%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/20170327149054604067872.png"></p>
<p>mock.js 可以模拟ajax数据，拦截ajax请求，返回模拟数据，无需后端返回就可以测试前端程序</p>
<p><a href="http://mockjs.com/">mockjs官网</a></p>
<span id="more"></span>

<p>首先要感谢凯伦<a href="http://go.kieran.top/">Kieran</a>大神的帮助</p>
<p>话不多说直接进入主题</p>
<h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><p>首先在head头中引入我们需要的mockjs文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://mockjs.com/dist/mock.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="定义数据"><a href="#定义数据" class="headerlink" title="定义数据"></a>定义数据</h3><p>在ajax请求之前，用mack定义返回数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;http://laoyu&#x27;</span>, &#123;</span><br><span class="line"> <span class="string">&quot;errorcode&quot;</span>: <span class="number">0</span>,<span class="comment">//0表示成功，1表示错误</span></span><br><span class="line"> <span class="string">&quot;message&quot;</span>: <span class="string">&quot;xx信息不完整&quot;</span>, <span class="comment">//弹出错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="创建请求"><a href="#创建请求" class="headerlink" title="创建请求"></a>创建请求</h3><p>在ajax中,open()的url要与mock中的相同，比如我这里是<code>http://laoyu</code>,那么</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">XHR</span>.<span class="property">open</span>（<span class="string">&quot;post/get&quot;</span>,<span class="string">&quot;http://laoyu&quot;</span>,<span class="literal">true</span>/<span class="literal">false</span>）</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>好了，说到这里，我们进行测试一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用mock方法模拟数据</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;http://laoyu&#x27;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;errorcode&quot;</span>: <span class="number">0</span>,<span class="comment">//0表示成功，1表示错误</span></span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;xx信息不完整&quot;</span>, <span class="comment">//弹出错误信息</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ajax进行测试</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;http://laoyu&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>((xhr.<span class="property">status</span>&gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt;<span class="number">300</span>) || xhr.<span class="property">status</span>== <span class="number">304</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);	<span class="comment">//因为reponseText返回的是字符串，将字符串转换成我们想要的JSON数据，这样就可以调用了</span></span><br><span class="line"></span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">//在控制台中打印出返回的内容</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top//mockjs%E8%AE%A9%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8B%AC%E7%AB%8B%E4%BA%8E%E5%90%8E%E7%AB%AF/312896762343287.jpg"></p>
<p>看到没，返回了我们使用mock模拟的数据，这样就可以无需后台，直接进行自己的测试了</p>
<h3 id="xhr-readyState的五种状态"><a href="#xhr-readyState的五种状态" class="headerlink" title="xhr.readyState的五种状态"></a>xhr.readyState的五种状态</h3><pre><code>0 － （未初始化）还没有调用open()方法
1 － （服务器连接已经建立）已调用open()方法，正在发送请求
2 － （请求已接收）send()方法执行完成，已经接收到全部响应内容
3 － （请求处理中）正在解析响应内容
4 － （请求已完成）响应内容解析完成，可以在客户端调用了
</code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose中使用populate处理嵌套</title>
    <url>/2017/03/21/mongoose%E4%B8%AD%E4%BD%BF%E7%94%A8populate%E5%A4%84%E7%90%86%E5%B5%8C%E5%A5%97/</url>
    <content><![CDATA[<p>nodejs在使用mongdb数据库中经常会使用到嵌套，比如一个多级分类等。这里我使用<code>学校--&gt;学院--&gt;学生</code>来展示使用populate处理嵌套。</p>
<span id="more"></span>

<h1 id="定义modal"><a href="#定义modal" class="headerlink" title="定义modal"></a>定义modal</h1><p>在模式中，我们需要使用<code>Schema.ObjectId</code>来表示要指向数据在mongodb数据库中的<code>_id</code>。</p>
<h2 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h2><p>在学校的Schema中，colleges属性是要包含的学院的<code>_id</code>属性数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">SchoolSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">	<span class="attr">colleges</span>: [&#123;</span><br><span class="line">		<span class="attr">type</span>: <span class="title class_">Schema</span>.<span class="property">ObjectId</span>,</span><br><span class="line">		<span class="attr">ref</span>: <span class="string">&#x27;College&#x27;</span></span><br><span class="line">	&#125;],</span><br><span class="line">	<span class="attr">createTime</span>: &#123;</span><br><span class="line">		<span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">		<span class="attr">default</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">School</span>  = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;School&#x27;</span>, <span class="title class_">SchoolSchema</span>);</span><br></pre></td></tr></table></figure>

<h2 id="学院"><a href="#学院" class="headerlink" title="学院"></a>学院</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CollegeSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">	<span class="attr">students</span>: [&#123;</span><br><span class="line">		<span class="attr">type</span>: <span class="title class_">Schema</span>.<span class="property">ObjectId</span>,</span><br><span class="line">		<span class="attr">ref</span>: <span class="string">&#x27;Student&#x27;</span></span><br><span class="line">	&#125;],</span><br><span class="line">	<span class="attr">createTime</span>: &#123;</span><br><span class="line">		<span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">		<span class="attr">default</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">College</span>  = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;College&#x27;</span>, <span class="title class_">CollegeSchema</span>);</span><br></pre></td></tr></table></figure>

<h2 id="学生"><a href="#学生" class="headerlink" title="学生"></a>学生</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">StudentSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">	<span class="attr">sex</span>: <span class="title class_">String</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="title class_">Number</span>,</span><br><span class="line">	<span class="attr">createTime</span>: &#123;</span><br><span class="line">		<span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">		<span class="attr">default</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span>  = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Student&#x27;</span>, <span class="title class_">StudentSchema</span>);</span><br></pre></td></tr></table></figure>

<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="直接查找"><a href="#直接查找" class="headerlink" title="直接查找"></a>直接查找</h2><p>查找学校并找到指向的学院</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">School</span></span><br><span class="line">	.<span class="title function_">find</span>()</span><br><span class="line">	.<span class="title function_">populate</span>(<span class="string">&#x27;colleges&#x27;</span>, [<span class="string">&#x27;_id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">	.<span class="title function_">exec</span>(<span class="function">(<span class="params">err, schools</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (err) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(schools)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<p><code>populate</code>的第一个参数是学校表中需要指向学院表的属性，即<code>colleges</code>；第二个参数为要在学院中查找的属性。如果不填写第二个参数，则默认全都查出。</p>
<p>这样查找出的结果中，学院的学生属性是该学院包含的学生的<code>_id</code>属性。如果需要都查找出来需要使用嵌套<code>populate</code>。</p>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">School</span></span><br><span class="line">	.<span class="title function_">find</span>()</span><br><span class="line">	.<span class="title function_">populate</span>(&#123;</span><br><span class="line">		<span class="attr">path</span>: <span class="string">&#x27;colleges&#x27;</span>,</span><br><span class="line">		<span class="attr">select</span>: [<span class="string">&#x27;_id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">		<span class="comment">// model: &#x27;College&#x27;,</span></span><br><span class="line">		<span class="attr">populate</span>: &#123;</span><br><span class="line">			<span class="attr">path</span>: <span class="string">&#x27;students&#x27;</span>,</span><br><span class="line">			<span class="attr">select</span>: [<span class="string">&#x27;_id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">				<span class="comment">// model: &#x27;Student&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	.<span class="title function_">sort</span>(&#123;</span><br><span class="line">		<span class="attr">createTime</span>: -<span class="number">1</span></span><br><span class="line">	&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, schools</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (err) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose参考手册</title>
    <url>/2017/02/28/mongoose%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/mongoose/mongoose.jpg"></p>
<span id="more"></span>

<h2 id="Mongoose-是什么"><a href="#Mongoose-是什么" class="headerlink" title="Mongoose 是什么?"></a>Mongoose 是什么?</h2><p>一般我们不直接用MongoDB的函数来操作MongoDB数据库 Mongose就是一套操作MongoDB数据库的接口.</p>
<h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力.可以说是数据属性模型(传统意义的表结构)，又或着是”集合”的模型骨架</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义一个 Schema */</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">TestSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    name : &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,<span class="comment">//属性name,类型为String</span></span><br><span class="line">    age  : &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,<span class="comment">//属性age,类型为Number,默认为0</span></span><br><span class="line">    time : &#123; <span class="attr">type</span>: <span class="title class_">Date</span>, <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span> &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>,<span class="attr">default</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面这个 TestSchema包含4个属性 [name, age, time, email]</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>由Schema构造生成的模型，除了Schema定义的数据库骨架以外，还具有数据库操作的行为，类似于管理数据库属性、行为的类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> db = mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://127.0.0.1:27017/test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Model</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">TestModel</span> = db.<span class="title function_">model</span>(<span class="string">&quot;test1&quot;</span>, <span class="title class_">TestSchema</span>);</span><br></pre></td></tr></table></figure>

<p>test1 数据库中的集合名称, 不存在会创建.</p>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><p>由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">TestEntity</span> = <span class="keyword">new</span> <span class="title class_">TestModel</span>(&#123;</span><br><span class="line">       name : <span class="string">&quot;Lenka&quot;</span>,</span><br><span class="line">       age  : <span class="number">36</span>,</span><br><span class="line">       <span class="attr">email</span>: <span class="string">&quot;lenka@qq.com&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">TestEntity</span>.<span class="property">name</span>); <span class="comment">// Lenka</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">TestEntity</span>.<span class="property">age</span>); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure>

<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>MongoDB 使用游标返回find的执行结果.客户端对游标的实现通常能够对最终结果进行有效的控制。可以限制结果的数量，略过部分结果，根据任意键按任意顺序的组合对结果进行各种排序，或者是执行其他一些强的操作。</p>
<h3 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h3><p>存储在mongodb集合中的每个文档（document）都有一个默认的主键_id，这个主键名称是固定的，它可以是mongodb支持的任何数据类型，默认是ObjectId。</p>
<p>ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，依次代表：</p>
<ul>
<li>4字节：UNIX时间戳</li>
<li>3字节：表示运行MongoDB的机器</li>
<li>2字节：表示生成此_id的进程</li>
<li>3字节：由一个随机数开始的计数器生成的值</li>
</ul>
<h2 id="Node-js-中"><a href="#Node-js-中" class="headerlink" title="Node.js 中"></a>Node.js 中</h2><p>package.json 中加入”mongoose”: “*“ 字段<br>npm install 安装依赖.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/test&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然后引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>,<span class="string">&#x27;连接错误:&#x27;</span>));</span><br><span class="line">mongoose.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//一次打开记录</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="db-数据库操作"><a href="#db-数据库操作" class="headerlink" title="db - 数据库操作"></a>db - 数据库操作</h3><p>挂接数据库连接事件,参数1: 也可以是error.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, callback);</span><br></pre></td></tr></table></figure>

<h3 id="Schema-表结构"><a href="#Schema-表结构" class="headerlink" title="Schema - 表结构"></a>Schema - 表结构</h3><h4 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">PersonSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="title class_">String</span>   <span class="comment">//定义一个属性name，类型为String</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-添加属性"><a href="#2-添加属性" class="headerlink" title="2.添加属性"></a>2.添加属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Schema</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;String&#x27;</span>,</span><br><span class="line">	<span class="attr">email</span>: <span class="string">&#x27;String&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="string">&#x27;Number&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法"><a href="#3-有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法" class="headerlink" title="3.有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法"></a>3.有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Schema</span>.<span class="title function_">method</span>(<span class="string">&#x27;say&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这样Model和Entity的实例就能使用这个方法了</span></span><br></pre></td></tr></table></figure>

<h4 id="4-添加静态方法"><a href="#4-添加静态方法" class="headerlink" title="4.添加静态方法"></a>4.添加静态方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Schema</span>.<span class="title function_">static</span>(<span class="string">&#x27;say&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//静态方法，只限于在Model层就能使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//批量添加</span></span><br><span class="line"><span class="title class_">Schema</span>.<span class="property">statics</span> = &#123;</span><br><span class="line">  <span class="attr">fetch</span>: <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">      .<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">      .<span class="title function_">sort</span>(<span class="string">&#x27;meta.updateAt&#x27;</span>)</span><br><span class="line">      .<span class="title function_">exec</span>(cb)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">findById</span>: <span class="keyword">function</span>(<span class="params">id, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">      .<span class="title function_">findOne</span>(&#123;</span><br><span class="line">        <span class="attr">_id</span>: id</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">exec</span>(cb)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-追加方法"><a href="#5-追加方法" class="headerlink" title="5.追加方法"></a>5.追加方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Schema</span>.<span class="property">methods</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//静态方法，只限于在Model层就能使用</span></span><br></pre></td></tr></table></figure>

<h3 id="model-文档操作"><a href="#model-文档操作" class="headerlink" title="model - 文档操作"></a>model - 文档操作</h3><h4 id="1-构造函数-参数1-集合名称-参数2-Schema实例"><a href="#1-构造函数-参数1-集合名称-参数2-Schema实例" class="headerlink" title="1.构造函数, 参数1:集合名称, 参数2:Schema实例"></a>1.构造函数, 参数1:集合名称, 参数2:Schema实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">PersonModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Person&#x27;</span>,<span class="title class_">PersonSchema</span>);</span><br><span class="line">    <span class="comment">//如果该Model已经发布，则可以直接通过名字索引到，如下：</span></span><br><span class="line">    <span class="comment">//var PersonModel = mongoose.model(&#x27;Person&#x27;);</span></span><br><span class="line">    <span class="comment">//如果没有发布，上一段代码将会异常</span></span><br></pre></td></tr></table></figure>

<h4 id="2-查询-参数1忽略-或为空对象则返回所有集合文档"><a href="#2-查询-参数1忽略-或为空对象则返回所有集合文档" class="headerlink" title="2.查询, 参数1忽略,或为空对象则返回所有集合文档"></a>2.查询, 参数1忽略,或为空对象则返回所有集合文档</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">model.<span class="title function_">find</span>(&#123;&#125;, callback);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">model.<span class="title function_">find</span>(&#123;&#125;,field,callback);</span><br><span class="line"><span class="comment">//过滤查询,参数2: &#123;&#x27;name&#x27;:1, &#x27;age&#x27;:0&#125; 查询文档的返回结果包含name , 不包含age.(_id默认是1)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">model.<span class="title function_">find</span>(&#123;&#125;,<span class="literal">null</span>,&#123;<span class="attr">limit</span>:<span class="number">20</span>&#125;,callback);</span><br><span class="line"><span class="comment">//过滤查询,参数3: 游标操作 limit限制返回结果数量为20个,如不足20个则返回所有.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">model.<span class="title function_">findOne</span>(&#123;&#125;, callback);</span><br><span class="line"><span class="comment">//查询找到的第一个文档</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">model.<span class="title function_">findById</span>(<span class="string">&#x27;obj._id&#x27;</span>, callback);</span><br><span class="line"><span class="comment">//查询找到的第一个文档,同上. 但是只接受 __id 的值查询</span></span><br></pre></td></tr></table></figure>

<h4 id="3-创建-在集合中创建一个文档"><a href="#3-创建-在集合中创建一个文档" class="headerlink" title="3.创建, 在集合中创建一个文档"></a>3.创建, 在集合中创建一个文档</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">create</span>(文档数据, callback))</span><br></pre></td></tr></table></figure>

<h4 id="4-更新-参数1-查询条件-参数2-更新对象-可以使用MondoDB的更新修改器"><a href="#4-更新-参数1-查询条件-参数2-更新对象-可以使用MondoDB的更新修改器" class="headerlink" title="4.更新,参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器"></a>4.更新,参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">update</span>(conditions, update, <span class="keyword">function</span>(<span class="params">error</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="5-删除-参数1-查询条件"><a href="#5-删除-参数1-查询条件" class="headerlink" title="5.删除, 参数1:查询条件"></a>5.删除, 参数1:查询条件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">remove</span>(conditions,callback);</span><br></pre></td></tr></table></figure>

<h3 id="Entity-文档操作"><a href="#Entity-文档操作" class="headerlink" title="Entity - 文档操作"></a>Entity - 文档操作</h3><h4 id="1-构造函数-其实就是model的实例"><a href="#1-构造函数-其实就是model的实例" class="headerlink" title="1.构造函数, 其实就是model的实例"></a>1.构造函数, 其实就是model的实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">TestModel</span>( &#123; <span class="attr">name</span>:<span class="string">&#x27;xueyou&#x27;</span>, <span class="attr">age</span>:<span class="number">21</span> &#125; );</span><br></pre></td></tr></table></figure>

<h4 id="2-创建-在集合中创建一个文档"><a href="#2-创建-在集合中创建一个文档" class="headerlink" title="2.创建, 在集合中创建一个文档."></a>2.创建, 在集合中创建一个文档.</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Entity</span>.<span class="title function_">save</span>(callback);</span><br></pre></td></tr></table></figure>

<h3 id="更新修改器"><a href="#更新修改器" class="headerlink" title="更新修改器"></a>更新修改器</h3><h4 id="‘-inc’增减修改器-只对数字有效-下面的实例-找到-age-x3D-22的文档-修改文档的age值自增1"><a href="#‘-inc’增减修改器-只对数字有效-下面的实例-找到-age-x3D-22的文档-修改文档的age值自增1" class="headerlink" title="‘$inc’增减修改器,只对数字有效.下面的实例: 找到 age&#x3D;22的文档,修改文档的age值自增1"></a>‘$inc’增减修改器,只对数字有效.下面的实例: 找到 age&#x3D;22的文档,修改文档的age值自增1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Model.update(&#123;</span><br><span class="line">    &#x27;age&#x27;: 22</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &#x27;$inc&#x27;: &#123;</span><br><span class="line">        &#x27;age&#x27;: 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: age=23</span><br></pre></td></tr></table></figure>

<h4 id="‘-set’-指定一个键的值-这个键不存在就创建它-可以是任何MondoDB支持的类型"><a href="#‘-set’-指定一个键的值-这个键不存在就创建它-可以是任何MondoDB支持的类型" class="headerlink" title="‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型."></a>‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型.</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;$set&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: age=<span class="string">&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="‘-unset’-同上取反-删除一个键"><a href="#‘-unset’-同上取反-删除一个键" class="headerlink" title="‘$unset’ 同上取反,删除一个键"></a>‘$unset’ 同上取反,删除一个键</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;$unset&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: age键不存在</span><br></pre></td></tr></table></figure>

<h3 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器:"></a>数组修改器:</h3><h4 id="‘-push’-给一个键push一个数组成员-键不存在会创建"><a href="#‘-push’-给一个键push一个数组成员-键不存在会创建" class="headerlink" title="‘$push’ 给一个键push一个数组成员,键不存在会创建"></a>‘$push’ 给一个键push一个数组成员,键不存在会创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;$push&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;array&#x27;</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: 增加一个 array 键,类型为数组, 有一个成员 <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="‘-addToSet’-向数组中添加一个元素-如果存在就不添加"><a href="#‘-addToSet’-向数组中添加一个元素-如果存在就不添加" class="headerlink" title="‘$addToSet’ 向数组中添加一个元素,如果存在就不添加"></a>‘$addToSet’ 向数组中添加一个元素,如果存在就不添加</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line"> &#125;, &#123;</span><br><span class="line">     <span class="string">&#x27;$addToSet&#x27;</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;array&#x27;</span>: <span class="number">10</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">执行后: array中有<span class="number">10</span>所以不会添加</span><br></pre></td></tr></table></figure>

<h4 id="‘-each’-遍历数组-和-push-修改器配合可以插入多个值"><a href="#‘-each’-遍历数组-和-push-修改器配合可以插入多个值" class="headerlink" title="‘$each’ 遍历数组, 和 $push 修改器配合可以插入多个值"></a>‘$each’ 遍历数组, 和 $push 修改器配合可以插入多个值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;$push&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;array&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;$each&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: array : [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h4 id="‘-pop’-向数组中尾部删除一个元素"><a href="#‘-pop’-向数组中尾部删除一个元素" class="headerlink" title="‘$pop’ 向数组中尾部删除一个元素"></a>‘$pop’ 向数组中尾部删除一个元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;$pop&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;array&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: array : [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  <span class="attr">tips</span>: 将<span class="number">1</span>改成-<span class="number">1</span>可以删除数组首部元素</span><br></pre></td></tr></table></figure>

<h4 id="‘-pull’-向数组中删除指定元素"><a href="#‘-pull’-向数组中删除指定元素" class="headerlink" title="‘$pull’ 向数组中删除指定元素"></a>‘$pull’ 向数组中删除指定元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;$pull&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;array&#x27;</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">执行后: array : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  匹配到array中的<span class="number">10</span>后将其删除</span><br></pre></td></tr></table></figure>

<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询:"></a>条件查询:</h3><ul>
<li>“$lt”	小于</li>
<li>“$lte”	小于等于</li>
<li>“$gt”	大于</li>
<li>“$gte”	大于等于</li>
<li>“$ne”	不等于</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line"> 		<span class="string">&quot;$gte&quot;</span>: <span class="number">18</span>,</span><br><span class="line">		<span class="string">&quot;$lte&quot;</span>: <span class="number">30</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 age 大于等于18并小于等于30的文档</span></span><br></pre></td></tr></table></figure>

<h3 id="或查询-OR"><a href="#或查询-OR" class="headerlink" title="或查询 OR:"></a>或查询 OR:</h3><ul>
<li>‘$in’ 一个键对应多个值</li>
<li>‘$nin’ 同上取反, 一个键不对应指定值</li>
<li>“$or” 多个条件匹配, 可以嵌套 $in 使用</li>
<li>“$not”	同上取反, 查询与特定模式不匹配的文档</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;$in&quot;</span>: [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22.</span><span class="string">&#x27; haha&#x27;</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 age等于20或21或21或&#x27;haha&#x27;的文档</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="string">&quot;$or&quot;</span>: [&#123;</span><br><span class="line">		<span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;xueyou&quot;</span></span><br><span class="line">	&#125;]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 age等于18 或 name等于&#x27;xueyou&#x27; 的文档</span></span><br></pre></td></tr></table></figure>

<h3 id="类型查询"><a href="#类型查询" class="headerlink" title="类型查询:"></a>类型查询:</h3><p>null 能匹配自身和不存在的值, 想要匹配键的值 为null, 就要通过  “$exists” 条件判定键值已经存在<br>“$exists” (表示是否存在的意思)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(<span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line"> 	<span class="string">&quot;$in&quot;</span>: [<span class="literal">null</span>],</span><br><span class="line">	<span class="string">&quot;exists&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 age值为null的文档</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>: &#123;</span><br><span class="line">		<span class="attr">$exists</span>: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error, docs</span>) &#123;</span><br><span class="line"><span class="comment">//查询所有存在name属性的文档</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="attr">telephone</span>: &#123;</span><br><span class="line">		<span class="attr">$exists</span>: <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error, docs</span>) &#123;</span><br><span class="line"><span class="comment">//查询所有不存在telephone属性的文档</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式:"></a>正则表达式:</h3><p>MongoDb 使用 Prel兼容的正则表达式库来匹配正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;name&quot;</span>: <span class="regexp">/joe/i</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查询name为 joe 的文档, 并忽略大小写</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;name&quot;</span>: <span class="regexp">/joe?/i</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查询匹配各种大小写组合</span></span><br></pre></td></tr></table></figure>

<h3 id="查询数组"><a href="#查询数组" class="headerlink" title="查询数组:"></a>查询数组:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="string">&quot;array&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 array(数组类型)键中有10的文档,  array : [1,2,3,4,5,10]  会匹配到</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;array[5]&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 array(数组类型)键中下标5对应的值是10,  array : [1,2,3,4,5,10]  会匹配到</span></span><br></pre></td></tr></table></figure>

<h4 id="‘-all’-匹配数组中多个元素"><a href="#‘-all’-匹配数组中多个元素" class="headerlink" title="‘$all’ 匹配数组中多个元素"></a>‘$all’ 匹配数组中多个元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;array&quot;</span>: [<span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 匹配array数组中 既有5又有10的文档</span></span><br></pre></td></tr></table></figure>

<h4 id="‘-size’-匹配数组长度"><a href="#‘-size’-匹配数组长度" class="headerlink" title="‘$size’ 匹配数组长度"></a>‘$size’ 匹配数组长度</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;array&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;$size&quot;</span>: <span class="number">3</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 匹配array数组长度为3 的文档</span></span><br></pre></td></tr></table></figure>

<h4 id="‘-slice’-查询子集合返回"><a href="#‘-slice’-查询子集合返回" class="headerlink" title="‘$slice’ 查询子集合返回"></a>‘$slice’ 查询子集合返回</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;array&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;$skice&quot;</span>: <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 匹配array数组的前10个元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> 	<span class="string">&quot;array&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;$skice&quot;</span>: [<span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询 匹配array数组的第5个到第10个元素</span></span><br></pre></td></tr></table></figure>

<h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>用它可以执行任意javacript语句作为查询的一部分,如果回调函数返回 true 文档就作为结果的一部分返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="string">&quot;$where&quot;</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">			<span class="comment">//这个函数中的 this 就是文档</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">x</span> !== <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">y</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> === <span class="number">10</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>简化版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="string">&quot;$where&quot;</span>: <span class="string">&quot;this.x + this.y === 10&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="string">&quot;$where&quot;</span>: <span class="string">&quot; function()&#123; return this.x + this.y ===10; &#125; &quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="游标-1"><a href="#游标-1" class="headerlink" title="游标:"></a>游标:</h3><ul>
<li>limit(3)	限制返回结果的数量,</li>
<li>skip(3)	跳过前3个文档,返回其余的</li>
<li>sort( {“username”:1 , “age”:-1 } )	排序 键对应文档的键名, 值代表排序方向, 1 升序, -1降序</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://cnodejs.org/topic/548e54d157fd3ae46b233502">Mongoose 参考手册</a></li>
<li><a href="https://cnodejs.org/topic/504b4924e2b84515770103dd">Mongoose学习参考文档</a></li>
<li><a href="http://cw.hubwiz.com/card/c/543b2e7788dba02718b5a4bd/1/1/1/">汇智网</a></li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>mongoose</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库导入导出</title>
    <url>/2017/07/12/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/20170712149982499685082.png"></p>
<span id="more"></span>

<h1 id="导出所有库"><a href="#导出所有库" class="headerlink" title="导出所有库"></a>导出所有库</h1><h2 id="系统命令行"><a href="#系统命令行" class="headerlink" title="系统命令行"></a>系统命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password --all-databases &gt; all.sql</span><br></pre></td></tr></table></figure>

<h1 id="导入所有库"><a href="#导入所有库" class="headerlink" title="导入所有库"></a>导入所有库</h1><h2 id="mysql命令行"><a href="#mysql命令行" class="headerlink" title="mysql命令行"></a>mysql命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">source</span> all.sql;</span><br></pre></td></tr></table></figure>

<h1 id="导出某些库"><a href="#导出某些库" class="headerlink" title="导出某些库"></a>导出某些库</h1><h2 id="系统命令行-1"><a href="#系统命令行-1" class="headerlink" title="系统命令行"></a>系统命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password --databases db1 db2 &gt; db1db2.sql</span><br></pre></td></tr></table></figure>

<h1 id="导入某些库"><a href="#导入某些库" class="headerlink" title="导入某些库"></a>导入某些库</h1><h2 id="mysql命令行-1"><a href="#mysql命令行-1" class="headerlink" title="mysql命令行"></a>mysql命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">source</span> db1db2.sql;</span><br></pre></td></tr></table></figure>

<h1 id="导入某个库"><a href="#导入某个库" class="headerlink" title="导入某个库"></a>导入某个库</h1><h2 id="系统命令行-2"><a href="#系统命令行-2" class="headerlink" title="系统命令行"></a>系统命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u username -p password db1 &lt; db1.sql;</span><br></pre></td></tr></table></figure>

<h2 id="mysql命令行-2"><a href="#mysql命令行-2" class="headerlink" title="mysql命令行"></a>mysql命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">source</span> db1.sql;</span><br></pre></td></tr></table></figure>

<h1 id="导出某些数据表"><a href="#导出某些数据表" class="headerlink" title="导出某些数据表"></a>导出某些数据表</h1><h2 id="系统命令行-3"><a href="#系统命令行-3" class="headerlink" title="系统命令行"></a>系统命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password db1 table1 table2 &gt; tb1tb2.sql</span><br></pre></td></tr></table></figure>

<h1 id="导入某些数据表"><a href="#导入某些数据表" class="headerlink" title="导入某些数据表"></a>导入某些数据表</h1><h2 id="系统命令行-4"><a href="#系统命令行-4" class="headerlink" title="系统命令行"></a>系统命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u username -p password db1 &lt; tb1tb2.sql</span><br></pre></td></tr></table></figure>

<h2 id="mysql命令行-3"><a href="#mysql命令行-3" class="headerlink" title="mysql命令行"></a>mysql命令行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt;user db1;</span><br><span class="line">mysql&gt;<span class="built_in">source</span> tb1tb2.sql;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>ngixn反向代理报错解决</title>
    <url>/2018/03/16/ngixn%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>今天在写<a href="https://github.com/FeddyTeam/qiniu-images-manager">七牛图床管理</a>时，使用nginx反向代理，加载文件报错<span style="color:red;">Net::ERR_INCOMPLETE_CHUNKED_ENCODING</span></p>
<span id="more"></span>

<p>查看nginx日志文件<code>/usr/local/var/log/nginx/error.log</code>发现下面这行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2018/03/16 15:22:21 [crit] 77033#0: *3361 open() &quot;/usr/local/var/run/nginx/proxy_temp/7/12/0000000127&quot; failed (13: Permission denied) while reading upstream, client: 127.0.0.1, server: dev.jakeyu.top, request: &quot;GET /app.js HTTP/1.1&quot;, upstream: &quot;http://127.0.0.1:8081/app.js&quot;, host: &quot;dev.jakeyu.top:8080&quot;, referrer: &quot;http://dev.jakeyu.top:8080/&quot;</span><br></pre></td></tr></table></figure>

<p>于是切换到<code>proxy_temp</code>所在目录，修改目录用户：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R jake ./proxy-temp</span><br></pre></td></tr></table></figure>

<p>完美解决</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs使用redis数据库缓存数据</title>
    <url>/2017/02/27/nodejs%E4%BD%BF%E7%94%A8redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/redis/redis.jpg"></p>
<span id="more"></span>

<h2 id="运行redis"><a href="#运行redis" class="headerlink" title="运行redis"></a>运行redis</h2><p>Redis服务器默认使用6379端口</p>
<blockquote>
<p>redis-server</p>
</blockquote>
<p>自定义端口</p>
<blockquote>
<p>redis-server –port 6390</p>
</blockquote>
<p>客户端</p>
<blockquote>
<p>redis-cli</p>
</blockquote>
<p>指定ip和端口连接</p>
<blockquote>
<p>redis-cli -h 127.0.0.1 -p 6390</p>
</blockquote>
<p>测试客户端和服务器是否连通</p>
<blockquote>
<p>ping</p>
</blockquote>
<p><img data-src="//blogimg.jakeyu.top/nodejs%E4%BD%BF%E7%94%A8redis/Jietu20170227-102308.jpg"></p>
<h2 id="Nodejs连接redis"><a href="#Nodejs连接redis" class="headerlink" title="Nodejs连接redis"></a>Nodejs连接redis</h2><p>通过<code>redis.createClient(port,host,options)</code>来连接redis服务器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">&quot;redis&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> client = redis.<span class="title function_">createClient</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*client.HMSET 保存哈希键值*/</span></span><br><span class="line">client.<span class="title function_">HMSET</span>(key,val,<span class="keyword">function</span>(<span class="params">err,result</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(&#123;<span class="attr">code</span>:<span class="number">0</span>,<span class="attr">msg</span>:err&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">callback</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">msg</span>:result&#125;);</span><br><span class="line">    <span class="comment">/*设置过期时间为1天*/</span></span><br><span class="line">    client.<span class="title function_">EXPIRE</span>(bottleId,<span class="number">86400</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*随机返回当前数据库的一个键*/</span></span><br><span class="line">client.<span class="title function_">RANDOMKEY</span>(<span class="keyword">function</span>(<span class="params">err,key</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!key)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(&#123;<span class="attr">code</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">&#x27;没有数据&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*根据key返回哈希对象*/</span></span><br><span class="line">    client.<span class="title function_">HGETALL</span>(key,<span class="keyword">function</span>(<span class="params">err,val</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">callback</span>(&#123;<span class="attr">code</span>:<span class="number">0</span>,<span class="attr">msg</span>:err&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">callback</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">msg</span>:val&#125;);</span><br><span class="line">        <span class="comment">/*根据key删除键值*/</span></span><br><span class="line">        client.<span class="title function_">DEL</span>(key);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><p><a href="http://redisdoc.com/index.html">Redis命令参考手册</a></p>
<h3 id="清空数据库"><a href="#清空数据库" class="headerlink" title="清空数据库"></a>清空数据库</h3><blockquote>
<p>FLUSHALL</p>
</blockquote>
<h3 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h3><blockquote>
<p>DEL key</p>
</blockquote>
<h3 id="检查key是否存在。"><a href="#检查key是否存在。" class="headerlink" title="检查key是否存在。"></a>检查key是否存在。</h3><blockquote>
<p>EXISTS key &#x2F;&#x2F;字符串<br>HEXISTS key field 	&#x2F;&#x2F;查看哈希表 key 中，指定的字段是否存在。</p>
</blockquote>
<h3 id="返回key所储存的值的类型。"><a href="#返回key所储存的值的类型。" class="headerlink" title="返回key所储存的值的类型。"></a>返回key所储存的值的类型。</h3><blockquote>
<p>TYPE key </p>
</blockquote>
<h3 id="获取key所存储的值"><a href="#获取key所存储的值" class="headerlink" title="获取key所存储的值"></a>获取key所存储的值</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote>
<p>GET key </p>
</blockquote>
<h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><blockquote>
<p>HGETALL key 	&#x2F;&#x2F;获取在哈希表中指定 key 的所有字段和值</p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs调用小程序生成二维码接口，并保存成图片</title>
    <url>/2018/10/25/nodejs%E8%B0%83%E7%94%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%B9%B6%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>小程序生成二维码接口返回的是二进制，所以我们要把二进制流保存成图片，再返回给前端。</p>
<p>这里我分别用<code>axios</code>和<code>request</code>实现请求</p>
<span id="more"></span>

<h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">data</span>: &#123; access_token &#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`https://api.weixin.qq.com/wxa/getwxacode?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;path.jpg&#x27;</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.<span class="title function_">post</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`https://api.weixin.qq.com/wxa/getwxacode?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">json</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">body</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(imgUrl)</span><br><span class="line">&#125;).<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;path.png&#x27;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>nodemon热重启</title>
    <url>/2018/05/01/nodemon%E7%83%AD%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/nodemon%E7%83%AD%E9%87%8D%E5%90%AF/35731649-652807e8-080e-11e8-88fd-1b2f6d553b2d.png"></p>
<span id="more"></span>

<p><a href="https://github.com/remy/nodemon">https://github.com/remy/nodemon</a></p>
<h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install nodemon --save</span><br></pre></td></tr></table></figure>

<h2 id="创建配置文件-nodemon-json"><a href="#创建配置文件-nodemon-json" class="headerlink" title="创建配置文件 nodemon.json"></a>创建配置文件 <code>nodemon.json</code></h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;restartable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public/**/*.*&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verbose&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;execMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --harmony&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;development&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ext&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>restartable-设置重启模式</li>
<li>ignore-设置忽略文件</li>
<li>verbose-设置日志输出模式，true 详细模式</li>
<li>execMap-设置运行服务的后缀名与对应的命令<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	“js”<span class="punctuation">:</span> “node –harmony”</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>表示使用 nodemon 代替 node</li>
<li>watch-监听哪些文件的变化，当变化的时候自动重启</li>
<li>ext-监控指定的后缀文件名</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>node读写Excel</title>
    <url>/2017/06/18/node%E8%AF%BB%E5%86%99Excel/</url>
    <content><![CDATA[<p>node 有很多读写excel的模块，这里我只写我所使用的模块。</p>
<ul>
<li>xlsx:读取excel</li>
<li>excel-export: 导出excel</li>
</ul>
<p><img data-src="//blogimg.jakeyu.top/20170618149771883564592.png"></p>
<span id="more"></span>

<h1 id="xlsx读取excel文件"><a href="#xlsx读取excel文件" class="headerlink" title="xlsx读取excel文件"></a><a href="https://www.npmjs.com/package/xlsx">xlsx</a>读取excel文件</h1><h2 id="库中所提及的一些概念"><a href="#库中所提及的一些概念" class="headerlink" title="库中所提及的一些概念"></a>库中所提及的一些概念</h2><ul>
<li>workbook 对象，指的是整份 Excel 文档。我们在使用 js-xlsx 读取 Excel 文档之后就会获得 workbook 对象。</li>
<li>worksheet 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 worksheet 对象。</li>
<li>cell 对象，指的就是 worksheet 中的单元格，一个单元格就是一个 cell 对象。</li>
</ul>
<h2 id="它们的关系如下："><a href="#它们的关系如下：" class="headerlink" title="它们的关系如下："></a>它们的关系如下：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// workbook</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">SheetNames</span>: [<span class="string">&#x27;sheet1&#x27;</span>, <span class="string">&#x27;sheet2&#x27;</span>],</span><br><span class="line">    <span class="title class_">Sheets</span>: &#123;</span><br><span class="line">        <span class="comment">// worksheet</span></span><br><span class="line">        <span class="string">&#x27;sheet1&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">&#x27;A1&#x27;</span>: &#123; ... &#125;,</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">&#x27;A2&#x27;</span>: &#123; ... &#125;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// worksheet</span></span><br><span class="line">        <span class="string">&#x27;sheet2&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">&#x27;A1&#x27;</span>: &#123; ... &#125;,</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">&#x27;A2&#x27;</span>: &#123; ... &#125;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol>
<li>用 XLSX.read 读取获取到的 Excel 数据，返回 workbook</li>
<li>用 XLSX.readFile 打开 Excel 文件，返回 workbook</li>
<li>用 workbook.SheetNames 获取表名</li>
<li>用 workbook.Sheets[xxx] 通过表名获取表格</li>
<li>用 worksheet[address]操作单元格</li>
<li>用XLSX.utils.sheet_to_json针对单个表获取表格数据转换为json格式</li>
<li>用XLSX.writeFile(wb, ‘output.xlsx’)生成新的 Excel 文件</li>
</ol>
<p>读取 Excel 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(data, read_opts) <span class="comment">//尝试解析数据</span></span><br><span class="line"><span class="variable constant_">XLSX</span>.<span class="title function_">readFile</span>(filename, read_opts) <span class="comment">//尝试读取文件名和解析。</span></span><br></pre></td></tr></table></figure>

<p>获取excel中的表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 Excel 中所有表名</span></span><br><span class="line"><span class="keyword">var</span> sheetNames = workbook.<span class="property">SheetNames</span>; <span class="comment">// 返回 [&#x27;sheet1&#x27;, &#x27;sheet2&#x27;,……]</span></span><br><span class="line"><span class="comment">// 根据表名获取对应某张表</span></span><br><span class="line"><span class="keyword">var</span> worksheet = workbook.<span class="property">Sheets</span>[sheetNames[<span class="number">0</span>]];</span><br></pre></td></tr></table></figure>

<p>通过 worksheet[address] 来操作表格，以 ! 开头的 key 是特殊的字段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 A1 单元格对象</span></span><br><span class="line"><span class="keyword">let</span> a1 = worksheet[<span class="string">&#x27;A1&#x27;</span>]; <span class="comment">// 返回 &#123; v: &#x27;hello&#x27;, t: &#x27;s&#x27;, ... &#125;</span></span><br><span class="line"><span class="comment">// 获取 A1 中的值</span></span><br><span class="line">a1.<span class="property">v</span> <span class="comment">// 返回 &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// 获取表的有效范围</span></span><br><span class="line">worksheet[<span class="string">&#x27;!ref&#x27;</span>] <span class="comment">// 返回 &#x27;A1:B20&#x27;</span></span><br><span class="line">worksheet[<span class="string">&#x27;!range&#x27;</span>] <span class="comment">// 返回 range 对象，&#123; s: &#123; r: 0, c: 0&#125;, e: &#123; r: 100, c: 2 &#125; &#125;</span></span><br><span class="line"><span class="comment">// 获取合并过的单元格</span></span><br><span class="line">worksheet[<span class="string">&#x27;!merges&#x27;</span>] <span class="comment">// 返回一个包含 range 对象的列表，[ &#123;s: &#123; r: 0, c: 0 &#125;, c: &#123; r: 2, c: 1 &#125; &#125; ]</span></span><br></pre></td></tr></table></figure>

<p>获取 Excel 文件中的表转换为json数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_to_json</span>(worksheet)  <span class="comment">//针对单个表，返回序列化json数据</span></span><br></pre></td></tr></table></figure>

<h1 id="excel-export导出excel"><a href="#excel-export导出excel" class="headerlink" title="excel-export导出excel"></a>excel-export导出excel</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> excelPort = <span class="built_in">require</span>(<span class="string">&#x27;excel-export&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">write</span> = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> datas = req.<span class="property">datas</span>;</span><br><span class="line">    <span class="keyword">var</span> conf = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> filename = <span class="string">&#x27;filename&#x27;</span>; <span class="comment">//只支持字母和数字命名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    conf.<span class="property">cols</span> = [&#123;</span><br><span class="line">        <span class="attr">caption</span>: <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">20</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">caption</span>: <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">40</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">caption</span>: <span class="string">&#x27;岗位&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">caption</span>: <span class="string">&#x27;工时(h)&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    array = [</span><br><span class="line">        [<span class="number">13084233</span>, <span class="title class_">Jake</span>, 图书馆, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">13084233</span>, <span class="title class_">Jake</span>, 图书馆, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">13084233</span>, <span class="title class_">Jake</span>, 图书馆, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">13084233</span>, <span class="title class_">Jake</span>, 图书馆, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">13084233</span>, <span class="title class_">Jake</span>, 图书馆, <span class="number">20</span>]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    conf.<span class="property">rows</span> = array;</span><br><span class="line">    <span class="keyword">var</span> result = excelPort.<span class="title function_">execute</span>(conf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> random = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10000</span> + <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">var</span> uploadDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/public/files/&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> filePath = uploadDir + filename + random + <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(filePath, result, <span class="string">&#x27;binary&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>nth-child用法</title>
    <url>/2018/02/22/nth-child%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><code>nth-child</code>是个神奇的东西，但是总会忘记一些常用的用法。</p>
<span id="more"></span>

<h2 id="nth-child-2"><a href="#nth-child-2" class="headerlink" title=":nth-child(2)"></a>:nth-child(2)</h2><p>选取第几个标签，“2可以是你想要的数字”</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nth-child-n-4"><a href="#nth-child-n-4" class="headerlink" title=":nth-child(n+4)"></a>:nth-child(n+4)</h2><p>选取大于等于4标签，“n”表示从整数，下同</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n+<span class="number">4</span>)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nth-child-n-4-1"><a href="#nth-child-n-4-1" class="headerlink" title=":nth-child(-n+4)"></a>:nth-child(-n+4)</h2><p>选取小于等于4标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n+<span class="number">4</span>)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nth-child-2n"><a href="#nth-child-2n" class="headerlink" title=":nth-child(2n)"></a>:nth-child(2n)</h2><p>选取偶数标签，2n也可以是even</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nth-child-2n-1"><a href="#nth-child-2n-1" class="headerlink" title=":nth-child(2n-1)"></a>:nth-child(2n-1)</h2><p>选取奇数标签，2n-1可以是odd</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n-<span class="number">1</span>)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nth-child-3n-1"><a href="#nth-child-3n-1" class="headerlink" title=":nth-child(3n+1)"></a>:nth-child(3n+1)</h2><p>自定义选取标签，3n+1表示“隔二取一”</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h2><p>选取最后一个标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nth-last-child-3"><a href="#nth-last-child-3" class="headerlink" title=":nth-last-child(3)"></a>:nth-last-child(3)</h2><p>选取倒数第几个标签,3表示选取第3个</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">3</span>)&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>sass用法</title>
    <url>/2016/12/04/sass%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>今天改一套模版，要用到sass，之前一直用的是less，索性就大概看看sass语法和编译。</p>
<p><img data-src="//blogimg.jakeyu.top/20170327149054550084076.jpg"></p>
<span id="more"></span>

<h1 id="什么是SASS"><a href="#什么是SASS" class="headerlink" title="什么是SASS"></a>什么是SASS</h1><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>
<p>本文总结了SASS的主要用法。我的目标是，有了这篇文章，日常的一般使用就不需要去看<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html">官方文档</a><br>了。</p>
<h1 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。</p>
<p>假定你已经安装好了Ruby，接着在命令行输入下面的命令：</p>
<blockquote>
<p>gem install sass</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>SASS文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。</p>
<p>下面的命令，可以在屏幕上显示.scss文件转化的css代码。（假设文件名为test。）</p>
<blockquote>
<p>sass test.scss</p>
</blockquote>
<p>如果要将显示结果保存成文件，后面再跟一个.css文件名。</p>
<blockquote>
<p>sass test.scss test.css</p>
</blockquote>
<p>SASS提供四个<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#output_style">编译风格</a>的选项：</p>
<blockquote>
<ol>
<li>nested：嵌套缩进的css代码，它是默认值。</li>
<li>expanded：没有缩进的、扩展的css代码。</li>
<li>compact：简洁格式的css代码。</li>
<li>compressed：压缩后的css代码。</li>
</ol>
</blockquote>
<p>生产环境当中，一般使用最后一个选项。</p>
<blockquote>
<p>sass –style compressed test.sass test.css</p>
</blockquote>
<p>你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。</p>
<blockquote>
<p>&#x2F;&#x2F; watch a file<br>sass –watch input.scss:output.css<br>&#x2F;&#x2F; watch a directory<br>sass –watch app&#x2F;sass:public&#x2F;stylesheets</p>
</blockquote>
<p>SASS的官方网站，提供了一个<a href="http://sass-lang.com/try.html">在线转换器</a>。你可以在那里，试运行下面的各种例子。</p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>SASS允许使用变量，所有变量以$开头。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$blue : #1875e7;　</span><br><span class="line">　　div &#123;</span><br><span class="line">　　　color : $blue;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　$side : left;</span><br><span class="line">　　.rounded &#123;</span><br><span class="line">　　　　border-#&#123;$side&#125;-radius: 5px;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算功能"><a href="#计算功能" class="headerlink" title="计算功能"></a>计算功能</h2><p>SASS允许在代码中使用算式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　body &#123;</span><br><span class="line">　　　　margin: (14px/2);</span><br><span class="line">　　　　top: 50px + 100px;</span><br><span class="line">　　　　right: $var * 10%;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>SASS允许选择器嵌套。比如，下面的CSS代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">　　　　<span class="attribute">color</span> : red;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>可以写成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　div &#123;</span><br><span class="line">　　　　hi &#123;</span><br><span class="line">　　　　　　color:red;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>属性也可以嵌套，比如border-color属性，可以写成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　p &#123;</span><br><span class="line">　　　　border: &#123;</span><br><span class="line">　　　　　　color: red;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>注意，border后面必须加上冒号。</p>
<p>在嵌套的代码块内，可以使用&amp;引用父元素。比如a:hover伪类，可以写成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　a &#123;</span><br><span class="line">　　　　&amp;:hover &#123; color: #ffb3ff; &#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>SASS共有两种注释风格。</p>
<p>标准的CSS注释 &#x2F;* comment *&#x2F; ，会保留到编译后的文件。</p>
<p>单行注释 &#x2F;&#x2F; comment，只保留在SASS源文件中，编译后被省略。</p>
<p>在&#x2F;*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　/*! </span><br><span class="line">　　　　重要注释！</span><br><span class="line">　　*/</span><br></pre></td></tr></table></figure>

<h1 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　.class1 &#123;</span><br><span class="line">　　　　border: 1px solid #ddd;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>class2要继承class1，就要使用@extend命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　.class2 &#123;</span><br><span class="line">　　　　@extend .class1;</span><br><span class="line">　　　　font-size:120%;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h2><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。</p>
<p>使用@mixin命令，定义一个代码块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@mixin left &#123;</span><br><span class="line">　　　　float: left;</span><br><span class="line">　　　　margin-left: 10px;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>使用@include命令，调用这个mixin。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　div &#123;</span><br><span class="line">　　　　@include left;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>mixin的强大之处，在于可以指定参数和缺省值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@mixin left($value: 10px) &#123;</span><br><span class="line">　　　　float: left;</span><br><span class="line">　　　　margin-right: $value;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>使用的时候，根据需要加入参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　div &#123;</span><br><span class="line">　　　　@include left(20px);</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>下面是一个mixin的实例，用来生成浏览器前缀。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@mixin rounded($vert, $horz, $radius: 10px) &#123;</span><br><span class="line">　　　　border-#&#123;$vert&#125;-#&#123;$horz&#125;-radius: $radius;</span><br><span class="line">　　　　-moz-border-radius-#&#123;$vert&#125;#&#123;$horz&#125;: $radius;</span><br><span class="line">　　　　-webkit-border-#&#123;$vert&#125;-#&#123;$horz&#125;-radius: $radius;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>使用的时候，可以像下面这样调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　#navbar li &#123; @include rounded(top, left); &#125;</span><br><span class="line">　　#footer &#123; @include rounded(top, left, 5px); &#125;</span><br></pre></td></tr></table></figure>

<h2 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h2><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　lighten(#cc3, 10%) // #d6d65c</span><br><span class="line">　　darken(#cc3, 10%) // #a3a329</span><br><span class="line">　　grayscale(#cc3) // #808080</span><br><span class="line">　　complement(#cc3) // #33c</span><br></pre></td></tr></table></figure>

<h2 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h2><p>@import命令，用来插入外部文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &quot;path/filename.scss&quot;;</span><br></pre></td></tr></table></figure>

<p>如果插入的是.css文件，则等同于css的import命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@import &quot;foo.css&quot;;</span><br></pre></td></tr></table></figure>

<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>@if可以用来判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　p &#123;</span><br><span class="line">　　　　@if 1 + 1 == 2 &#123; border: 1px solid; &#125;</span><br><span class="line">　　　　@if 5 &lt; 3 &#123; border: 2px dotted; &#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>配套的还有@else命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@if lightness($color) &gt; 30% &#123;</span><br><span class="line">　　　　background-color: #000;</span><br><span class="line">　　&#125; @else &#123;</span><br><span class="line">　　　　background-color: #fff;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>SASS支持for循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@for $i from 1 to 10 &#123;</span><br><span class="line">　　　　.border-#&#123;$i&#125; &#123;</span><br><span class="line">　　　　　　border: #&#123;$i&#125;px solid blue;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>也支持while循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　$i: 6;</span><br><span class="line">　　@while $i &gt; 0 &#123;</span><br><span class="line">　　　　.item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class="line">　　　　$i: $i - 2;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>each命令，作用与for类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@each $member in a, b, c, d &#123;</span><br><span class="line">　　　　.#&#123;$member&#125; &#123;</span><br><span class="line">　　　　　　background-image: url(&quot;/image/#&#123;$member&#125;.jpg&quot;);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>SASS允许用户编写自己的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　@function double($n) &#123;</span><br><span class="line">　　　　@return $n * 2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　#sidebar &#123;</span><br><span class="line">　　　　width: double(5px);</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>作者： 阮一峰<br>日期： 2012年6月19日<br>原文： <a href="http://www.ruanyifeng.com/blog/2012/06/sass.html">SASS用法指南</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>scrollTop等元素距离</title>
    <url>/2016/09/04/scrollTop-offsetTop-scrollLeft-offsetLeft/</url>
    <content><![CDATA[<h3 id="关于scrollTop-offsetTop-scrollLeft-offsetLeft用法介绍"><a href="#关于scrollTop-offsetTop-scrollLeft-offsetLeft用法介绍" class="headerlink" title="关于scrollTop,offsetTop,scrollLeft,offsetLeft用法介绍"></a>关于scrollTop,offsetTop,scrollLeft,offsetLeft用法介绍</h3><span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">页可见区域宽： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>;</span><br><span class="line">网页可见区域高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line">网页可见区域宽： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetWidth</span> (包括边线的宽);</span><br><span class="line">网页可见区域高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetHeight</span> (包括边线的宽);</span><br><span class="line">网页正文全文宽： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollWidth</span>;</span><br><span class="line">网页正文全文高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">网页被卷去的高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">网页被卷去的左： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>;</span><br><span class="line">网页正文部分上： <span class="variable language_">window</span>.<span class="property">screenTop</span>;</span><br><span class="line">网页正文部分左： <span class="variable language_">window</span>.<span class="property">screenLeft</span>;</span><br><span class="line">屏幕分辨率的高： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">height</span>;</span><br><span class="line">屏幕分辨率的宽： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">width</span>;</span><br><span class="line">屏幕可用工作区高度： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availHeight</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top//ScrollTop/1.jpeg"></p>
<p>&amp;nbsp;&amp;nbsp;<code>offsetTop</code>, <code>offsetLeft</code>：只读属性。要确定的这两个属性的值，首先得确定元素的<code>offsetParent</code>。<code>offsetParent</code>指的是距该元素最近的<code>position</code>不为<code>static</code>的祖先元素，如果没有则指向body元素。确定了<code>offsetParent</code>，<code>offsetLeft</code>指的是元素左侧偏移<code>offsetParent</code>的距离，同理<code>offsetTop</code>指的是上侧偏移的距离。<br><br>&amp;nbsp;&amp;nbsp;<code>offsetHeight</code>, <code>offsetWidth</code>：只读属性。这两个属性返回的是元素的高度或宽度，包括元素的边框、内边距和滚动条。返回值是一个经过四舍五入的整数。如下图：<br></p>
<p><img data-src="//blogimg.jakeyu.top//ScrollTop/2.png"></p>
<p>&amp;nbsp;&amp;nbsp;<code>scrollHeight</code>, <code>scrollWidth</code>：只读属性。返回元素内容的整体尺寸，包括元素看不见的部分（需要滚动才能看见的）。返回值包括<code>padding</code>，但不包括<code>margin</code>和<code>border</code>。如下图：<br></p>
<p><img data-src="//blogimg.jakeyu.top//ScrollTop/3.png"></p>
<p>&amp;nbsp;&amp;nbsp;<code>scrollTop</code>, <code>scrollLeft</code>：图中已经表示的很明白了。如果元素不能被滚动，则为0。<br></p>
<p>&amp;nbsp;&amp;nbsp;<code>window.innerWidth</code>, <code>window.innerHeight</code>：只读。视口（viewport）的尺寸，包含滚动条<br></p>
<p>&amp;nbsp;&amp;nbsp;<code>clientHeight</code>, <code>clientWidth</code>：包括padding，但不包括border, margin和滚动条。如下图<br></p>
<p><img data-src="//blogimg.jakeyu.top//ScrollTop/4.png"></p>
<p>&amp;nbsp;&amp;nbsp;<code>Element.getBoundingClientRect()</code>：只读，返回浮点值。这个方法非常有用，常用于确定元素相对于视口的位置。该方法会返回一个DOMRect对象，包含<code>left</code>, <code>top</code>, <code>width</code>, <code>height</code>, <code>bottom</code>, <code>right</code>六个属性：<br></p>
<p>&amp;nbsp;&amp;nbsp;<code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code>：都是元素（不包括margin）相对于视口的原点（视口的上边界和左边界）的距离。<br></p>
<p>&amp;nbsp;&amp;nbsp;<code>height</code>, <code>width</code>：元素的整体尺寸，包括被滚动隐藏的部分；<code>padding</code>和<code>border</code>参与计算。另外，heigth&#x3D;bottom-top, width&#x3D;right-left。<br></p>
<h3 id="jQuery常用监听页面滚动"><a href="#jQuery常用监听页面滚动" class="headerlink" title="jQuery常用监听页面滚动"></a>jQuery常用监听页面滚动</h3><h4 id="当前滚动的地方的窗口顶端到整个页面顶端的距离："><a href="#当前滚动的地方的窗口顶端到整个页面顶端的距离：" class="headerlink" title="当前滚动的地方的窗口顶端到整个页面顶端的距离："></a>当前滚动的地方的窗口顶端到整个页面顶端的距离：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> winPos = $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br></pre></td></tr></table></figure>

<h4 id="获取指定元素的页面位置"><a href="#获取指定元素的页面位置" class="headerlink" title="获取指定元素的页面位置"></a>获取指定元素的页面位置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(val).<span class="title function_">offset</span>().<span class="property">top</span>;</span><br></pre></td></tr></table></figure>

<h4 id="对页面滚动条滚动的监听：要放在页面加载的时候"><a href="#对页面滚动条滚动的监听：要放在页面加载的时候" class="headerlink" title="对页面滚动条滚动的监听：要放在页面加载的时候"></a>对页面滚动条滚动的监听：要放在页面加载的时候</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="设置滚动条到指定位置"><a href="#设置滚动条到指定位置" class="headerlink" title="设置滚动条到指定位置"></a>设置滚动条到指定位置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>(offset)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper内容超出纵向滚动</title>
    <url>/2018/05/28/swiper%E5%86%85%E5%AE%B9%E8%B6%85%E5%87%BA%E7%BA%B5%E5%90%91%E6%BB%9A%E5%8A%A8/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/swiper%E5%86%85%E5%AE%B9%E8%B6%85%E5%87%BA%E7%BA%B5%E5%90%91%E6%BB%9A%E5%8A%A8/big.jpg"></p>
<span id="more"></span>

<h2 id="打包报错"><a href="#打包报错" class="headerlink" title="打包报错"></a>打包报错</h2><p>使用<code>swiper 4.x</code>，webpack打包出错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js/dist/app.js from UglifyJs</span><br><span class="line">Unexpected token: name (Dom7) [./node_modules/dom7/dist/dom7.modular.js:14,0][js/dist/app.js:24688,6]</span><br></pre></td></tr></table></figure>

<p>最后使用<code>swiper 3.4.2</code>解决</p>
<h2 id="超出内容滚动"><a href="#超出内容滚动" class="headerlink" title="超出内容滚动"></a>超出内容滚动</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">swiper</span> = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;#swiper&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">direction</span>: <span class="string">&#x27;vertical&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> startScroll, touchStart, touchCurrent;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">swiper</span>.<span class="property">slides</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  startScroll = <span class="variable language_">this</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  touchStart = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">swiper</span>.<span class="property">slides</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (startScroll &gt; <span class="number">0</span> &amp;&amp; startScroll &lt; <span class="variable language_">this</span>.<span class="property">scrollHeight</span> - <span class="variable language_">this</span>.<span class="property">offsetHeight</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  touchCurrent = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>;</span><br><span class="line">  <span class="keyword">var</span> touchesDiff = touchCurrent - touchStart;</span><br><span class="line">  <span class="keyword">var</span> slide = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">var</span> onlyScrolling =</span><br><span class="line">        (slide.<span class="property">scrollHeight</span> &gt; slide.<span class="property">offsetHeight</span>) &amp;&amp; <span class="comment">// allow only when slide is scrollable</span></span><br><span class="line">        (</span><br><span class="line">            (touchesDiff &lt; <span class="number">0</span> &amp;&amp; startScroll === <span class="number">0</span>) || <span class="comment">// start from top edge to scroll bottom</span></span><br><span class="line">            (touchesDiff &gt; <span class="number">0</span> &amp;&amp; startScroll === (slide.<span class="property">scrollHeight</span> - slide.<span class="property">offsetHeight</span>)) || <span class="comment">// start from bottom edge to scroll top</span></span><br><span class="line">            (startScroll &gt; <span class="number">0</span> &amp;&amp; startScroll &lt; (slide.<span class="property">scrollHeight</span> - slide.<span class="property">offsetHeight</span>)) <span class="comment">// start from the middle</span></span><br><span class="line">        );</span><br><span class="line">  <span class="keyword">if</span> (onlyScrolling) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="答案出处"><a href="#答案出处" class="headerlink" title="答案出处"></a>答案出处</h2><p><a href="https://github.com/JeffreyWay/laravel-mix/issues/1244">Unexpected token: name (Dom7) </a><br><a href="https://github.com/nolimits4web/Swiper/issues/1467">超出内容滚动</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>video汇总</title>
    <url>/2018/07/19/video%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>开发中遇到的video一些问题的汇总。</p>
<p><img data-src="//blogimg.jakeyu.top/video%E6%B1%87%E6%80%BB/hmtl5video-thumb-1200x565.jpg"></p>
<span id="more"></span>

<h2 id="倍数播放"><a href="#倍数播放" class="headerlink" title="倍数播放"></a>倍数播放</h2><p>B站，或者腾讯视频等主流视频网站视频现在都支持倍速播放功能。介绍一下实现方法。</p>
<p>其实很简单，使用HTML5 video 原生 <a href="http://www.w3school.com.cn/tags/av_prop_playbackrate.asp"><code>playbackrate</code></a> 属性就能实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> speed = video.<span class="property">playbackRate</span> <span class="comment">//获取播放速度</span></span><br><span class="line"></span><br><span class="line">video.<span class="property">playbackRate</span> = <span class="number">0.5</span> <span class="comment">//设置播放速度为0.5</span></span><br></pre></td></tr></table></figure>

<h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;video&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">controls</span> = <span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">poster</span>=<span class="string">&quot;images.jpg&quot;</span> /*<span class="attr">视频封面</span>*/</span></span><br><span class="line"><span class="tag">  <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">webkit-playsinline</span>=<span class="string">&quot;true&quot;</span> /*<span class="attr">这个属性是ios</span> <span class="attr">10中设置可以让视频在小窗内播放</span>，<span class="attr">也就是不是全屏播放</span>*/</span></span><br><span class="line"><span class="tag">  <span class="attr">playsinline</span>=<span class="string">&quot;true&quot;</span>  /*<span class="attr">IOS微信浏览器支持小窗内播放</span>*/</span></span><br><span class="line"><span class="tag">  <span class="attr">x-webkit-airplay</span>=<span class="string">&quot;allow&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">x5-video-player-type</span>=<span class="string">&quot;h5&quot;</span>  /*<span class="attr">启用H5播放器</span>,<span class="attr">是wechat安卓版特性</span>*/</span></span><br><span class="line"><span class="tag">  <span class="attr">x5-video-player-fullscreen</span>=<span class="string">&quot;true&quot;</span> /*<span class="attr">全屏设置</span>，<span class="attr">设置为</span> <span class="attr">true</span> <span class="attr">是防止横屏</span>*/</span></span><br><span class="line"><span class="tag">  <span class="attr">x5-video-orientation</span>=<span class="string">&quot;portraint&quot;</span> //<span class="attr">播放器支付的方向</span>， <span class="attr">landscape横屏</span>，<span class="attr">portraint竖屏</span>，<span class="attr">默认值为竖屏</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;object-fit:fill&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>src</code>: 视频地址</li>
<li><code>controls</code>: 使用系统默认控制组件</li>
<li><code>poster</code>: 属性规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。如果未设置该属性，则使用视频的第一帧来代替。</li>
<li><code>preload</code>: 属性规定在页面加载后载入视频。</li>
<li><code>webkit-playsinline、playsinline</code>: 视频播放时局域播放，不脱离文档流 。但是这个属性比较特别， 需要嵌入网页的APP比如WeChat中UIwebview 的allowsInlineMediaPlayback &#x3D; YES webview.allowsInlineMediaPlayback &#x3D; YES，才能生效。换句话说，如果APP不设置，你页面中加了这标签也无效，这也就是为什么安卓手机WeChat 播放视频总是全屏，因为APP不支持playsinline，而ISO的WeChat却支持。</li>
<li><code>x-webkit-airplay=”allow”</code>: 这个属性应该是使此视频支持ios的AirPlay功能。使用AirPlay可以直接从使用iOS的设备上的不同位置播放视频、音乐还有照片文件，也就是说通过AirPlay功能可以实现影音文件的无线播放，当然前提是播放的终端设备也要支持相应的功能</li>
<li><code>x5-video-player-type</code>: 启用同层H5播放器，就是在视频全屏的时候，div可以呈现在视频层上，也是WeChat安卓版特有的属性。同层播放别名也叫做沉浸式播放，播放的时候看似全屏，但是已经除去了control和微信的导航栏，只留下”X”和”&lt;”两键。目前的同层播放器只在Android（包括微信）上生效，暂时不支持iOS。至于为什么同层播放只对安卓开放，是因为安卓不能像ISO一样局域播放，默认的全屏会使得一些界面操作被阻拦，如果是全屏H5还好，但是做直播的话，诸如弹幕那样的功能就无法实现了，所以这时候同层播放的概念就解决了这个问题。不过在测试的过程中发现，不同版本的IOS和安卓效果略有不同</li>
<li><code>x5-video-orientation</code>: 声明播放器支持的方向，可选值landscape 横屏, portraint竖屏。默认值portraint。无论是直播还是全屏H5一般都是竖屏播放，但是这个属性需要x5-video-player-type开启H5模式</li>
<li><code>x5­-video­-player­-fullscreen</code>: 全屏设置。它又两个属性值，ture和false，true支持全屏播放，false不支持全屏播放。其实，IOS 微信浏览器是webkit内核，相关的属性都支持，也是为什么X5同层播放不支持的原因。安卓微信浏览器是X5内核，一些属性标签比如playsinline就不支持，所以始终全屏。</li>
</ul>
<h2 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">video.<span class="title function_">play</span>()</span><br><span class="line"><span class="comment">// 兼容微信</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    video.<span class="title function_">play</span>()</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000009395289">视频H5 video标签最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 插件之代码补全提示</title>
    <url>/2021/12/04/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/v2-30670b252d59bcc15c040f783d79f5e9_720w.png"></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vscode 插件提供了很强大个能力，借助插件可以帮助我们提升开发效率。</p>
<p>在写 node 项目时经常需要相对路径寻找引用 Service 文件等，写一个插件帮我们自动补全。</p>
<p>借助 <a href="https://code.visualstudio.com/api/references/vscode-api"><code>vscode.languages.registerCompletionItemProvider</code></a> 方法，我们可以注册相关补全提示。</p>
<h1 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line">  context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">    vscode.<span class="property">languages</span>.<span class="title function_">registerCompletionItemProvider</span>(<span class="string">&quot;typescript&quot;</span>, &#123;</span><br><span class="line">      provideCompletionItems,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="provideCompletionItems"><a href="#provideCompletionItems" class="headerlink" title="provideCompletionItems"></a>provideCompletionItems</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">provideCompletionItems</span> = <span class="keyword">async</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="variable language_">document</span>: vscode.TextDocument,</span></span><br><span class="line"><span class="params">  position: vscode.Position</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> serviceFiles = <span class="keyword">await</span> vscode.<span class="property">workspace</span>.<span class="title function_">findFiles</span>(<span class="string">&quot;app/services/**/*.ts&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!serviceFiles.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> serviceFiles.<span class="title function_">map</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生成相对当前编辑文件的相对路径</span></span><br><span class="line">    <span class="keyword">const</span> relativePath = path.<span class="title function_">relative</span>(</span><br><span class="line">      path.<span class="title function_">dirname</span>(<span class="variable language_">document</span>.<span class="property">uri</span>.<span class="property">path</span>),</span><br><span class="line">      path.<span class="title function_">dirname</span>(file.<span class="property">path</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> basename = path.<span class="title function_">basename</span>(file.<span class="property">path</span>);</span><br><span class="line">    <span class="keyword">const</span> extname = path.<span class="title function_">extname</span>(file.<span class="property">path</span>);</span><br><span class="line">    <span class="keyword">const</span> filename = basename.<span class="title function_">replace</span>(extname, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> insertText = <span class="string">`import <span class="subst">$&#123;filename&#125;</span> from &#x27;<span class="subst">$&#123;relativePath&#125;</span>/<span class="subst">$&#123;filename&#125;</span>&#x27;;\n<span class="subst">$&#123;filename&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> completionItem = <span class="keyword">new</span> vscode.<span class="title class_">CompletionItem</span>(</span><br><span class="line">      filename,</span><br><span class="line">      vscode.<span class="property">CompletionItemKind</span>.<span class="property">Class</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    completionItem.<span class="property">detail</span> = basename;</span><br><span class="line">    completionItem.<span class="property">insertText</span> = insertText;</span><br><span class="line">    completionItem.<span class="property">documentation</span> = <span class="string">`<span class="subst">$&#123;insertText&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> completionItem;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>同时我们需要在 package.json 中添加相应配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;onLanguage:typescript&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://code.visualstudio.com/api/references/vscode-api">VS Code API</a></li>
<li><a href="https://github.com/Liiked/VS-Code-Extension-Doc-ZH">VS-Code-Extension-Doc-ZH</a></li>
</ul>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue webpack模板开启局域网访问</title>
    <url>/2018/09/20/vue-webpack%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>修改<code>config/index.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; networkInterfaces &#125; = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIpAddress</span> = (<span class="params"></span>) =&gt; (<span class="title function_">networkInterfaces</span>().<span class="property">en0</span> || <span class="title function_">networkInterfaces</span>().<span class="property">en4</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">&#123; family &#125;</span>) =&gt;</span> family === <span class="string">&#x27;IPv4&#x27;</span>)[<span class="number">0</span>].<span class="property">address</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">host</span>: <span class="title function_">getIpAddress</span>()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用时间处理方法</title>
    <url>/2016/05/24/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>常用时间处理方法</p>
<span id="more"></span>

<p>var date &#x3D; new Date();  &#x2F;&#x2F;获取当前时间</p>
<h2 id="关于当前日期的一些操作"><a href="#关于当前日期的一些操作" class="headerlink" title="关于当前日期的一些操作"></a>关于当前日期的一些操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">date.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">//月份</span></span><br><span class="line">date.<span class="title function_">getDate</span>(); <span class="comment">//日</span></span><br><span class="line">date.<span class="title function_">getHours</span>(); <span class="comment">//小时</span></span><br><span class="line">date.<span class="title function_">getMinutes</span>(); <span class="comment">//分</span></span><br><span class="line">date.<span class="title function_">getSeconds</span>();<span class="comment">//秒</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>((date.<span class="title function_">getMonth</span>() + <span class="number">3</span>) / <span class="number">3</span>); <span class="comment">//季度</span></span><br><span class="line">date.<span class="title function_">getMilliseconds</span>(); <span class="comment">//毫秒</span></span><br><span class="line">date.<span class="title function_">getFullYear</span>();    <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">date.<span class="title function_">getDay</span>();      <span class="comment">//获取当前星期(0-6,0代表星期天)</span></span><br><span class="line">date.<span class="title function_">toLocaleDateString</span>();      <span class="comment">//获取当前日期   (y/M/d)</span></span><br><span class="line">date.<span class="title function_">toLocaleString</span>();     <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure>

<h2 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h2><h3 id="将时间戳转换成日期"><a href="#将时间戳转换成日期" class="headerlink" title="将时间戳转换成日期"></a>将时间戳转换成日期</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(时间戳); <span class="comment">//获取一个时间对象</span></span><br></pre></td></tr></table></figure>

<h3 id="将日期转换为时间戳"><a href="#将日期转换为时间戳" class="headerlink" title="将日期转换为时间戳"></a>将日期转换为时间戳</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="string">&#x27;2018-07-13 18:14:44:123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确到毫秒</span></span><br><span class="line"><span class="keyword">var</span> timeParse = +date;</span><br><span class="line"><span class="comment">// 精确到毫秒</span></span><br><span class="line"><span class="keyword">var</span> timeParse = date.<span class="title function_">getTime</span>();</span><br><span class="line"><span class="comment">// 精确到毫秒</span></span><br><span class="line"><span class="keyword">var</span> timeParse = date.<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="comment">// 精确到秒</span></span><br><span class="line"><span class="keyword">var</span> timeParse = <span class="title class_">Date</span>.<span class="title function_">parse</span>(date);</span><br></pre></td></tr></table></figure>

<p><img data-src="//blogimg.jakeyu.top/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/Jietu20180930-141616.png"></p>
<h2 id="若要显示-当前日期加时间-如-2009-06-12-12-00"><a href="#若要显示-当前日期加时间-如-2009-06-12-12-00" class="headerlink" title="若要显示:当前日期加时间(如:2009-06-12 12:00)"></a>若要显示:当前日期加时间(如:2009-06-12 12:00)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CurentTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();   <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="keyword">var</span> year = now.<span class="title function_">getFullYear</span>();       <span class="comment">//年</span></span><br><span class="line">    <span class="keyword">var</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>;     <span class="comment">//月</span></span><br><span class="line">    <span class="keyword">var</span> day = now.<span class="title function_">getDate</span>();            <span class="comment">//日</span></span><br><span class="line">    <span class="keyword">var</span> hh = now.<span class="title function_">getHours</span>();            <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">var</span> mm = now.<span class="title function_">getMinutes</span>();          <span class="comment">//分</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> clock = year + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(month &lt; <span class="number">10</span>)</span><br><span class="line">        clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    clock += month + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(day &lt; <span class="number">10</span>)</span><br><span class="line">        clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    clock += day + <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hh &lt; <span class="number">10</span>)</span><br><span class="line">        clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    clock += hh + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (mm &lt; <span class="number">10</span>) clock += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    clock += mm;</span><br><span class="line">    <span class="keyword">return</span>(clock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一个通用转换时间格式的函数"><a href="#一个通用转换时间格式的函数" class="headerlink" title="一个通用转换时间格式的函数"></a>一个通用转换时间格式的函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateConvert</span>(<span class="params">date, format</span>) &#123;</span><br><span class="line">    date = <span class="built_in">parseInt</span>(date);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Udate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">var</span> Y = <span class="title class_">Udate</span>.<span class="title function_">getFullYear</span>(),</span><br><span class="line">        M = (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>) &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>),</span><br><span class="line">        D = <span class="title class_">Udate</span>.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + <span class="title class_">Udate</span>.<span class="title function_">getDate</span>() : <span class="title class_">Udate</span>.<span class="title function_">getDate</span>(),</span><br><span class="line">        h = <span class="title class_">Udate</span>.<span class="title function_">getHours</span>(),</span><br><span class="line">        m = <span class="title class_">Udate</span>.<span class="title function_">getMinutes</span>(),</span><br><span class="line">        s = <span class="title class_">Udate</span>.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!format) &#123;</span><br><span class="line">        format = <span class="string">&quot;Y/M/D h:m:s&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;Y&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;Y&quot;</span>, Y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;M&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;M&quot;</span>, M);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;D&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;D&quot;</span>, D);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;h&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;h&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;m&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;m&quot;</span>, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;s&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;s&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Depay 和欧易 (OKX) 订阅 ChatGPT Plus</title>
    <url>/2023/03/21/%E4%BD%BF%E7%94%A8%20Depay%20%E5%92%8C%E6%AC%A7%E6%98%93%20(OKX)%20%E8%AE%A2%E9%98%85%20ChatGPT%20Plus/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E5%85%85%E5%80%BC-chatgpt/ChatGPT-preview.jpg"></p>
<span id="more"></span>

<h2 id="1-下载和注册-Depay"><a href="#1-下载和注册-Depay" class="headerlink" title="1. 下载和注册 Depay"></a>1. 下载和注册 Depay</h2><p>Depay 是一个虚拟信用卡服务提供商，可以将 USDT 转换为美元，以用于虚拟信用卡交易。您需要进行身份验证并传输您的身份证才能使用 Depay。</p>
<h3 id="1-1-注册-Depay-账户"><a href="#1-1-注册-Depay-账户" class="headerlink" title="1.1 注册 Depay 账户"></a>1.1 注册 Depay 账户</h3><p>使用此链接: <a href="https://depay.depay.one/web-app/register-h5?invitCode=876620&lang=zh-cn">https://depay.depay.one/web-app/register-h5?invitCode=876620&lang=zh-cn</a>，填写信息并输入邀请码 <code>876620</code> 来注册 Depay 虚拟 Master 卡或 Visa 卡。</p>
<h3 id="1-2-完成身份认证"><a href="#1-2-完成身份认证" class="headerlink" title="1.2 完成身份认证"></a>1.2 完成身份认证</h3><p>在 iOS App Store 中下载 Depay 应用，使用已注册的账户登录，然后完成 KYC 验证。</p>
<p>如果您使用安卓系统，请在官网下载 Depay 应用。</p>
<h3 id="1-3-获取-USDT"><a href="#1-3-获取-USDT" class="headerlink" title="1.3 获取 USDT"></a>1.3 获取 USDT</h3><ul>
<li>如果您有朋友可以直接向您转移 USDT，则可以跳过此步骤。</li>
<li>Depay 只能使用 TRC20 网络。如果是币圈新手，请牢记这一点。</li>
</ul>
<h2 id="2-下载和注册欧易-OKX"><a href="#2-下载和注册欧易-OKX" class="headerlink" title="2. 下载和注册欧易 (OKX)"></a>2. 下载和注册欧易 (OKX)</h2><p>欧易 (OKX) 是虚拟钱包和交易平台之一，您需要在其中购买 USDT 并将其转移到 Depay 账户中。</p>
<h3 id="2-1-下载欧易-OKX"><a href="#2-1-下载欧易-OKX" class="headerlink" title="2.1 下载欧易 (OKX)"></a>2.1 下载欧易 (OKX)</h3><p>在美国地区的应用商店中下载 OKX 应用。注册账户时，请使用中国手机号码，如果有邀请码，请输入 <code>13041699</code>。</p>
<h3 id="2-2-存储资金"><a href="#2-2-存储资金" class="headerlink" title="2.2 存储资金"></a>2.2 存储资金</h3><p>在 OKX 应用程序中，依次打开“资产” -&gt; “总览” -&gt; “资金账户” -&gt; “充币”。按照指示存储 USDT ，注意选择 USDT-TRC20网络。</p>
<h3 id="2-3-转移资金"><a href="#2-3-转移资金" class="headerlink" title="2.3 转移资金"></a>2.3 转移资金</h3><p>使用 OKX 应用程序进行提款操作，在 Depay 应用程序中充值。在 OKX 应用程序中，依次打开“资产”-&gt;“总览”-&gt;“资金账户”-&gt;“提现”。在 TRC20 地址栏中粘贴您的 Depay 钱包地址，确保选择正确的网络(USDT-TRC20)。</p>
<h2 id="3-开通虚拟信用卡"><a href="#3-开通虚拟信用卡" class="headerlink" title="3. 开通虚拟信用卡"></a>3. 开通虚拟信用卡</h2><p>在 Depay 钱包收到 USDT 后，您需要先开通信用卡，然后兑换成美元。</p>
<h3 id="3-1-开卡"><a href="#3-1-开卡" class="headerlink" title="3.1 开卡"></a>3.1 开卡</h3><p>首先开通标准套餐（0美元，月费1美元，充值手续费最少1.35％），然后根据需要升级套餐。</p>
<h3 id="3-2-兑换-USD"><a href="#3-2-兑换-USD" class="headerlink" title="3.2 兑换 USD"></a>3.2 兑换 USD</h3><p>在 Depay 应用程序中，依次打开“钱包”-&gt;“USDT”-&gt;“兑换”，将 USDT 兑换成美元。</p>
<h3 id="3-3-充值"><a href="#3-3-充值" class="headerlink" title="3.3 充值"></a>3.3 充值</h3><p>在 Depay 应用程序中，依次打开“卡”-&gt;“充值”，然后输入要充值的美元数，并支付手续费1.35％。</p>
<p>从本方法中损失的资金包括：1 USDT（给 OKX 的手续费）+ 1.35％ Depay 充值手续费 + USDT 转换为美元所需的费用。</p>
<h2 id="4-订阅-ChatGPT-Plus"><a href="#4-订阅-ChatGPT-Plus" class="headerlink" title="4. 订阅 ChatGPT Plus"></a>4. 订阅 ChatGPT Plus</h2><p>为了订阅ChatGPT Plus，需要在全局代理下使用手机浏览器打开 <a href="https://chat.openai.com/">https://chat.openai.com</a>，并输入 Depay 虚拟信用卡信息。如果需要，可以使用美国地址生成器替代您的地址。</p>
]]></content>
      <categories>
        <category>ChatGPT</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 github action 自动部署博客和同步备份</title>
    <url>/2023/02/04/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/44036562.png"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 github action 自动化可以让我们发布博客更加简单，只需要把代码提交到 github 仓库即可。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>关于如何使用 git 上传博客到自己的服务器可以查看我之前写的<a href="/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/">Hexo博客部署到服务器</a>。</p>
<h2 id="部署到-github-page"><a href="#部署到-github-page" class="headerlink" title="部署到 github page"></a>部署到 github page</h2><h3 id="action-配置"><a href="#action-配置" class="headerlink" title="action 配置"></a>action 配置</h3><p>在项目根目录下创建 <code>.github/workflows</code> 文件夹，然后在该文件夹下创建 <code>deploy-gh-page.yml</code> 文件，内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际情况调整分支</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy-gh-page:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">pnpm/action-setup@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">7</span></span><br><span class="line">          <span class="attr">run_install:</span> <span class="literal">false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16&quot;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&quot;pnpm&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pnpm</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-page</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># github 自带变量，无需配置</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>

<h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><h3 id="SSH-key"><a href="#SSH-key" class="headerlink" title="SSH key"></a>SSH key</h3><p>添加 SSH Private Key 到 <code>github repo -&gt; settings -&gt; Secrets and variables -&gt; Actions</code>。</p>
<p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/SCR-20230204-mh.png"></p>
<h3 id="action-配置-1"><a href="#action-配置-1" class="headerlink" title="action 配置"></a>action 配置</h3><p>在<a href="#action-%E9%85%8D%E7%BD%AE">上文的配置</a>基础上，增加如下配置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy-to-server:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">  <span class="comment"># 依赖 deploy-gh-page job</span></span><br><span class="line">  <span class="attr">needs:</span> [<span class="string">deploy-gh-page</span>]</span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">wei/git-sync@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">source_repo:</span> <span class="string">JakeLaoyu/blog</span></span><br><span class="line">        <span class="attr">source_branch:</span> <span class="string">refs/remotes/source/gh-pages</span></span><br><span class="line">        <span class="attr">destination_repo:</span> <span class="string">root@110.40.198.64:/www/wwwroot/blog.git</span></span><br><span class="line">        <span class="attr">destination_branch:</span> <span class="string">refs/heads/master</span></span><br><span class="line">        <span class="attr">destination_ssh_private_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/SCR-20230204-s2.png"></p>
<h2 id="同步至-gitee-等"><a href="#同步至-gitee-等" class="headerlink" title="同步至 gitee 等"></a>同步至 gitee 等</h2><p>依赖 <a href="https://github.com/wearerequired/git-mirror-action">wearerequired&#x2F;git-mirror-action</a> 我们可以很方便实现。</p>
<p>在项目根目录下创建 <code>.github/workflows</code> 文件夹，然后在该文件夹下创建 <code>sync-to-gitee.yml</code> 文件，内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 需要事先在 gitee 上创建 ssh key 并添加到仓库</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">git@github.com:JakeLaoyu/blog.git</span></span><br><span class="line">          <span class="comment"># Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">git@gitee.com:jakelaoyu/HexoBlogBackup.git</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>服务器</category>
        <category>CI/CD</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>前端</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Yeoman定制前端脚手架</title>
    <url>/2017/06/28/%E4%BD%BF%E7%94%A8Yeoman-Generators%E5%88%B6%E4%BD%9C%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/20170628149866105196233.png"></p>
<span id="more"></span>

<p>首先附上Yeoman官网：<a href="http://yeoman.io/">http://yeoman.io/</a></p>
<p>我制作的前端脚手架：<a href="https://github.com/JakeLaoyu/generator-jake-front">generator-jake-front</a></p>
<p>以及我在前端同学的分享会上的分享ppt：<a href="https://i.jakeyu.top/files/yeoman.key">yeoman.key</a></p>
<p>如果想快速制作一个脚手架，并且不需要实现特别复杂的定制化，看完这篇文章足够，如果想要实现复杂的功能，需要去查看<a href="http://yeoman.io/">官方文档</a>。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>需要安装<a href="https://nodejs.org/zh-cn/">Nodejs</a></p>
<p>全局安装需要的工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g yo</span><br><span class="line">npm install -g generator-generator</span><br></pre></td></tr></table></figure>

<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>执行下面命令，执行之前并不需要自己新建文件夹，yo generator会帮助我们建好文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yo generator</span><br></pre></td></tr></table></figure>

<p>项目名称自己设置，必须是以<code>generator-</code>开头，协议选择<code>MIT</code>，在设置了一系列问题之后</p>
<p><img data-src="//blogimg.jakeyu.top/2017062814986615489491.jpg"></p>
<p>自动生成如下目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generator-test</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── __tests__</span><br><span class="line">│   └── app.js</span><br><span class="line">├── generators</span><br><span class="line">│   └── app</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── templates</span><br><span class="line">│           └── dummyfile.txt</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>generators/app/templates/</code>是默认存放文件的目录，把所有模版文件放在这个目录下</p>
<p><code>/generators/app/index.js</code>是<code>Yeoman</code>的配置文件，定义如何生成我们的脚手架</p>
<h2 id="prompting"><a href="#prompting" class="headerlink" title="prompting"></a>prompting</h2><p><code>Prompts</code>是<code>generator</code>与用户交互的主要方式。<code>prompt</code>模块由 <a href="https://github.com/SBoudrias/Inquirer.js">Inquirer.js</a>提供，你可以参考它的<a href="https://github.com/SBoudrias/Inquirer.js">API</a>，在可用的提示选项列表。</p>
<p><code>prompt</code>方法是异步的并且返回一个 promise。在你运行下一个任务前去完成它，你需要返回 promise。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">  <span class="title function_">prompting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Have Yeoman greet the user.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="title function_">yosay</span>(</span><br><span class="line">      <span class="string">&#x27;Welcome to the awe-inspiring &#x27;</span> + chalk.<span class="title function_">red</span>(<span class="string">&#x27;generator-downloads&#x27;</span>) + <span class="string">&#x27; generator!&#x27;</span></span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> prompts = [&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;someAnswer&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Would you like to enable this option?&#x27;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">prompt</span>(prompts).<span class="title function_">then</span>(<span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// To access props later use this.props.someAnswer;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>做一些适当的修改，实现更通用的脚手架。可以查阅<a href="http://yeoman.io/generator/">API</a></p>
<ul>
<li><code>this.appname</code>: 获取当前文件夹名称</li>
<li><code>this.user.git.name()</code>: 获取全局<code>git</code>用户名</li>
<li><code>this.user.git.email()</code>: 获取全局<code>git</code>邮箱</li>
<li><code>this.github.username()</code>: 获取<code>github</code>用户名</li>
</ul>
<p>定义对象中的<code>type</code>，管理交互方式。使用<code>input</code>实现控制台输入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line"><span class="attr">default</span>: <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">git</span>.<span class="title function_">name</span>()</span><br></pre></td></tr></table></figure>

<p>这样便实现了让用户输入作者名称，默认为git全局配置的用户名。然后在其他配置中使用<code>this.props.author</code>实现获取用户输入。</p>
<h2 id="writing"><a href="#writing" class="headerlink" title="writing"></a>writing</h2><p><code>Generators</code>在<code>this.fs</code>暴露了所有的文件的方法，这是一个实例，<a href="https://github.com/sboudrias/mem-fs-editor">mem-fs editor</a> - 确保为所有可获得的方法选择<a href="https://github.com/sboudrias/mem-fs-editor">模块文件</a>。</p>
<p>值得注意的是，通过<code>this.fs</code>暴露<code>commit</code>，你不应该在你的<code>generator</code>去调用它。<code>Yeoman</code>在运行循环的冲突阶段结束后，在内部调用它。</p>
<h3 id="复制一个模板文件"><a href="#复制一个模板文件" class="headerlink" title="复制一个模板文件"></a>复制一个模板文件</h3><p>例如：<code>./templates/index.html</code>的文件内容是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，我们将使用<a href="https://github.com/sboudrias/mem-fs-editor#copyfrom-to-options">copyTpl</a>方法去复制作为模板的处理中的文件。<code>copyTpl</code>使用的是<a href="http://ejs.co/">ejs</a> 模板引擎。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">  <span class="title function_">writing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fs</span>.<span class="title function_">copy</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">templatePath</span>(<span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">destinationPath</span>(<span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">      &#123; <span class="attr">title</span>: <span class="string">&#x27;Templating with Yeoman&#x27;</span> &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一旦generator运行成功，<code>index.html</code>将会包含：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Templating with Yeoman<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>json</code>也同样适用上面的语法，配置<code>package.json</code>文件可以适应不同的项目。</p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p><code>install</code>方法设置在文件copy完成之后执行的命令，例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line"><span class="title function_">install</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">installDependencies</span>(&#123;</span><br><span class="line">      <span class="attr">bower</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">npm</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">yarn</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">callback</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">&#x27;Everything is ready!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>由于我们在本地开发，并不知道用起来怎么样，所以可以使用<code>npm link</code>命令，相当于在全局安装了此脚手架，然后在新文件夹中执行<code>yo</code>，选择脚手架，便可以测试</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><code>generator-test/package.json</code>中的<code>name</code>要在<a href="https://www.npmjs.com/">https://www.npmjs.com/</a>没被创建过，才可以发布。</p>
<p>发布需要一个<code>npm</code>的账号，如果没有使用<code>npm adduser</code>创建；</p>
<p>如果已有账号，运行<code>npm login</code>登陆。</p>
<p>在项目根目录下，运行<code>npm publish</code>就可以发布了。如果更新后重新发布，注意修改根目录下的<code>package.json</code>文件中的版本号。</p>
<p>使用<code>npm unpublish 包名</code>命令可以撤销发布，只有在发包的24小时内才允许撤销发布的包。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker部署Hexo博客</title>
    <url>/2020/03/18/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>经常迁移博客是件头疼的事，每次都要折腾一堆文件，所以折腾了一下，使用docker部署博客。</p>
<p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/vertical-logo-monochromatic-1.png"></p>
<span id="more"></span>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>创建 <code>DockerFile</code></p>
<blockquote>
<p>配置中的路径根据自己实际路径调整</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:6</span><br><span class="line">ENV container docker</span><br><span class="line"></span><br><span class="line"># 添加环境</span><br><span class="line">RUN yum -y update &amp;&amp;\</span><br><span class="line">    yum -y install epel-release &amp;&amp;\</span><br><span class="line">    yum -y install nginx &amp;&amp;\</span><br><span class="line">    yum -y install vim &amp;&amp;\</span><br><span class="line">    yum install passwd openssl openssh-server openssh-clients -y &amp;&amp;\</span><br><span class="line">    yum install initscripts -y</span><br><span class="line"></span><br><span class="line"># 更新源，用于安装 git 2.x，修复 --work-tree 不能和 --git-dir 同名问题</span><br><span class="line">RUN yum -y install wget &amp;&amp;\</span><br><span class="line">    wget http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm &amp;&amp;\</span><br><span class="line">    rpm -ivh wandisco-git-release-6-1.noarch.rpm &amp;&amp;\</span><br><span class="line">    yum -y install git</span><br><span class="line"></span><br><span class="line"># 安装zsh</span><br><span class="line">RUN yum install -y zsh &amp;&amp;\</span><br><span class="line">    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">RUN mkdir -p /home/blog</span><br><span class="line">WORKDIR /home</span><br><span class="line"></span><br><span class="line"># 添加 blog git钩子</span><br><span class="line">RUN git init --bare blog.git</span><br><span class="line">RUN echo -e &#x27;#!/bin/bash\ngit --work-tree=/home/blog --git-dir=/home/blog.git checkout -f&#x27; &gt;&gt; blog.git/hooks/post-receive</span><br><span class="line">RUN chmod +x blog.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line"># 创建日志文件</span><br><span class="line">RUN mkdir -p /home/log</span><br><span class="line">WORKDIR /home/log</span><br><span class="line">RUN touch blog.log</span><br><span class="line"></span><br><span class="line"># 配置 nginx</span><br><span class="line">WORKDIR /etc/nginx</span><br><span class="line">COPY ./nginx ./conf.d</span><br><span class="line"># 解决执行 nginx 报错</span><br><span class="line">RUN nginx -c /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"># 导入自动执行脚本</span><br><span class="line">COPY ./start.sh /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># 切换工作目录</span><br><span class="line">WORKDIR /home</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">CMD /root/start.sh</span><br><span class="line"></span><br><span class="line"># 端口，使用81 端口避免和 nginx默认端口冲突</span><br><span class="line"># 22 端口为 ssh 所用</span><br><span class="line">EXPOSE 9022:22 9081:81</span><br></pre></td></tr></table></figure>

<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 81;</span><br><span class="line">    server_name i.jakeyu.top;</span><br><span class="line">    # 处理 nginx 自动 301 加斜杠以及端口问题</span><br><span class="line">    server_name_in_redirect on;</span><br><span class="line">    port_in_redirect off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/blog;</span><br><span class="line">        error_page   404 https://i.jakeyu.top/404.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log  /home/log/blog.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 sshd 服务</span></span><br><span class="line">service sshd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止容器退出</span></span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure>

<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>在 <code>DockerFile</code> 所在目录执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t blog:v1 .</span><br></pre></td></tr></table></figure>

<h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -ti -d -p 9081:81 -p 9022:22 blog:v1</span><br></pre></td></tr></table></figure>

<h1 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h1><p>查看所有容器，找到想要配置的 <code>container id</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti [container <span class="built_in">id</span>] /bin/zsh</span><br></pre></td></tr></table></figure>

<p>把宿主机的 <code>~/.ssh/id_rsa.pub</code> 文件 copy 到容器 <code>~/.ssh/authorized_keys</code> 中</p>
<p>重启ssh服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改 Hexo 博客的配置文件 <code>_config.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    ssh: ssh://root@ip:port/home/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>把 <code>ip</code> 和 <code>port</code> 换成和自己相对应的，比如在这里 <code>port</code> 就是 <code>9022</code>。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>使用 <code>curl</code> 测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:81</span><br></pre></td></tr></table></figure>

<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><h2 id="批量删除容器"><a href="#批量删除容器" class="headerlink" title="批量删除容器"></a>批量删除容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">rm</span> $(docker container <span class="built_in">ls</span> -a -q)</span><br></pre></td></tr></table></figure>

<h2 id="批量删除镜像"><a href="#批量删除镜像" class="headerlink" title="批量删除镜像"></a>批量删除镜像</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> $(docker  image  <span class="built_in">ls</span>   -a  -q)</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/">Hexo博客部署到服务器</a></li>
<li><a href="https://blog.52itstyle.vip/archives/2402/">Docker学习之SSH连接docker容器</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>元素旋转90度后居中</title>
    <url>/2018/03/11/%E5%85%83%E7%B4%A0%E6%97%8B%E8%BD%AC90%E5%BA%A6%E5%90%8E%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner rotate&quot;</span>&gt;</span>Centered?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>div.outer是一个窄垂直条。 div.inner旋转90度。我想要文本居中？出现在其容器div.outer中心。不确定div.outer的大小。</p>
<p data-height="265" data-theme-id="light" data-slug-hash="qodqzq" data-default-tab="css,result" data-user="JakeLaoyu" data-embed-version="2" data-pen-title="qodqzq" class="codepen">See the Pen <a href="https://codepen.io/JakeLaoyu/pen/qodqzq/">qodqzq</a> by Jake (<a href="https://codepen.io/JakeLaoyu">@JakeLaoyu</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

<span id="more"></span>

<p>关键是将顶部和左边的位置设置为50％，然后将transformX和transformY设置为-50％。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rotate</span> &#123;  </span><br><span class="line">    <span class="attribute">transform</span>:  <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>原文地址 <a href="https://codeday.me/bug/20171009/83576.html">https://codeday.me/bug/20171009/83576.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>兼容前后端共用模块代码(摘自《深入浅出Node.js》)</title>
    <url>/2017/09/14/%E5%85%BC%E5%AE%B9%E5%89%8D%E5%90%8E%E7%AB%AF%E5%85%B1%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="模块的侧重点"><a href="#模块的侧重点" class="headerlink" title="模块的侧重点"></a>模块的侧重点</h2><p>前后端JavaScript分别搁置在HTTP的两端，它们扮演的角色并不同。浏览器端的JavaScript需要经历从同一个服务器端分发到多个客户端执行，而服务器端JavaScript则是相同的代码需要多次执行。前者的瓶颈在于带宽，后者的瓶颈则在于CPU和内存等资源。前者需要通过网络加载代码，后者从磁盘中加载，两者的加载速度不在一个数量级上。</p>
<span id="more"></span>

<p>纵观Node的模块引入过程，几乎全都是同步的。尽管与Node强调异步的行为有些相反，但它是合理的。但是如果前端模块也采用同步的方式来引入，那将会在用户体验上造成很大的问题。UI在初始化过程中需要花费很多时间来等待脚本加载完成。</p>
<p>鉴于网络的原因，CommonJS为后端JavaScript制定的规范并不完全适合前端的应用场景。经过一段争执之后，AMD规范最终在前端应用场景中胜出。它的全称是Asynchronous Module Definition，即是“异步模块定义”，详见<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">https://github.com/amdjs/amdjs-api/wiki/AMD</a>。除此之外，还有玉伯定义的CMD规范。</p>
<h2 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h2><p>AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure>

<p>它的模块<code>id</code>和<code>依赖</code>是可选的，与Node模块相似的地方在于<code>factory</code>的内容就是实际代码的内容。下面的代码定义了一个简单的模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello from module: &#x27;</span> + <span class="variable language_">module</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不同之处在于AMD模块需要用<code>define</code>来明确定义一个模块，而在Node实现中是隐式包装的，它们的目的是进行作用域隔离，仅在需要的时候被引入，避免掉过去那种通过全局变量或者全局命名空间的方式，以免变量污染和不小心被修改。另一个区别则是内容需要通过返回的方式实现导出。</p>
<h2 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h2><p>CMD规范由国内的玉伯提出，与AMD规范的主要区别在于定义模块和依赖引入的部分。AMD需要在声明模块的时候指定所有的依赖，通过形参传递依赖到模块内容中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;dep1&#x27;</span>, <span class="string">&#x27;dep2&#x27;</span>], <span class="keyword">function</span> (<span class="params">dep1, dep2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>与AMD模块规范相比，CMD模块更接近于Node对CommonJS规范的定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(factory);</span><br></pre></td></tr></table></figure>
<p>在依赖部分，CMD支持动态引入，示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="comment">// The module code goes here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>require、exports</code>和<code>module</code>通过形参传递给模块，在需要依赖模块时，随时调用<code>require()</code>引入即可。</p>
<h2 id="兼容多种模块规范"><a href="#兼容多种模块规范" class="headerlink" title="兼容多种模块规范"></a>兼容多种模块规范</h2><p>为了让同一个模块可以运行在前后端，在写作过程中需要考虑兼容前端也实现了模块规范的环境。为了保持前后端的一致性，类库开发者需要将类库代码包装在一个闭包内。以下代码演示如何将<code>hello()</code>方法定义到不同的运行环境中，它能够兼容<code>Node</code>、<code>AMD</code>、<code>CMD</code>以及常见的浏览器环境中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params">name, definition</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测上下文环境是否为AMD或CMD</span></span><br><span class="line">  <span class="keyword">var</span> hasDefine = <span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">    <span class="comment">// 检查上下文环境是否为Node</span></span><br><span class="line">    hasExports = <span class="keyword">typeof</span> <span class="variable language_">module</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasDefine) &#123;</span><br><span class="line">    <span class="comment">// AMD环境或CMD环境</span></span><br><span class="line">    <span class="title function_">define</span>(definition);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasExports) &#123;</span><br><span class="line">    <span class="comment">// 定义为普通Node模块</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">definition</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 将模块的执行结果挂在window变量中，在浏览器中this指向window对象</span></span><br><span class="line">    <span class="variable language_">this</span>[name] = <span class="title function_">definition</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="string">&#x27;hello&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> hello = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> hello;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>摘自《深入浅出Node.js》: 2.7　前后端共用模块</p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>分别使用text-stroke和text-shadow为文本描边</title>
    <url>/2016/04/26/%E5%88%86%E5%88%AB%E4%BD%BF%E7%94%A8text-stroke%E5%92%8Ctext-shadow%E4%B8%BA%E6%96%87%E6%9C%AC%E6%8F%8F%E8%BE%B9/</url>
    <content><![CDATA[<p>文本描边</p>
<span id="more"></span>
<h2 id="使用text-stroke属性"><a href="#使用text-stroke属性" class="headerlink" title="使用text-stroke属性"></a>使用text-stroke属性</h2><p>目前text-stroke仅支持webkit内核的浏览器，所以格式为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-text-stroke:<span class="number">1px</span> black; //描边宽度 描边颜色</span><br><span class="line">-webkit-text-fill-<span class="attribute">color</span>:white;    //为文本填充颜色</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试text-stroke属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">  -webkit-text-stroke: <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">  -webkit-text-fill-<span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<h2 id="使用text-shadow属性"><a href="#使用text-shadow属性" class="headerlink" title="使用text-shadow属性"></a>使用text-shadow属性</h2><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试text-stroke属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-shadow</span>:-<span class="number">2px</span> -<span class="number">2px</span> <span class="number">1px</span> black,  </span></span><br><span class="line"><span class="language-css">              <span class="number">2px</span> -<span class="number">2px</span> <span class="number">1px</span> black,</span></span><br><span class="line"><span class="language-css">              -<span class="number">2px</span>  <span class="number">2px</span> <span class="number">1px</span> black,</span></span><br><span class="line"><span class="language-css">              <span class="number">2px</span>  <span class="number">2px</span> <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端解决跨域问题的8种方案</title>
    <url>/2016/12/02/%E5%89%8D%E7%AB%AF%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://www.cnblogs.com/JChen666/p/3399951.html">原文</a></p>
</blockquote>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><table>
<thead>
<tr>
<th>URL</th>
<th>说明</th>
<th>是否允许通信</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.a.com/a.js">http://www.a.com/a.js</a><br/><a href="http://www.a.com/b.js">http://www.a.com/b.js</a></td>
<td>同一域名下</td>
<td>允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/lab/a.js">http://www.a.com/lab/a.js</a><br/><a href="http://www.a.com/script/b.js">http://www.a.com/script/b.js</a></td>
<td>同一域名下不同文件夹</td>
<td>允许</td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js">http://www.a.com:8000/a.js</a><br/><a href="http://www.a.com/b.js">http://www.a.com/b.js</a></td>
<td>同一域名，不同端口</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js">http://www.a.com/a.js</a><br/><a href="https://www.a.com/b.js">https://www.a.com/b.js</a></td>
<td>同一域名，不同协议</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js">http://www.a.com/a.js</a><br/><a href="http://70.32.92.74/b.js">http://70.32.92.74/b.js</a></td>
<td>域名和域名对应ip</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js">http://www.a.com/a.js</a><br/><a href="http://script.a.com/b.js">http://script.a.com/b.js</a></td>
<td>主域相同，子域不同</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js">http://www.a.com/a.js</a><br/><a href="http://a.com/b.js">http://a.com/b.js</a></td>
<td>同一域名，不同二级域名（同上）</td>
<td>不允许（cookie这种情况下也不允许访问）</td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/a.js">http://www.cnblogs.com/a.js</a><br/><a href="http://www.a.com/b.js">http://www.a.com/b.js</a></td>
<td>不同域名</td>
<td>不允许</td>
</tr>
</tbody></table>
<ul>
<li>特别注意<ul>
<li>如果是协议和端口造成的跨域问题“前台”是无能为力的，</li>
<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。</li>
</ul>
</li>
</ul>
<p>“URL的首部”指<code>window.location.protocol +window.location.host</code>，也可以理解为“Domains, protocols and ports must match”。</p>
<h2 id="前端解决跨域问题"><a href="#前端解决跨域问题" class="headerlink" title="前端解决跨域问题"></a>前端解决跨域问题</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS背后的思想，就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>
<h4 id="IE中对CORS的实现是xdr"><a href="#IE中对CORS的实现是xdr" class="headerlink" title="IE中对CORS的实现是xdr"></a>IE中对CORS的实现是xdr</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> <span class="title class_">XDomainRequest</span>();</span><br><span class="line">xdr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xdr.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br><span class="line">xdr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span><br><span class="line">......</span><br><span class="line">xdr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="其它浏览器中的实现就在xhr中"><a href="#其它浏览器中的实现就在xhr中" class="headerlink" title="其它浏览器中的实现就在xhr中"></a>其它浏览器中的实现就在xhr中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr =  <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">304</span> || xhr.<span class="property">status</span> == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span><br><span class="line">......</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="实现跨浏览器的CORS"><a href="#实现跨浏览器的CORS" class="headerlink" title="实现跨浏览器的CORS"></a>实现跨浏览器的CORS</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCORS</span>(<span class="params">method, url</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;withCredentials&#x27;</span> <span class="keyword">in</span> xhr)&#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">XDomainRequest</span> != <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XDomainRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(method, url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request = <span class="title function_">createCORS</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(request)&#123;</span><br><span class="line">    request.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;;</span><br><span class="line">    request.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关于更详细的CORS讲解"><a href="#关于更详细的CORS讲解" class="headerlink" title="关于更详细的CORS讲解"></a>关于更详细的CORS讲解</h4><ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors">跨域资源共享 CORS 详解–阮一峰</a></li>
<li><a href="https://qiutc.me/post/cross-domain-collections.html">前端跨域的整理</a></li>
</ul>
<h3 id="document-domain-iframe-只有在主域相同的时候才能使用该方法"><a href="#document-domain-iframe-只有在主域相同的时候才能使用该方法" class="headerlink" title="document.domain + iframe(只有在主域相同的时候才能使用该方法)"></a>document.domain + iframe(只有在主域相同的时候才能使用该方法)</h3><p>在<a href="http://www.a.com/a.html%E4%B8%AD">www.a.com/a.html中</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;a.com&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">ifr.<span class="property">src</span> = <span class="string">&#x27;http://www.script.a.com/b.html&#x27;</span>;</span><br><span class="line">ifr.<span class="property">display</span> = none;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifr);</span><br><span class="line">ifr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> doc = ifr.<span class="property">contentDocument</span> || ifr.<span class="property">contentWindow</span>.<span class="property">document</span>;</span><br><span class="line">    <span class="comment">//在这里操作doc，也就是b.html</span></span><br><span class="line">    ifr.<span class="property">onload</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在<a href="http://www.script.a.com/b.html%E4%B8%AD%EF%BC%9A">www.script.a.com/b.html中：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;a.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="动态创建script"><a href="#动态创建script" class="headerlink" title="动态创建script"></a>动态创建script</h3><p>这个没什么好说的，因为script标签不受同源策略的限制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, func</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> head = <span class="variable language_">document</span>.<span class="property">head</span> || <span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  script.<span class="property">src</span> = url;</span><br><span class="line"></span><br><span class="line">  script.<span class="property">onload</span> = script.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">readyState</span> || <span class="variable language_">this</span>.<span class="property">readyState</span>==<span class="string">&#x27;loaded&#x27;</span> || <span class="variable language_">this</span>.<span class="property">readyState</span>==<span class="string">&#x27;complete&#x27;</span>)&#123;</span><br><span class="line">      <span class="title function_">func</span>();</span><br><span class="line">      script.<span class="property">onload</span> = script.<span class="property">onreadystatechange</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  head.<span class="title function_">insertBefore</span>(script, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">baidu</span> = &#123;</span><br><span class="line">  <span class="attr">sug</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadScript</span>(<span class="string">&#x27;http://suggestion.baidu.com/su?wd=w&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;loaded&#x27;</span>)&#125;);</span><br><span class="line"><span class="comment">//我们请求的内容在哪里？</span></span><br><span class="line"><span class="comment">//我们可以在chorme调试面板的source中看到script引入的内容</span></span><br></pre></td></tr></table></figure>

<h3 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h3><p>原理是利用location.hash来进行传值。</p>
<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。</p>
<ol>
<li>cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面</li>
<li>cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据</li>
<li>同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值</li>
</ol>
<blockquote>
<p>注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe</p>
</blockquote>
<p>代码如下：</p>
<p>先是a.com下的文件cs1.html文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">    ifr.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    ifr.<span class="property">src</span> = <span class="string">&#x27;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkHash</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data = location.<span class="property">hash</span> ? location.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">console</span>.<span class="property">log</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Now the data is &#x27;</span>+data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(checkHash, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<p>cnblogs.com域名下的cs2.html:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟一个简单的参数处理操作</span></span><br><span class="line"><span class="keyword">switch</span>(location.<span class="property">hash</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;#paramdo&#x27;</span>:</span><br><span class="line">        <span class="title function_">callBack</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;#paramset&#x27;</span>:</span><br><span class="line">        <span class="comment">//do something……</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callBack</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        parent.<span class="property">location</span>.<span class="property">hash</span> = <span class="string">&#x27;somedata&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></span><br><span class="line">        <span class="comment">// 所以要利用一个中间的cnblogs域下的代理iframe</span></span><br><span class="line">        <span class="keyword">var</span> ifrproxy = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">        ifrproxy.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        ifrproxy.<span class="property">src</span> = <span class="string">&#x27;http://a.com/test/cscript/cs3.html#somedata&#x27;</span>;    <span class="comment">// 注意该文件在&quot;a.com&quot;域下</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifrproxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a.com下的域名cs3.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值</span></span><br><span class="line">parent.<span class="property">parent</span>.<span class="property">location</span>.<span class="property">hash</span> = self.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h3><p><code>window.name</code> 的美妙之处：<code>name</code> 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>
<ol>
<li>创建a.com&#x2F;cs1.html</li>
<li>创建a.com&#x2F;proxy.html，并加入如下代码:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">url, func</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> isFirst = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        loadFunc = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(isFirst)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ifr.<span class="property">contentWindow</span>.<span class="property">location</span> = <span class="string">&#x27;http://a.com/cs1.html&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            isFirst = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">func</span>(ifr.<span class="property">contentWindow</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ifr.<span class="property">contentWindow</span>.<span class="title function_">close</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(ifr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ifr.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ifr = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ifr.<span class="property">src</span> = url;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ifr.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(ifr.<span class="property">attachEvent</span>) ifr.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onload&#x27;</span>, loadFunc);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">else</span> ifr.<span class="property">onload</span> = loadFunc;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">proxy</span>(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在b.com&#x2F;cs1.html中包含：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;要传送的内容&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="postMessage（HTML5中的XMLHttpRequest-Level-2中的API）"><a href="#postMessage（HTML5中的XMLHttpRequest-Level-2中的API）" class="headerlink" title="postMessage（HTML5中的XMLHttpRequest Level 2中的API）"></a>postMessage（HTML5中的XMLHttpRequest Level 2中的API）</h3><p>a.com&#x2F;index.html中的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;ifr&quot;</span> src=<span class="string">&quot;b.com/index.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ifr&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> targetOrigin = <span class="string">&#x27;http://b.com&#x27;</span>;  <span class="comment">// 若写成&#x27;http://b.com/c/proxy.html&#x27;效果一样</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                        <span class="comment">// 若写成&#x27;http://c.com&#x27;就不会执行postMessage了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ifr.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;I was there!&#x27;</span>, targetOrigin);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>b.com&#x2F;index.html中的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="comment">// 通过origin属性判断消息来源地址</span></span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">origin</span> == <span class="string">&#x27;http://a.com&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(event.<span class="property">data</span>);    <span class="comment">// 弹出&quot;I was there!&quot;</span></span><br><span class="line">            <span class="title function_">alert</span>(event.<span class="property">source</span>);  <span class="comment">// 对a.com、index.html中window对象的引用</span></span><br><span class="line">                                  <span class="comment">// 但由于同源策略，这里event.source不可以访问window对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP包含两部分：<code>回调函数</code>和<code>数据</code>。</p>
<p>回调函数是当响应到来时要放在当前页面被调用的函数。</p>
<p>数据就是传入回调函数中的json数据，也就是回调函数的参数了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">response</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The responsed data is: &#x27;</span>+response.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://www.baidu.com/json/?callback=handleResponse&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(script, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>);</span><br><span class="line"><span class="comment">/*handleResonse(&#123;&quot;data&quot;: &quot;zhe&quot;&#125;)*/</span></span><br><span class="line"><span class="comment">//原理如下：</span></span><br><span class="line"><span class="comment">//当我们通过script标签请求时</span></span><br><span class="line"><span class="comment">//后台就会根据相应的参数(json,handleResponse)</span></span><br><span class="line"><span class="comment">//来生成相应的json数据(handleResponse(&#123;&quot;data&quot;: &quot;zhe&quot;&#125;))</span></span><br><span class="line"><span class="comment">//最后这个返回的json数据(代码)就会被放在当前js文件中被执行</span></span><br><span class="line"><span class="comment">//至此跨域通信完成</span></span><br></pre></td></tr></table></figure>

<p> jsonp虽然很简单，但是有如下缺点：</p>
<ul>
<li>安全问题(请求代码中可能存在安全隐患)</li>
<li>要确定jsonp请求是否失败并不容易</li>
</ul>
<h3 id="web-sockets"><a href="#web-sockets" class="headerlink" title="web sockets"></a>web sockets</h3><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>
<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。</p>
<p>只有在支持web socket协议的服务器上才能正常工作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSockt</span>(<span class="string">&#x27;ws://www.baidu.com&#x27;</span>);<span class="comment">//http-&gt;ws; https-&gt;wss</span></span><br><span class="line">socket.<span class="title function_">send</span>(<span class="string">&#x27;hello WebSockt&#x27;</span>);</span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>方案</tag>
      </tags>
  </entry>
  <entry>
    <title>利用CSS、JavaScript及Ajax实现图片预加载</title>
    <url>/2016/11/28/%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<blockquote>
<p>原文：<a href="https://perishablepress.com/3-ways-preload-images-css-javascript-ajax/">3 Ways to Preload Images with CSS, JavaScript, or Ajax</a> </p>
</blockquote>
<p>预加载图片是提高用户体验的一个很好方法。图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。本文将分享三个不同的预加载技术，来增强网站的性能与可用性。</p>
<h2 id="用CSS和JavaScript实现预加载"><a href="#用CSS和JavaScript实现预加载" class="headerlink" title="用CSS和JavaScript实现预加载"></a>用CSS和JavaScript实现预加载</h2><p>单纯的使用css可以将图片加载到页面元素的背景上，这种方法简单、高效：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#preload-01</span> &#123; <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://domain.tld/image-01.png</span>) no-repeat -<span class="number">9999px</span> -<span class="number">9999px</span>; &#125;</span><br><span class="line"><span class="selector-id">#preload-02</span> &#123; <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://domain.tld/image-02.png</span>) no-repeat -<span class="number">9999px</span> -<span class="number">9999px</span>; &#125;</span><br><span class="line"><span class="selector-id">#preload-03</span> &#123; <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://domain.tld/image-03.png</span>) no-repeat -<span class="number">9999px</span> -<span class="number">9999px</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>将这三个ID选择器应用到(X)HTML元素中，我们便可通过CSS的background属性将图片预加载到屏幕外的背景上。只要这些图片的路径保持不变，当它们在Web页面的其他地方被调用时，浏览器就会在渲染过程中使用预加载（缓存）的图片。简单、高效，不需要任何JavaScript。</p>
<blockquote>
<p>弊端：该方法虽然高效，但仍有改进余地。使用该法加载的图片会同页面的其他内容一起加载，增加了页面的整体加载时间。为了解决这个问题，我们增加了一些JavaScript代码，来推迟预加载的时间，直到页面加载完毕。代码如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preloader</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">getElementById</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;preload-01&quot;</span>).<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;url(http://domain.tld/image-01.png) no-repeat -9999px -9999px&quot;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;preload-02&quot;</span>).<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;url(http://domain.tld/image-02.png) no-repeat -9999px -9999px&quot;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;preload-03&quot;</span>).<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;url(http://domain.tld/image-03.png) no-repeat -9999px -9999px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addLoadEvent</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> oldonload = <span class="variable language_">window</span>.<span class="property">onload</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onload</span> != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = func;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldonload) &#123;</span><br><span class="line">                <span class="title function_">oldonload</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addLoadEvent</span>(preloader);</span><br></pre></td></tr></table></figure>

<p>在该脚本的第一部分，我们获取使用类选择器的元素，并为其设置了background属性，以预加载不同的图片。</p>
<p>该脚本的第二部分，我们使用addLoadEvent()函数来延迟preloader()函数的加载时间，直到页面加载完毕。</p>
<p>如果JavaScript无法在用户的浏览器中正常运行，会发生什么？很简单，图片不会被预加载，当页面调用图片时，正常显示即可。</p>
<h2 id="使用JavaScript实现"><a href="#使用JavaScript实现" class="headerlink" title="使用JavaScript实现"></a>使用JavaScript实现</h2><p>上述方法有时确实很高效，但我们逐渐发现它在实际实现过程中会耗费太多时间。相反，我更喜欢使用纯JavaScript来实现图片的预加载。下面将提供两种这样的预加载方法，它们可以很漂亮地工作于所有现代浏览器之上。</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>只需简单编辑、加载所需要图片的路径与名称即可，很容易实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> images = <span class="keyword">new</span> <span class="title class_">Array</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">function</span> <span class="title function_">preload</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; preload.<span class="property">arguments</span>.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    images[i] = <span class="keyword">new</span> <span class="title class_">Image</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    images[i].<span class="property">src</span> = preload.<span class="property">arguments</span>[i]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">preload</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&quot;http://domain.tld/gallery/image-001.jpg&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&quot;http://domain.tld/gallery/image-002.jpg&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&quot;http://domain.tld/gallery/image-003.jpg&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            )</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>该方法尤其适用预加载大量的图片。我的画廊网站使用该技术，预加载图片数量达50多张。将该脚本应用到登录页面，只要用户输入登录帐号，大部分画廊图片将被预加载。 </p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>该方法与上面的方法类似，也可以预加载任意数量的图片。将下面的脚本添加入任何Web页中，根据程序指令进行编辑即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">images</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                img1 = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                img2 = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                img3 = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                img1.<span class="property">src</span> = <span class="string">&quot;http://domain.tld/path/to/image-001.gif&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                img2.<span class="property">src</span> = <span class="string">&quot;http://domain.tld/path/to/image-002.gif&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                img3.<span class="property">src</span> = <span class="string">&quot;http://domain.tld/path/to/image-003.gif&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>正如所看见，每加载一个图片都需要创建一个变量，如“img1 &#x3D; new Image();”，及图片源地址声明，如“img3.src &#x3D; “..&#x2F;path&#x2F;to&#x2F;image-003.gif”;”。参考该模式，你可根据需要加载任意多的图片。</p>
<p>我们又对该方法进行了改进。将该脚本封装入一个函数中，并使用 addLoadEvent（），延迟预加载时间，直到页面加载完毕。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preloader</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">images</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> img1 = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        <span class="keyword">var</span> img2 = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        <span class="keyword">var</span> img3 = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img1.<span class="property">src</span> = <span class="string">&quot;http://domain.tld/path/to/image-001.gif&quot;</span>;</span><br><span class="line">        img2.<span class="property">src</span> = <span class="string">&quot;http://domain.tld/path/to/image-002.gif&quot;</span>;</span><br><span class="line">        img3.<span class="property">src</span> = <span class="string">&quot;http://domain.tld/path/to/image-003.gif&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addLoadEvent</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> oldonload = <span class="variable language_">window</span>.<span class="property">onload</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onload</span> != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = func;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldonload) &#123;</span><br><span class="line">                <span class="title function_">oldonload</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addLoadEvent</span>(preloader);</span><br></pre></td></tr></table></figure>

<h2 id="使用Ajax"><a href="#使用Ajax" class="headerlink" title="使用Ajax"></a>使用Ajax</h2><p>上面所给出的方法似乎不够酷，那现在来看一个使用Ajax实现图片预加载的方法。该方法利用DOM，不仅仅预加载图片，还会预加载CSS、JavaScript等相关的东西。使用Ajax，比直接使用JavaScript，优越之处在于JavaScript和CSS的加载不会影响到当前页面。该方法简洁、高效。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// XHR to request a JS and a CSS</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://domain.tld/preload.js&#x27;</span>);</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://domain.tld/preload.css&#x27;</span>);</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// preload image</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span> = <span class="string">&quot;http://domain.tld/preload.png&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码预加载了“preload.js”、“preload.css”和“preload.png”。1000毫秒的超时是为了防止脚本挂起，而导致正常页面出现功能问题。</p>
<p>下面，我们看看如何用JavaScript来实现该加载过程：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// reference to &lt;head&gt;</span></span><br><span class="line">        <span class="keyword">var</span> head = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// a new CSS</span></span><br><span class="line">        <span class="keyword">var</span> css = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">        css.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        css.<span class="property">rel</span>  = <span class="string">&quot;stylesheet&quot;</span>;</span><br><span class="line">        css.<span class="property">href</span> = <span class="string">&quot;http://domain.tld/preload.css&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// a new JS</span></span><br><span class="line">        <span class="keyword">var</span> js  = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">        js.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">        js.<span class="property">src</span>  = <span class="string">&quot;http://domain.tld/preload.js&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// preload JS and CSS</span></span><br><span class="line">        head.<span class="title function_">appendChild</span>(css);</span><br><span class="line">        head.<span class="title function_">appendChild</span>(js);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// preload image</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span> = <span class="string">&quot;http://domain.tld/preload.png&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里，我们通过DOM创建三个元素来实现三个文件的预加载。正如上面提到的那样，使用Ajax，加载文件不会应用到加载页面上。从这点上看，Ajax方法优越于JavaScript。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>方案</tag>
      </tags>
  </entry>
  <entry>
    <title>在相等比较中使用 Object.is()让结果更准确</title>
    <url>/2018/08/14/%E5%9C%A8%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Object-is-%E8%AE%A9%E7%BB%93%E6%9E%9C%E6%9B%B4%E5%87%86%E7%A1%AE/</url>
    <content><![CDATA[<p>当在<code>JavaScript</code>中比较两个值时，可能习惯于使用<code>==</code>或<code>===</code>，我更喜欢后者，因为<code>==</code>存在强制类型转换。但是<code>===</code>也不完全准确。</p>
<span id="more"></span>

<p><img data-src="//blogimg.jakeyu.top/%E5%9C%A8%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E4%B8%AD%E4%BD%BF%E7%94%A8Object.is%E8%AE%A9%E7%BB%93%E6%9E%9C%E6%9B%B4%E5%87%86%E7%A1%AE/Jietu20180814-220057.png"></p>
<p>比较<code>NaN</code>需要使用<code>isNaN()</code>方法才可以正确检测 NaN。</p>
<p>ES6中引入了<code>Object.is()</code>方法来弥补全等运算符的不准确运算。这个方法接收两个参数，如果这两个参数类型相同且具有相同的值，则返回<code>true</code>。</p>
<p><img data-src="//blogimg.jakeyu.top/%E5%9C%A8%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E4%B8%AD%E4%BD%BF%E7%94%A8Object.is%E8%AE%A9%E7%BB%93%E6%9E%9C%E6%9B%B4%E5%87%86%E7%A1%AE/Jietu20180814-220601.png"></p>
<p>对于<code>Object.is()</code>方法来说，其运行结果大部分情况中与<code>===</code>运算符相同，唯一区别在于<code>+0</code>和<code>-0</code>被识别为不相等并且<code>NaN</code>与<code>NaN</code>等价。</p>
<p>放一张对比图:</p>
<p><img data-src="//blogimg.jakeyu.top/%E5%9C%A8%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E4%B8%AD%E4%BD%BF%E7%94%A8Object.is%E8%AE%A9%E7%BB%93%E6%9E%9C%E6%9B%B4%E5%87%86%E7%A1%AE/pCyqkLc.png"></p>
<p>参考</p>
<ul>
<li>深入理解ES6 – 作者: 【美】Nicholas C. Zakas</li>
<li><a href="http://www.jstips.co/zh_cn/javascript/why-you-should-use-Object.is(%29-in-equality-comparison/">为什么你应该在相等比较中使用 Object.is()</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>多行文本溢出显示省略号</title>
    <url>/2016/05/27/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
    <content><![CDATA[<p>大家都知道<code>text-overflow:ellipses</code>属性用来实现单行文本的溢出显示省略号(…)。当然部分浏览器还需要加<code>width</code>属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure>
<p>但这个属性并不支持多行文本溢出显示省略号，下面根据应用场景介绍几个方法来实现多行溢出显示省略号的效果</p>
<span id="more"></span>

<h3 id="WebKit浏览器或移动端的页面"><a href="#WebKit浏览器或移动端的页面" class="headerlink" title="WebKit浏览器或移动端的页面"></a>WebKit浏览器或移动端的页面</h3><p>在WebKit浏览器或移动端(绝大部分是WebKit内核的浏览器)的页面实现比较简单，可以直接使用WebKit的CSS扩展属性(Webkit是私有属性)<code>-webkit-line-clamp</code>;注意：这是一个不规范属性(<a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html">unsupport WebKit property</a>)，它没有出现在CSS规范草案中。<br><code>-webkit-line-clamp</code>用来限制在一个块元素显示文本的行数。为了实现该效果，它需要组合其他的Webkit属性。<br>常见结合属性：<br>1、<code>display:-webkit-box</code>必须结合的属性，将对象作为弹性伸缩盒子模型显示。<br>2、<code>-webkit-box-orient</code>必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式。<br>3、<code>text-overflow:ellipsis</code>，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span> : hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<p>遇到 <code>autoprefixer</code> 之后 <code>-webkit-box-orient</code> 消失的情况，可以使用: </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! autoprefixer: off */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"><span class="comment">/* autoprefixer: on */</span></span><br></pre></td></tr></table></figure>

<p>这个属性比较合适WebKit浏览器或移动端(绝大部分是WebKit内核的)。</p>
<p>具体例子可以查看<a href="http://www.css88.com/webkit/-webkit-line-clamp/">http://www.css88.com/webkit/-webkit-line-clamp/</a></p>
<h3 id="跨浏览器兼容的方案"><a href="#跨浏览器兼容的方案" class="headerlink" title="跨浏览器兼容的方案"></a>跨浏览器兼容的方案</h3><p>比较靠谱简单的做法就是设置相对定位的容器高度，用包含省略号(…)的元素模拟实现；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1.4em</span>;</span><br><span class="line">  <span class="comment">/* 3 times the line-height to show 3 lines */</span></span><br><span class="line">  <span class="attribute">height</span>:<span class="number">4.2em</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;...&quot;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span> <span class="number">1px</span> <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png</span>) repeat-y;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>看demo：</p>
<iframe height='265' scrolling='no' src='//codepen.io/JakeLaoyu/embed/bebPam/?height=265&theme-id=dark&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/JakeLaoyu/pen/bebPam/'>多行文本溢出省略号demo</a> by Jake (<a href='http://codepen.io/JakeLaoyu'>@JakeLaoyu</a>) on <a href='http://codepen.io'>CodePen</a>.
</iframe>

<p>这里注意几点：</p>
<p>1、height 高度正好是<code>line-height</code>的3倍；</p>
<p>2、结束的省略号用了半透明的png做了减淡的效果，或者设置背景颜色</p>
<p>3、IE6-7不显示<code>content</code>内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用<code>&lt;span class=&quot;line-clamp&quot;&gt;...&lt;/span&gt;</code>去模拟；</p>
<p>4、要支持IE8，需要将<code>::after</code>替换成<code>:after</code></p>
<h3 id="JavaScript方案"><a href="#JavaScript方案" class="headerlink" title="JavaScript方案"></a>JavaScript方案</h3><p>用js也可以根据上面的思路气模拟，实现也很简单，推荐几个做类似工作的成熟小工具：</p>
<h4 id="Clamp-js"><a href="#Clamp-js" class="headerlink" title="Clamp.js"></a>Clamp.js</h4><p>下载及文档地址：<a href="https://github.com/josephschmitt/Clamp.js">Clamp.js</a></p>
<p>使用也非常简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;clamp-this-module&quot;</span>);</span><br><span class="line">$clamp(<span class="variable language_">module</span>, &#123;<span class="attr">clamp</span>: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>DEMO:</p>
<iframe height='265' scrolling='no' src='//codepen.io/JakeLaoyu/embed/OXLeEo/?height=265&theme-id=dark&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/JakeLaoyu/pen/OXLeEo/'>多行文本溢出省略号demo-1</a> by Jake (<a href='http://codepen.io/JakeLaoyu'>@JakeLaoyu</a>) on <a href='http://codepen.io'>CodePen</a>.
</iframe>

<h4 id="jQuery插件-jQuery-dotdotdot"><a href="#jQuery插件-jQuery-dotdotdot" class="headerlink" title="jQuery插件-jQuery.dotdotdot"></a>jQuery插件-jQuery.dotdotdot</h4><p>这个使用起来也很方便：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="string">&quot;#wrapper&quot;</span>).<span class="title function_">dotdotdot</span>(&#123;</span><br><span class="line">		<span class="comment">//	configuration goes here</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下载及详细文档地址：</p>
<ol>
<li><a href="https://github.com/BeSite/jQuery.dotdotdot">jQuery.dotdotdot</a></li>
<li><a href="http://dotdotdot.frebsite.nl/">dotdotdot</a></li>
</ol>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul>
<li><a href="http://www.cssmojo.com/line-clamp_for_non_webkit-based_browsers/#what-can-we-do-across-browsers">line-clamp_for_non_webkit-based_browsers</a></li>
<li><a href="http://css-tricks.com/line-clampin/">line-clampin</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让页面适配各种机型</title>
    <url>/2016/04/18/%E5%A6%82%E4%BD%95%E8%AE%A9%E9%A1%B5%E9%9D%A2%E9%80%82%E9%85%8D%E5%90%84%E7%A7%8D%E6%9C%BA%E5%9E%8B/</url>
    <content><![CDATA[<p>大杀器rem</p>
<span id="more"></span>

<p>我们可以知道，页面主体中规中矩，分为两部分：上半部分是介绍页面，下半部分是主体界面，有一个点击按钮来负责全部用户交互，为了适配iphone4到6plus以及众多安卓，我们对整个页面的架构可以有如下几种方案：</p>
<h3 id="高度百分比"><a href="#高度百分比" class="headerlink" title="高度百分比"></a>高度百分比</h3><p>高度百分比方案——整个屏幕的主要高度高度都用百分比定位，比如介绍部分占高度的百分之30，点击抢红包部分占剩下的百分之70。</p>
<blockquote>
<p>优点——易于理解好上手<br>缺点——由于行内样式，行间样式和它们的父子元素具有复杂的宽高关系，因此内部，比如介绍部分的内部的诸多元素想必还要用到px，em等定位方式，因此不那么和谐和有保障，容易小屏溢出或者大屏留白。在这个页面表现为倒计时文字部分和帮谁谁谁砍价的部分难以控制。 </p>
</blockquote>
<h3 id="flex按列布局"><a href="#flex按列布局" class="headerlink" title="flex按列布局"></a>flex按列布局</h3><p>flex布局是一个很不错的方式：对于这个页面，我们可以有如下构想：对于介绍部分，用px或者em定位和布局，而对于剩下的部分则用flex让他填充好下边的空间，再用绝对定位让砍价按钮水平垂直都居中，简直丝滑。</p>
<blockquote>
<p>优点——丝滑。<br>缺点——要硬说有什么缺点的话，那么下端宽度不好控制算一个吧，试想这样构建出来的页面可能会在iphone4中下端一个按钮几乎占满，而在6普拉斯中则会有大量留白。 </p>
</blockquote>
<h3 id="大杀器rem"><a href="#大杀器rem" class="headerlink" title="大杀器rem"></a>大杀器rem</h3><p>我们知道在rem出来之前，em有着定位根为父元素的天然缺陷，比如在这样的页面中。<br><code>html&gt;body&gt;div.parent&gt;div.son</code><br>有这样的css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="selector-class">.parent</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">2em</span>;</span><br><span class="line">        <span class="selector-class">.son</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>:<span class="number">1em</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意以上css写法用了sass。html也简写了。</p>
<p>然后你猜son的字体是多少px？是20，没错。因为他的参照元素是.parent元素，而不是根，这样的话嵌套多了谁敢用em。</p>
<p>幸好rem的横空出现解决了这种问题：rem的参照物就是根元素的font-size，这让我们对于不同的页面有了设置全局标准的可能，大屏幕，我可以设置大的字体单位，小屏幕设置小的。一举解决了百分比定位和flex布局的遗留问题。</p>
<p>怎样确定字体单位呢？有两种方法，第一种比较优雅：媒体查询，我们可以用媒体查询看看浏览设备的宽高，然后设置一个合适的字体单位，另一种方法比较精确，那就是用js去算。</p>
<pre><code>body宽度document.body.clientWidth
body高度document.body.clientHeight
document.documentElement.clientWidth ==&gt; 可见区域宽度
document.documentElement.clientHeight ==&gt; 可见区域高度
</code></pre>
<p>计算方法是这样的，对于这个页面来说:</p>
<blockquote>
<p>假设：设计稿高度1500px，设计稿中介绍部分高度300px，倒计时字体大小40px，屏幕高度1000px。</p>
</blockquote>
<blockquote>
<p>第一步：计算单位：html的font-size &#x3D; 屏幕高度 &#x2F; 100  –&gt;10px;</p>
</blockquote>
<blockquote>
<p>第二步：介绍部分设置成高度30rem。</p>
</blockquote>
<blockquote>
<p>第三步：字体大小设置成4rem。</p>
</blockquote>
<p>啊哈，发现他的优点了嘛，没错，全局等比放大的适应。这就意味着，你在6plus里面能看的页面，在iphone4里面同样能看，而且不会因为屏幕小而发生元素交叠的情况，也不会因为屏幕大而出现留白的情况，是我目前最喜欢的一种表达方式。</p>
<blockquote>
<p>优点：做到了完美适配。</p>
</blockquote>
<blockquote>
<p>缺点：只是等比放大，小屏下字体小，大屏下字体大（不过从经验来讲，字体的大小并不明显，因为屏幕在那呢，看着也舒服）。</p>
</blockquote>
<blockquote>
<p>缺点反驳：我觉得只有一套设计稿，大小屏幕都兼顾完美是不可能的，因为你不知道什么时候该让一个字占用绝对20像素还是绝对是屏幕宽度的百分之五。如果要做到兼顾，也是可以的：用多套设计稿+css媒体查询为不同宽度的页面写好不同的css样式。</p>
</blockquote>
<h4 id="对于多屏页面。"><a href="#对于多屏页面。" class="headerlink" title="对于多屏页面。"></a>对于多屏页面。</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><p>在reset.css页面加入媒体查询来根据不同的宽度定好字体单位。</p>
<h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><p>大杀器rem</p>
<p>使用方法同上，不过上面是根据高度来确定字体单位，这里可以用宽度来确定字体单位。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>);</span><br><span class="line">html[<span class="number">0</span>].<span class="property">style</span>.<span class="property">fontSize</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>/<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>让页面在都完美显示算是我实习期间的研究之一，经过了比较，我还是用大杀器rem觉得比较方便一些，当然还有诸多方法值得尝试，比如rem+flex等等，如果有不当之处，还请各位前辈抨击，批评，丢石头给我，感谢前辈和同行的指点！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span> ==&gt; <span class="variable constant_">BODY</span>对象宽度</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> ==&gt; <span class="variable constant_">BODY</span>对象高度</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> ==&gt; 可见区域宽度</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> ==&gt; 可见区域高度</span><br><span class="line"></span><br><span class="line">网页可见区域宽： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span></span><br><span class="line">网页可见区域高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line">网页可见区域宽： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetWidth</span> (包括边线的宽)</span><br><span class="line">网页可见区域高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetHeight</span> (包括边线的高)</span><br><span class="line">网页正文全文宽： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollWidth</span></span><br><span class="line">网页正文全文高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span></span><br><span class="line">网页被卷去的高： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br><span class="line">网页被卷去的左： <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span></span><br><span class="line">网页正文部分上： <span class="variable language_">window</span>.<span class="property">screenTop</span></span><br><span class="line">网页正文部分左： <span class="variable language_">window</span>.<span class="property">screenLeft</span></span><br><span class="line">屏幕分辨率的高： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">height</span></span><br><span class="line">屏幕分辨率的宽： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">width</span></span><br><span class="line">屏幕可用工作区高度： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availHeight</span></span><br><span class="line">屏幕可用工作区宽度： <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availWidth</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 部分jQuery函数</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">height</span>() 　<span class="comment">//浏览器时下窗口可视区域高度 </span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">height</span>()　　　　<span class="comment">//浏览器时下窗口文档的高度 </span></span><br><span class="line">$(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">height</span>()　　　　　　<span class="comment">//浏览器时下窗口文档body的高度 </span></span><br><span class="line">$(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">outerHeight</span>(<span class="literal">true</span>)　<span class="comment">//浏览器时下窗口文档body的总高度 包括                                   border padding margin </span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">width</span>() 　<span class="comment">//浏览器时下窗口可视区域宽度 </span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">width</span>()<span class="comment">//浏览器时下窗口文档对于象宽度 </span></span><br><span class="line">$(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">width</span>()　　　　　　<span class="comment">//浏览器时下窗口文档body的高度 </span></span><br><span class="line">$(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>)　<span class="comment">//浏览器时下窗口文档body的总宽度 包括    border padding</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">HTML</span>精确定位:scrollLeft,scrollWidth,clientWidth,offsetWidth </span><br><span class="line"><span class="attr">scrollHeight</span>: 获取对象的滚动高度。 </span><br><span class="line"><span class="attr">scrollLeft</span>:设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离 </span><br><span class="line"><span class="attr">scrollTop</span>:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离 </span><br><span class="line"><span class="attr">scrollWidth</span>:获取对象的滚动宽度 </span><br><span class="line"><span class="attr">offsetHeight</span>:获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度 </span><br><span class="line"><span class="attr">offsetLeft</span>:获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 </span><br><span class="line"><span class="attr">offsetTop</span>:获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置 </span><br><span class="line">event.<span class="property">clientX</span> 相对文档的水平座标 </span><br><span class="line">event.<span class="property">clientY</span> 相对文档的垂直座标 </span><br><span class="line">event.<span class="property">offsetX</span> 相对容器的水平坐标 </span><br><span class="line">event.<span class="property">offsetY</span> 相对容器的垂直坐标 </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> 垂直方向滚动的值 </span><br><span class="line">event.<span class="property">clientX</span>+<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> 相对文档的水平座标+垂直方      向滚动的量</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>实现图片懒加载(lazyload)</title>
    <url>/2016/11/26/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>对于图片较多的页面，使用懒加载可以大幅提高页面加载速度，提高用户体验。</p>
<p><img data-src="//blogimg.jakeyu.top/20170321149008892238857.jpg"></p>
<span id="more"></span>

<h2 id="懒加载的意义（为什么要使用懒加载）"><a href="#懒加载的意义（为什么要使用懒加载）" class="headerlink" title="懒加载的意义（为什么要使用懒加载）"></a>懒加载的意义（为什么要使用懒加载）</h2><p>对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。当页面图片很多时，页面的加载速度缓慢，几S钟内页面没有加载完成，也许会失去很多的用户。</p>
<p>所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>将页面中的img标签src指向一张小图片或者src为空，然后定义<code>data-src</code>（这个属性可以自定义命名，我才用data-src）属性指向真实的图片。<code>src</code>指向一张默认的图片，否则当<code>src</code>为空时也会向服务器发送一次请求。可以指向<code>loading</code>的地址。</p>
<blockquote>
<p>注：图片要指定宽高</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>当载入页面时，先把可视区域内的img标签的<code>data-src</code>属性值负给<code>src</code>，然后监听滚动事件，把用户即将看到的图片加载。这样便实现了懒加载。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在写代码前，需要了解各种高度。先看这篇文章<a href="http://i.jakeyu.top/2016/09/04/scrollTop-offsetTop-scrollLeft-offsetLeft/">scrollTop,offsetTop,scrollLeft,offsetLeft</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;img&#x27;</span>).<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>; <span class="comment">//存储图片加载到的位置，避免每次都从第一张图片开始遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">lazyload</span>(); <span class="comment">//页面载入完毕加载可是区域内的图片</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onscroll</span> = lazyload;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params"></span>) &#123; <span class="comment">//监听页面滚动事件</span></span><br><span class="line">        <span class="keyword">var</span> seeHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>; <span class="comment">//可见区域高度</span></span><br><span class="line">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>; <span class="comment">//滚动条距离顶部高度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (img[i].<span class="property">offsetTop</span> &lt; seeHeight + scrollTop) &#123;</span><br><span class="line">                <span class="keyword">if</span> (img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>) == <span class="string">&quot;default.jpg&quot;</span>) &#123;</span><br><span class="line">                    img[i].<span class="property">src</span> = img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                n = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>,</span><br><span class="line">        imgNum = $(<span class="string">&quot;img&quot;</span>).<span class="property">length</span>,</span><br><span class="line">        img = $(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">lazyload</span>();</span><br><span class="line"></span><br><span class="line">    $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(lazyload);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; imgNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (img.<span class="title function_">eq</span>(i).<span class="title function_">offset</span>().<span class="property">top</span> &lt; <span class="built_in">parseInt</span>($(<span class="variable language_">window</span>).<span class="title function_">height</span>()) + <span class="built_in">parseInt</span>($(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (img.<span class="title function_">eq</span>(i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>) == <span class="string">&quot;default.jpg&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> src = img.<span class="title function_">eq</span>(i).<span class="title function_">attr</span>(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">                    img.<span class="title function_">eq</span>(i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, src);</span><br><span class="line"></span><br><span class="line">                    n = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="使用节流函数进行性能优化"><a href="#使用节流函数进行性能优化" class="headerlink" title="使用节流函数进行性能优化"></a>使用节流函数进行性能优化</h2><p>如果直接将函数绑定在<code>scroll</code>事件上，当页面滚动时，函数会被高频触发，这非常影响浏览器的性能。</p>
<p>我想实现限制触发频率，来优化性能。</p>
<p>节流函数：只允许一个函数在N秒内执行一次。下面是一个简单的节流函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的节流函数</span></span><br><span class="line"><span class="comment">//fun 要执行的函数</span></span><br><span class="line"><span class="comment">//delay 延迟</span></span><br><span class="line"><span class="comment">//time  在time时间内必须执行一次</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (fun, delay, time) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">    <span class="keyword">if</span> (curTime - startTime &gt;= time) &#123;</span><br><span class="line">      <span class="comment">// 如果达到了规定的触发时间间隔，触发 handler</span></span><br><span class="line">      fun.<span class="title function_">apply</span>(context, args)</span><br><span class="line">      startTime = curTime</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没达到触发间隔，重新设定定时器</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        fun.<span class="title function_">apply</span>(context, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实际想绑定在 scroll 事件上的 handler</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params">event</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 采用了节流函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="title function_">throttle</span>(lazyload,<span class="number">500</span>,<span class="number">1000</span>));</span><br></pre></td></tr></table></figure>

<h2 id="使用去抖函数进行性能优化"><a href="#使用去抖函数进行性能优化" class="headerlink" title="使用去抖函数进行性能优化"></a>使用去抖函数进行性能优化</h2><p>去抖相比较节流函数要稍微简单一点，去抖是让函数延迟执行，而节流比去抖多了一个在一定时间内必须要执行一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// debounce函数用来包裹我们的事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span> (fn, delay) &#123;</span><br><span class="line">  <span class="comment">// 持久化一个定时器 timer</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 闭包函数可以访问 timer</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 &#x27;this&#x27; 和 &#x27;arguments&#x27;</span></span><br><span class="line">    <span class="comment">// 获得函数的作用域和参数</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 如果事件被触发，清除 timer 并重新开始计时</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际想绑定在 scroll 事件上的 handler</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params">event</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 采用了去抖函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="title function_">throttle</span>(lazyload,<span class="number">500</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>方案</tag>
      </tags>
  </entry>
  <entry>
    <title>层叠顺序（stacking level）与堆栈上下文（stacking context）</title>
    <url>/2018/12/01/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%EF%BC%88stacking-level%EF%BC%89%E4%B8%8E%E5%A0%86%E6%A0%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89/</url>
    <content><![CDATA[<p><code>z-index</code> 看上去其实很简单，根据 <code>z-index</code> 的高低决定层叠的优先级，实则深入进去，会发现内有乾坤。</p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>看看下面这题，定义两个 <code>div</code> A 和 B，被包括在同一个父 <code>div</code> 标签下。HTML结构如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span>#divA display:inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span> #divB float:left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:deeppink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>:yellowgreen;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概描述起来，意思就是拥有共同父容器的两个 <code>DIV</code> 重叠在一起，是 <code>display:inline-block</code> 叠在上面，还是 <code>float:left</code> 叠在上面？</p>
<p>注意这里 DOM 的顺序，是先生成 display:inline-block ，再生成 float:left 。当然也可以把两个的 DOM 顺序调转如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span> #divB float:left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span>#divA display:inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>会发现，无论顺序如何，始终是 display:inline-block 的 div 叠在上方。</p>
<p><a href="https://codepen.io/Chokcoco/pen/gwLYNy">DEMO戳我</a></p>
<p>这里其实是涉及了所谓的层叠水平（stacking level)，有一张图可以很好的诠释：</p>
<p><img data-src="//blogimg.jakeyu.top/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%EF%BC%88stacking-level%EF%BC%89%E4%B8%8E%E5%A0%86%E6%A0%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89/687474703a2f2f696d616765732e636e626c6f67732e636f6d2f636e626c6f67735f636f6d2f636f636f31732f3838313631342f6f5f737461636b696e676c6576656c2e706e67.png"></p>
<p>运用上图的逻辑，上面的题目就迎刃而解，<code>inline-blcok</code> 的 <code>stacking level</code> 比之 <code>float</code> 要高，所以无论 DOM 的先后顺序都堆叠在上面。</p>
<p>不过上面图示的说法有一些不准确，按照 <a href="https://www.w3.org/TR/CSS2/visuren.html#propdef-z-index">W3官方</a> 的说法，准确的 7 层为：</p>
<ol>
<li>the background and borders of the element forming the stacking context.</li>
<li>the child stacking contexts with negative stack levels (most negative first).</li>
<li>the in-flow, non-inline-level, non-positioned descendants.</li>
<li>the non-positioned floats.</li>
<li>the in-flow, inline-level, non-positioned descendants, including inline tables and inline blocks.</li>
<li>the child stacking contexts with stack level 0 and the positioned descendants with stack level 0.</li>
<li>the child stacking contexts with positive stack levels (least positive first).</li>
</ol>
<p>稍微翻译一下：</p>
<ol>
<li>形成堆叠上下文环境的元素的背景与边框</li>
<li>拥有负 <code>z-index</code> 的子堆叠上下文元素 （负的越高越堆叠层级越低）</li>
<li>正常流式布局，非 <code>inline-block</code>，无 <code>position</code> 定位（static除外）的子元素</li>
<li>无 <code>position</code> 定位（static除外）的 float 浮动元素</li>
<li>正常流式布局， <code>inline-block</code>元素，无 <code>position</code> 定位（static除外）的子元素（包括 display:table 和 display:inline ）</li>
<li>拥有 <code>z-index:0</code> 的子堆叠上下文元素</li>
<li>拥有正 <code>z-index:</code> 的子堆叠上下文元素（正的越低越堆叠层级越低）</li>
</ol>
<p>所以我们的两个 <code>div</code> 的比较是基于上面所列出来的 4 和 5 。5 的 <code>stacking level</code> 更高，所以叠得更高。</p>
<p>不过！不过！不过！重点来了，请注意，上面的比较是基于两个 div 都没有形成 堆叠上下文 这个为基础的。下面我们修改一下题目，给两个 <code>div</code> ，增加一个 <code>opacity</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.9</span>; // 注意这里，增加一个 <span class="attribute">opacity</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:deeppink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>:yellowgreen;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://codepen.io/Chokcoco/pen/qaqdqA">DEMO戳我</a></p>
<p>会看到，<code>inline-block</code> 的 <code>div</code> 不再一定叠在 <code>float</code> 的 <code>div</code> 之上，而是和 <code>HTML</code> 代码中 <code>DOM</code> 的堆放顺序有关，后添加的 <code>div</code> 会 叠在先添加的 <code>div</code> 之上。</p>
<p>这里的关键点在于，添加的 <code>opacity:0.9</code> 这个让两个 <code>div</code> 都生成了 <code>stacking context（堆叠上下文）</code> 的概念。此时，要对两者进行层叠排列，就需要 <code>z-index</code> ，<code>z-index</code> 越高的层叠层级越高。</p>
<p>堆叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向（电脑屏幕的）视窗或者网页的用户的 <code>z</code> 轴上延伸，<code>HTML</code> 元素依据其自身属性按照优先级顺序占用层叠上下文的空间。</p>
<p>那么，如何触发一个元素形成 <code>堆叠上下文</code> ？方法如下，摘自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context">MDN</a>：</p>
<ul>
<li>根元素 (HTML),</li>
<li>z-index 值不为 “auto”的 绝对&#x2F;相对定位，</li>
<li>一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex，</li>
<li>opacity 属性值小于 1 的元素（参考 the specification for opacity），</li>
<li>transform 属性值不为 “none”的元素，</li>
<li>mix-blend-mode 属性值不为 “normal”的元素，</li>
<li>filter值不为“none”的元素，</li>
<li>perspective值不为“none”的元素，</li>
<li>isolation 属性被设置为 “isolate”的元素，</li>
<li>position: fixed</li>
<li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值</li>
<li>-webkit-overflow-scrolling 属性被设置 “touch”的元素</li>
</ul>
<p>所以，上面我们给两个 <code>div</code> 添加 <code>opacity</code> 属性的目的就是为了形成 <code>stacking context</code>。也就是说添加 <code>opacity</code> 替换成上面列出来这些属性都是可以达到同样的效果。</p>
<p>在层叠上下文中，其子元素同样也按照上面解释的规则进行层叠。 特别值得一提的是，其子元素的 <code>z-index</code> 值只在父级层叠上下文中有意义。意思就是父元素的 <code>z-index</code> 低于父元素另一个同级元素，子元素 <code>z-index</code> 再高也没用。</p>
<p>理解上面的 <code>stacking-level</code> 与 <code>stacking-context</code> 是理解 <code>CSS</code> 的层叠顺序的关键。</p>
<h1 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h1><ul>
<li><a href="https://github.com/chokcoco/iCSS/issues/1">谈谈一些有趣的CSS题目（1~5） · Issue #1 · chokcoco&#x2F;iCSS</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>微信页面监听摇一摇事件，并伴有音效</title>
    <url>/2016/05/07/%E5%BE%AE%E4%BF%A1%E9%A1%B5%E9%9D%A2%E7%9B%91%E5%90%AC%E6%91%87%E4%B8%80%E6%91%87%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%BC%B4%E6%9C%89%E9%9F%B3%E6%95%88/</url>
    <content><![CDATA[<p>最近要写一个微信网页，需要监听手机摇动事件，并且伴随有声音</p>
<p>在HTML5，devicemotion事件deviceorientation特性的运动传感器的封装时间装置，你可以通过改变运动时间获取设备的状态，加速和其他数据（有另一个角度deviceorientation事件提供设备，定位等信息）。</p>
<span id="more"></span>

<p>而通过DeviceMotion对设备运动状态的判断，则可以帮助我们在网页上就实现“摇一摇”的交互效果。</p>
<p>把监听事件绑定给 deviceMotionHandler</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">DeviceMotionEvent</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;devicemotion&#x27;</span>, deviceMotionHandler, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;本设备不支持devicemotion事件&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">获取设备加速度信息 accelerationIncludingGravity</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deviceMotionHandler</span>(<span class="params">eventData</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> acceleration = eventData.<span class="property">accelerationIncludingGravity</span>,</span><br><span class="line">    x, y, z;</span><br><span class="line">    x = acceleration.<span class="property">x</span>;</span><br><span class="line">    y = acceleration.<span class="property">y</span>;</span><br><span class="line">    z = acceleration.<span class="property">z</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;status&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;x:&quot;</span>+x+<span class="string">&quot;&lt;br /&gt;y:&quot;</span>+y+<span class="string">&quot;&lt;br /&gt;z:&quot;</span>+z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>“摇一摇”的动作既“一定时间内设备了一定距离”，因此通过监听上一步获取到的x, y, z 值在一定时间范围内  的变化率，即可进行设备是否有进行晃动的判断。而为了防止正常移动的误判，需要给该变化率设置一个合适的临界 值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">SHAKE_THRESHOLD</span> = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">var</span> last_update = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x = y = z = last_x = last_y = last_z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">DeviceMotionEvent</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;devicemotion&#x27;</span>, deviceMotionHandler, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;本设备不支持devicemotion事件&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deviceMotionHandler</span>(<span class="params">eventData</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> acceleration = eventData.<span class="property">accelerationIncludingGravity</span>;</span><br><span class="line">    <span class="keyword">var</span> curTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((curTime - last_update) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> diffTime = curTime - last_update;</span><br><span class="line">        last_update = curTime;</span><br><span class="line">        x = acceleration.<span class="property">x</span>;</span><br><span class="line">        y = acceleration.<span class="property">y</span>;</span><br><span class="line">        z = acceleration.<span class="property">z</span>;</span><br><span class="line">        <span class="keyword">var</span> speed = <span class="title class_">Math</span>.<span class="title function_">abs</span>(x + y + z - last_x - last_y - last_z) / diffTime * <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">var</span> status = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;status&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (speed &gt; <span class="variable constant_">SHAKE_THRESHOLD</span>) &#123;</span><br><span class="line">            <span class="title function_">doResult</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        last_x = x;</span><br><span class="line">        last_y = y;</span><br><span class="line">        last_z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>100毫秒进行一次位置判断，若前后x, y, z间的差值的绝对值和时间比率超过了预设的阈值，则判断设备进行   了摇晃操作。</p>
<h2 id="下面是我改写的代码"><a href="#下面是我改写的代码" class="headerlink" title="下面是我改写的代码"></a>下面是我改写的代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://xunlei.sc.chinaz.com/files/download/sound1/201410/5018.mp3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;musicBox&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;preload&quot;</span>  <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">SHAKE_THRESHOLD</span> = <span class="number">3000</span>;    </span><br><span class="line">    <span class="keyword">var</span> last_update = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">var</span> x=y=z=last_x=last_y=last_z=<span class="number">0</span>;   </span><br><span class="line"><span class="keyword">var</span>  media;</span><br><span class="line">media= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;musicBox&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">   	last_update=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    	<span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">DeviceMotionEvent</span>) &#123;</span><br><span class="line">    		<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;devicemotion&#x27;</span>,deviceMotionHandler, <span class="literal">false</span>);  </span><br><span class="line">    	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;not support mobile event&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deviceMotionHandler</span>(<span class="params">eventData</span>) &#123;    </span><br><span class="line">    <span class="keyword">var</span> acceleration =eventData.<span class="property">accelerationIncludingGravity</span>;</span><br><span class="line">    <span class="keyword">var</span> curTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">if</span> ((curTime - last_update)&gt; <span class="number">100</span>) &#123;  </span><br><span class="line">    		<span class="keyword">var</span> diffTime = curTime -last_update;    </span><br><span class="line">    		last_update = curTime;        </span><br><span class="line">    		x = acceleration.<span class="property">x</span>;</span><br><span class="line">    		y = acceleration.<span class="property">y</span>;   </span><br><span class="line">    		z = acceleration.<span class="property">z</span>;   </span><br><span class="line">    		<span class="keyword">var</span> speed = <span class="title class_">Math</span>.<span class="title function_">abs</span>(x +y + z - last_x - last_y - last_z) /</span><br><span class="line">    diffTime * <span class="number">10000</span>; 	</span><br><span class="line">    		<span class="keyword">if</span> (speed &gt; <span class="variable constant_">SHAKE_THRESHOLD</span>) &#123;    </span><br><span class="line">    			media.<span class="title function_">play</span>();</span><br><span class="line">    		&#125;    </span><br><span class="line">    		last_x = x;    </span><br><span class="line">    		last_y = y;    </span><br><span class="line">    		last_z = z;    </span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	<span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>所有浏览器都适用的创建XMLHttpRequest对象的方法</title>
    <url>/2016/04/18/%E6%89%80%E6%9C%89%E6%B5%8F%E8%A7%88%E5%99%A8%E9%83%BD%E9%80%82%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BAXMLHttpRequest%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>由于IE7之前的版本不支持使用var xhr ＝ XMLHttpRequest();方法创建ajax对象，所以如果需要支持所有浏览器需要使用下面的方法</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="title function_">createXHR</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> != <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">ActiveXObject</span> != <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">activeXString</span> != <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> versions = [<span class="string">&quot;MSXML2.XMLHttp.6.0&quot;</span>,<span class="string">&quot;MSXML2.XMLHttp.                       3.0&quot;</span>,<span class="string">&quot;MSXML2.XMLHttp&quot;</span>],i,len;</span><br><span class="line">			<span class="keyword">for</span>(i = <span class="number">0</span>,len=versions.<span class="property">length</span>;i&lt;len;i++)&#123;</span><br><span class="line">				<span class="keyword">try</span>&#123;</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(versions[i]);</span><br><span class="line">					<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">activeXString</span> = versions[i];</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">					<span class="comment">//跳过</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">activeXString</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No XHR object available.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">createXHR</span>();</span><br></pre></td></tr></table></figure>
<h5 id="请求ajax"><a href="#请求ajax" class="headerlink" title="请求ajax"></a>请求ajax</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">createXHR</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;check.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>((xhr.<span class="property">status</span>&gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt;<span class="number">300</span>) || xhr.<span class="property">status</span>== <span class="number">304</span>)&#123;</span><br><span class="line">			<span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="xhr-readyState的五种状态"><a href="#xhr-readyState的五种状态" class="headerlink" title="xhr.readyState的五种状态"></a>xhr.readyState的五种状态</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">0 － （未初始化）还没有调用open()方法 </span><br><span class="line">1 － （服务器连接已经建立）已调用open()方法，正在发送请求 </span><br><span class="line">2 － （请求已接收）send()方法执行完成，已经接收到全部响应内容 </span><br><span class="line">3 － （请求处理中）正在解析响应内容 </span><br><span class="line">4 － （请求已完成）响应内容解析完成，可以在客户端调用了</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>拖拽文件夹上传文件</title>
    <url>/2019/02/25/%E6%8B%96%E6%8B%BD%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/javascript-illustration.png"></p>
<span id="more"></span>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traverseFileTree</span>(<span class="params">item, path</span>) &#123;</span><br><span class="line">  path = path || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">isFile</span>) &#123;</span><br><span class="line">    <span class="comment">// Get file</span></span><br><span class="line">    item.<span class="title function_">file</span>(<span class="keyword">function</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File:&quot;</span>, path + file.<span class="property">name</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">isDirectory</span>) &#123;</span><br><span class="line">    <span class="comment">// Get folder contents</span></span><br><span class="line">    <span class="keyword">var</span> dirReader = item.<span class="title function_">createReader</span>();</span><br><span class="line">    <span class="title function_">readerEntries</span>(dirReader, path, item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readEntries 每次最多返回100个，需要重复调用</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries</span></span><br><span class="line">functoin readerEntries (dirReader, path, item) &#123;</span><br><span class="line">  dirReader.<span class="title function_">readEntries</span>(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; entries.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">traverseFileTree</span>(entries[i], path + item.<span class="property">name</span> + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (entries.<span class="property">length</span>) <span class="title function_">readerEntries</span>(dirReader, path, item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">dropArea.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> items = event.<span class="property">dataTransfer</span>.<span class="property">items</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// webkitGetAsEntry is where the magic happens</span></span><br><span class="line">    <span class="keyword">var</span> item = items[i].<span class="title function_">webkitGetAsEntry</span>();</span><br><span class="line">    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">      <span class="title function_">traverseFileTree</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><a class="btn" href="https://caniuse.com/?search=mdn-api_datatransferitem_webkitgetasentry"><i class="fa fa-signal fa-fw fa-solid"></i>CanIUse</a>


<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries">FileSystemDirectoryReader - MDN</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2017/03/04/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="数组和字符串之间相互转换"><a href="#数组和字符串之间相互转换" class="headerlink" title="数组和字符串之间相互转换"></a>数组和字符串之间相互转换</h1><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p><code>split()</code>函数是将字符串转换为数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sentence = <span class="string">&#x27;the quick brown for jumped over the lazy dog&#x27;</span></span><br><span class="line"><span class="keyword">var</span> words = sentence.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; words.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;word &quot;</span> + i + <span class="string">&#x27;: &#x27;</span> + words[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">word <span class="number">0</span>: the</span><br><span class="line">word <span class="number">1</span>: quick</span><br><span class="line">word <span class="number">2</span>: brown</span><br><span class="line">word <span class="number">3</span>: <span class="keyword">for</span></span><br><span class="line">word <span class="number">4</span>: jumped</span><br><span class="line">word <span class="number">5</span>: over</span><br><span class="line">word <span class="number">6</span>: the</span><br><span class="line">word <span class="number">7</span>: lazy</span><br><span class="line">word <span class="number">8</span>: dog</span><br></pre></td></tr></table></figure>

<h2 id="join-、toString"><a href="#join-、toString" class="headerlink" title="join()、toString()"></a>join()、toString()</h2><p><code>join()</code> <code>toString()</code>两个方法可以将数组转化为字符串。这两个方法都返回一个包含数组所有元素的字符串，各元素之间默认用逗号分隔开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Cynthia&#x27;</span>, <span class="string">&#x27;Raymond&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> namestr = names.<span class="title function_">join</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namestr)</span><br><span class="line"><span class="keyword">var</span> namestr_1 = names.<span class="title function_">toString</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namestr_1)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">David</span>,<span class="title class_">Cynthia</span>,<span class="title class_">Raymond</span>,mike</span><br><span class="line"><span class="title class_">David</span>,<span class="title class_">Cynthia</span>,<span class="title class_">Raymond</span>,mike</span><br></pre></td></tr></table></figure>

<p>如果为<code>join()</code>传入参数，则各元素之间使用传入的参数隔开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Cynthia&#x27;</span>, <span class="string">&#x27;Raymond&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> namestr = names.<span class="title function_">join</span>(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namestr)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">David</span>;<span class="title class_">Cynthia</span>;<span class="title class_">Raymond</span>;mike</span><br></pre></td></tr></table></figure>

<h1 id="存取函数"><a href="#存取函数" class="headerlink" title="存取函数"></a>存取函数</h1><h2 id="indexOf-、lastIndexOf"><a href="#indexOf-、lastIndexOf" class="headerlink" title="indexOf()、lastIndexOf()"></a>indexOf()、lastIndexOf()</h2><p><code>indexOf()</code>函数是最常用的存取函数之一，用来查找传进来的参数在目标数组中是否存在。如果目标数组包含该参数，就返回该元素在数组中的索引；如果不包含，就返回<code>-1</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = [<span class="string">&#x27;jake&#x27;</span>, <span class="string">&#x27;yu&#x27;</span>, <span class="string">&#x27;lao&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;yu is at: &#x27;</span> + name.<span class="title function_">indexOf</span>(<span class="string">&#x27;yu&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaa is at: &#x27;</span> + name.<span class="title function_">indexOf</span>(<span class="string">&#x27;aaa&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yu is <span class="attr">at</span>: <span class="number">1</span></span><br><span class="line">aaa is <span class="attr">at</span>: -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>如果数组中包含多个相同的元素，<code>indexOf()</code>函数总是返回第一个与参数相同的元素的索引。<code>lastIndexOf()</code>函数返回相同元素的最后一个元素的索引，如果没有找到相同元素，则返回<code>-1</code></p>
<h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h2><p>除IE以外的所有浏览器（非边缘）都支持Array.prototype.findIndex。但是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex#Polyfill">Polyfill</a>很好的解决了这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexOfStevie = myArray.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">hello</span> === <span class="string">&quot;stevie&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>兼容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">findIndex</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;findIndex&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params">predicate</span>) &#123;</span><br><span class="line">     <span class="comment">// 1. Let O be ? ToObject(this value).</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;&quot;this&quot; is null or not defined&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> o = <span class="title class_">Object</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. Let len be ? ToLength(? Get(O, &quot;length&quot;)).</span></span><br><span class="line">      <span class="keyword">var</span> len = o.<span class="property">length</span> &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. If IsCallable(predicate) is false, throw a TypeError exception.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> predicate !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;predicate must be a function&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class="line">      <span class="keyword">var</span> thisArg = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5. Let k be 0.</span></span><br><span class="line">      <span class="keyword">var</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 6. Repeat, while k &lt; len</span></span><br><span class="line">      <span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line">        <span class="comment">// a. Let Pk be ! ToString(k).</span></span><br><span class="line">        <span class="comment">// b. Let kValue be ? Get(O, Pk).</span></span><br><span class="line">        <span class="comment">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span></span><br><span class="line">        <span class="comment">// d. If testResult is true, return k.</span></span><br><span class="line">        <span class="keyword">var</span> kValue = o[k];</span><br><span class="line">        <span class="keyword">if</span> (predicate.<span class="title function_">call</span>(thisArg, kValue, k, o)) &#123;</span><br><span class="line">          <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e. Increase k by 1.</span></span><br><span class="line">        k++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 7. Return -1.</span></span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="由已知数组创建新数组"><a href="#由已知数组创建新数组" class="headerlink" title="由已知数组创建新数组"></a>由已知数组创建新数组</h1><h2 id="concat-、splice"><a href="#concat-、splice" class="headerlink" title="concat()、splice()"></a>concat()、splice()</h2><p><code>concat()</code>和<code>splice()</code>方法允许通过已有的数组创建新数组。<code>concat()</code>方法可以合并多个数组创建一个新数组，<code>splice()</code>方法截取一个数组的子集创建一个新数组。</p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>该方法的发起者是一个数组，参数是另外一个数组或者多个数组。作为参数的数组，其中的所有元素都被连接到调用<code>concat()</code>方法的数组后面。下面的程序展示了<code>concat()</code>方法的工作原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cisDept = [<span class="string">&#x27;jake&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;jenn&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> dmpDept = [<span class="string">&#x27;bryan&#x27;</span>, <span class="string">&#x27;cynthia&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> dmpDept_2 = [<span class="string">&#x27;bryan&#x27;</span>, <span class="string">&#x27;cynthia&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> itDiv = cisDept.<span class="title function_">concat</span>(dmpDept)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itDiv)</span><br><span class="line"><span class="keyword">var</span> itDiv = cisDept.<span class="title function_">concat</span>(dmpDept, dmpDept_2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itDiv)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;jake&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;jenn&#x27;</span>, <span class="string">&#x27;bryan&#x27;</span>, <span class="string">&#x27;cynthia&#x27;</span> ]</span><br><span class="line">[ <span class="string">&#x27;jake&#x27;</span>, <span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;jenn&#x27;</span>, <span class="string">&#x27;bryan&#x27;</span>, <span class="string">&#x27;cynthia&#x27;</span>, <span class="string">&#x27;bryan&#x27;</span>, <span class="string">&#x27;cynthia&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><code>splice()</code>方法从现有数组里截取一个新数组。该方法的第一个参数是截取的起始索引，第二个参数是截取的长度。该方法会改变原来的数组。如果第二个参数传入的是<code>0</code>，则不删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> numSpl = num.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numSpl)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span> ]</span><br></pre></td></tr></table></figure>

<h1 id="添加和删除"><a href="#添加和删除" class="headerlink" title="添加和删除"></a>添加和删除</h1><h2 id="push-、unshift"><a href="#push-、unshift" class="headerlink" title="push()、unshift()"></a>push()、unshift()</h2><p><code>push()</code>方法会将一个元素添加到数组末尾：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">nums.<span class="title function_">push</span>(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ]</span><br></pre></td></tr></table></figure>

<p><code>unshift()</code>方法会将一个元素添加到数组开头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">nums.<span class="title function_">unshift</span>(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br></pre></td></tr></table></figure>

<h2 id="pop-、shift"><a href="#pop-、shift" class="headerlink" title="pop()、shift()"></a>pop()、shift()</h2><p><code>pop()</code>方法可以删除数组末尾的元素，并返回该元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> popNum = nums.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)	<span class="comment">//[ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(popNum)	<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<p><code>shift()</code>方法可以删除数组开头的元素，并返回该元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> popNum = nums.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)	<span class="comment">//[ 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(popNum)	<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h2 id="splice-1"><a href="#splice-1" class="headerlink" title="splice()"></a>splice()</h2><p>使用<code>splice()</code>方法为数组添加元素，需提供如下参数</p>
<ul>
<li>起始索引</li>
<li>需要删除的元素个数(不删除为0)</li>
<li>想要添加的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">nums.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)	<span class="comment">//[ 1, 2, 3, 11, 11, 11, 11, 11, 4, 5 ]</span></span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p><code>reverse()</code>可以对数组进行翻转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">nums.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)	<span class="comment">//[ 5, 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>如果数组是字符串类型，那么数组的可变方法<code>sort()</code>就非常好使:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = [<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;Cynthia&#x27;</span>, <span class="string">&#x27;Clayton&#x27;</span>]</span><br><span class="line">name.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)	<span class="comment">//[ &#x27;Clayton&#x27;, &#x27;Cynthia&#x27;, &#x27;David&#x27;, &#x27;Mike&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p>但是如果数组元素是数字类型，<code>sort()</code>方法的排序结果就不能让人满意了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">200</span>]</span><br><span class="line">nums.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)	<span class="comment">//[ 1, 100, 2, 200, 3, 4 ]</span></span><br></pre></td></tr></table></figure>

<p><code>sort()</code>方法是按照字典顺序对元素进行排序，因此它假定元素都是字符串类型。为了让<code>sort()</code>方法也能排序数字类型的元素，可以在调用方法是传入一个比较大小的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">200</span>]</span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 - num2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)	<span class="comment">//[ 1, 2, 3, 4, 100, 200 ]</span></span><br></pre></td></tr></table></figure>

<h1 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h1><p>这些方法对数组中的每个元素应用一个函数，可以返回一个值、一组值或者一个新数组</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>该方法接受一个函数作为参数，对数组中的每个元素使用该函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(item, item * item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">16</span></span><br><span class="line"><span class="number">5</span> <span class="number">25</span></span><br><span class="line"><span class="number">6</span> <span class="number">36</span></span><br><span class="line"><span class="number">7</span> <span class="number">49</span></span><br><span class="line"><span class="number">8</span> <span class="number">64</span></span><br></pre></td></tr></table></figure>

<h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>该方法接受一个返回值为布尔类型的函数，对数组中的每个元素使用该函数。如果对于所有的元素该函数返回值均为<code>true</code>，则该方法返回<code>true</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">isEven = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> even = nums.<span class="title function_">every</span>(isEven)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (even) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;even is true&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;even is false&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//even is true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">isEven = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> even = nums.<span class="title function_">every</span>(isEven)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (even) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;even is true&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;even is false&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//even is false</span></span><br></pre></td></tr></table></figure>

<h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p><code>some()</code>方法也接受一个返回值为布尔类型的函数，只有有一个元素使得该函数返回<code>true</code>，该方法就返回<code>true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEven</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> someEven = nums.<span class="title function_">some</span>(isEven)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someEven) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p><code>reduce()</code>方法接受一个函数，返回一个值。该方法会从一个累加值开始，不断对累加值和数组中的后续元素调用该函数，直到数组中的最后一个元素，最后返回得到的累加值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">runningTotal, currentValue</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> runningTotal + currentValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> sum = nums.<span class="title function_">reduce</span>(add)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)	<span class="comment">//55</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>) --&gt; <span class="number">3</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">3</span>,<span class="number">3</span>) --&gt; <span class="number">6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">6</span>,<span class="number">4</span>) --&gt; <span class="number">10</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">10</span>,<span class="number">5</span>) --&gt; <span class="number">15</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">15</span>,<span class="number">6</span>) --&gt; <span class="number">21</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">21</span>,<span class="number">7</span>) --&gt; <span class="number">28</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">28</span>,<span class="number">8</span>) --&gt; <span class="number">36</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">36</span>,<span class="number">9</span>) --&gt; <span class="number">45</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">45</span>,<span class="number">10</span>) --&gt; <span class="number">55</span></span><br></pre></td></tr></table></figure>

<p><code>reduceRight()</code>方法和<code>reduce()</code>方法不同，<code>reduceRight()</code>是从右到左执行</p>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p><code>map()</code>和<code>forEach()</code>有点儿像，对数组中的每个元素使用某个函数。两者区别是<code>map()</code>返回一个新的数组，该数组的元素是对原有元素应用某个函数得到的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curve</span>(<span class="params">grade</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> grade += <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> grades = [<span class="number">77</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">92</span>, <span class="number">83</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newGrades = grades.<span class="title function_">map</span>(curve)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newGrades)	<span class="comment">//[ 82, 70, 86, 97, 88 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p><code>filter()</code>和<code>every()</code>类似，传入一个返回值为布尔类型的函数。和<code>every()</code>方法不同的是，当对数组中的所有元素应用该函数，结果均为<code>true</code>时，该方法并不返回<code>true</code>，而是返回一个新数组，该数组包含应用该函数后的结果为<code>true</code>的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEven</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">	nums[i] = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> events = nums.<span class="title function_">filter</span>(isEven)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(events)	<span class="comment">//[ 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 ]</span></span><br></pre></td></tr></table></figure>

<h1 id="一行代码生成数组"><a href="#一行代码生成数组" class="headerlink" title="一行代码生成数组"></a>一行代码生成数组</h1><blockquote>
<p>作者：SarjuHansaliya<br>原文：<a href="http://www.jstips.co/zh_cn/javascript/create-range-0...n-easily-using-one-line/">仅用一行生成[0, 1, …, N-1]数列</a></p>
</blockquote>
<p>使用下面一行代码，我们就可以生成0…(N-1)数列。</p>
<h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, &#123;<span class="attr">length</span>: N&#125;).<span class="title function_">map</span>(<span class="title class_">Function</span>.<span class="property">call</span>, <span class="title class_">Number</span>);</span><br></pre></td></tr></table></figure>

<h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明:"></a>简要说明:</h3><ol>
<li>Array.apply(null, {length: N}) 返回一个由undefined填充的长度为N的数组(例如 A &#x3D; [undefined, undefined, …])。</li>
<li>A.map(Function.call, Number) 返回一个长度为N的数组，它的索引为I的元素为Function.call.call(Number, undefined, I, A)的结果。</li>
<li>Function.call.call(Number, undefined, I, A)可转化为Number(I)，正好就是I。</li>
<li>结果为：[0, 1, …, N-1]。</li>
</ol>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>这里用到了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(N),<span class="function">(<span class="params">val,index</span>)=&gt;</span>index);</span><br></pre></td></tr></table></figure>

<h3 id="简要说明-1"><a href="#简要说明-1" class="headerlink" title="简要说明:"></a>简要说明:</h3><ol>
<li>A &#x3D; new Array(N) 返回一个有N个_小孔_的数组 (例如 A &#x3D; [,,,…], 但是对于x in 0…N-1时A[x] &#x3D; undefined)。</li>
<li>F &#x3D; (val,index)&#x3D;&gt;index 即 function F (val, index) { return index; }。</li>
<li>Array.from(A, F) 返回一个长度为N的数组，它的索引为I的元素为F(A[I], I)的结果，也就是I。</li>
<li>结果为：[0, 1, …, N-1]。</li>
</ol>
<h2 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h2><p>如果你需要[1, 2, …, N]序列， <a href="#ES5">方法1</a>可改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, &#123;<span class="attr">length</span>: N&#125;).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value, index</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="#ES6">方法2</a>可改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(N),<span class="function">(<span class="params">val,index</span>)=&gt;</span>index+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/2018/08/18/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<h1 id="Set方法"><a href="#Set方法" class="headerlink" title="Set方法"></a>Set方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)])  <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h1 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>正常情况下使用这种方式没问题，但是当<code>arr</code>中有<code>NaN</code>时：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">//[1, 2, 3, 4, 5, NaN, NaN]</span></span><br></pre></td></tr></table></figure>

<p>结果与预期的不符，因为<code>indexOf</code>判断<code>NaN</code>时，结果始终为<code>-1</code>。</p>
<p>我们可以使用<code>includes</code>进行判断，<code>includes</code>会正确判断<code>NaN</code>，但是与<code>Object.is()</code>表现不同的是<code>+0</code>和<code>-0</code>，<code>includes</code>判断<code>+0</code>、<code>-0</code>为<code>true</code>。</p>
<p>关于<code>Object.is()</code>请查看：<a href="https://i.jakeyu.top/2018/08/14/%E5%9C%A8%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Object-is-%E8%AE%A9%E7%BB%93%E6%9E%9C%E6%9B%B4%E5%87%86%E7%A1%AE/">在相等比较中使用 Object.is()让结果更准确</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!newArr.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">//[1, 2, 3, 4, 5, NaN]</span></span><br></pre></td></tr></table></figure>

<h1 id="使用对象Key"><a href="#使用对象Key" class="headerlink" title="使用对象Key"></a>使用对象Key</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[item]) &#123;</span><br><span class="line">        obj[item] = <span class="literal">true</span></span><br><span class="line">        newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">//[1, 2, 3, 4, 5, NaN]</span></span><br></pre></td></tr></table></figure>

<p>但是如果下面的情况，使用这种方式就会有问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;5&#x27;</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[item]) &#123;</span><br><span class="line">        obj[item] = <span class="literal">true</span></span><br><span class="line">        newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">//[1, 2, 3, 4, 5, NaN]</span></span><br></pre></td></tr></table></figure>

<p>我们发现<code>&#39;5&#39;</code>被过滤掉了，因为<code>Object</code>的会把<code>key</code>默认转换成字符串，所以识别<code>5</code>时，会当成<code>&#39;5&#39;</code>处理，所以再判断<code>&#39;5&#39;</code>时，对象中已经存在。</p>
<p>对于这样的情况，我们可以使用ES6的<code>Map</code>结构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;5&#x27;</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = []</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj.<span class="title function_">has</span>(item)) &#123;</span><br><span class="line">        obj.<span class="title function_">set</span>(item,<span class="literal">true</span>)</span><br><span class="line">        newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">//[1, 2, 3, 4, 5, &quot;5&quot;, NaN]</span></span><br></pre></td></tr></table></figure>

<p>我们看到<code>Map</code>并没有把<code>5</code>转换成<code>&#39;5&#39;</code>。</p>
<p>关于<code>Map</code>更多了解，请查看：<a href="http://es6.ruanyifeng.com/#docs/set-map">Set 和 Map 数据结构</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>杂七杂八</title>
    <url>/2017/06/04/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/20170604149657311876282.jpg"></p>
<span id="more"></span>

<h1 id="分解url"><a href="#分解url" class="headerlink" title="分解url"></a>分解url</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分解URL参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseQueryString</span>(<span class="params">url</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> obj = &#123;&#125;,</span><br><span class="line">		keyvalue = [],</span><br><span class="line">		key = <span class="string">&quot;&quot;</span>,</span><br><span class="line">		value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">var</span> paraString = url.<span class="title function_">substring</span>(url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) + <span class="number">1</span>, url.<span class="property">length</span>).<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> paraString) &#123;</span><br><span class="line"></span><br><span class="line">		keyvalue = paraString[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">		key = keyvalue[<span class="number">0</span>];</span><br><span class="line">		value = keyvalue[<span class="number">1</span>];</span><br><span class="line">		obj[key] = value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> obj;</span><br><span class="line">&#125;                                                                                                                            </span><br></pre></td></tr></table></figure>

<h1 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateConvert</span>(<span class="params">date, format</span>) &#123;</span><br><span class="line">	date = <span class="built_in">parseInt</span>(date);</span><br><span class="line">	<span class="keyword">var</span> <span class="title class_">Udate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">	<span class="keyword">var</span> Y = <span class="title class_">Udate</span>.<span class="title function_">getFullYear</span>(),</span><br><span class="line">		M = <span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>),</span><br><span class="line">		D = <span class="title class_">Udate</span>.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + <span class="title class_">Udate</span>.<span class="title function_">getDate</span>() : <span class="title class_">Udate</span>.<span class="title function_">getDate</span>(),</span><br><span class="line">		h = <span class="title class_">Udate</span>.<span class="title function_">getHours</span>(),</span><br><span class="line">		m = <span class="title class_">Udate</span>.<span class="title function_">getMinutes</span>(),</span><br><span class="line">		s = <span class="title class_">Udate</span>.<span class="title function_">getSeconds</span>(),</span><br><span class="line">		result;</span><br><span class="line">	<span class="keyword">if</span> (!format) &#123;</span><br><span class="line">		format = <span class="string">&quot;Y/M/D h:m:s&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;Y&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		format = format.<span class="title function_">replace</span>(<span class="string">&quot;Y&quot;</span>, Y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;M&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		format = format.<span class="title function_">replace</span>(<span class="string">&quot;M&quot;</span>, M);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;D&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		format = format.<span class="title function_">replace</span>(<span class="string">&quot;D&quot;</span>, D);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;h&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		format = format.<span class="title function_">replace</span>(<span class="string">&quot;h&quot;</span>, h);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;m&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		format = format.<span class="title function_">replace</span>(<span class="string">&quot;m&quot;</span>, m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;s&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		format = format.<span class="title function_">replace</span>(<span class="string">&quot;s&quot;</span>, s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="返回两个日期之间的日期"><a href="#返回两个日期之间的日期" class="headerlink" title="返回两个日期之间的日期"></a>返回两个日期之间的日期</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Returns an array of dates between the two dates</span></span><br><span class="line"><span class="keyword">var</span> getDates = <span class="keyword">function</span>(<span class="params">startDate, endDate</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> dates = [],</span><br><span class="line">      currentDate = startDate,</span><br><span class="line">      addDays = <span class="keyword">function</span>(<span class="params">days</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="title function_">valueOf</span>());</span><br><span class="line">        date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() + days);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">      &#125;;</span><br><span class="line">  <span class="keyword">while</span> (currentDate &lt;= endDate) &#123;</span><br><span class="line">    dates.<span class="title function_">push</span>(currentDate);</span><br><span class="line">    currentDate = addDays.<span class="title function_">call</span>(currentDate, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dates;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">var</span> dates = <span class="title function_">getDates</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>,<span class="number">10</span>,<span class="number">22</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>,<span class="number">11</span>,<span class="number">25</span>));                                                                                                           </span><br><span class="line">dates.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="获取某年某月的天数"><a href="#获取某年某月的天数" class="headerlink" title="获取某年某月的天数"></a>获取某年某月的天数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDaysInOneMonth</span>(<span class="params">year, month</span>)&#123;  </span><br><span class="line">  month = <span class="built_in">parseInt</span>(month, <span class="number">10</span>);  </span><br><span class="line">  <span class="keyword">var</span> d= <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, <span class="number">0</span>);  </span><br><span class="line">  <span class="keyword">return</span> d.<span class="title function_">getDate</span>();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="身份证验证"><a href="#身份证验证" class="headerlink" title="身份证验证"></a>身份证验证</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkID</span>(<span class="params">ID</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable constant_">ID</span> !== <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;非法字符串&#x27;</span>;</span><br><span class="line">	<span class="keyword">var</span> city = &#123;</span><br><span class="line">		<span class="number">11</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">		<span class="number">12</span>: <span class="string">&quot;天津&quot;</span>,</span><br><span class="line">		<span class="number">13</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">		<span class="number">14</span>: <span class="string">&quot;山西&quot;</span>,</span><br><span class="line">		<span class="number">15</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">		<span class="number">21</span>: <span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">		<span class="number">22</span>: <span class="string">&quot;吉林&quot;</span>,</span><br><span class="line">		<span class="number">23</span>: <span class="string">&quot;黑龙江 &quot;</span>,</span><br><span class="line">		<span class="number">31</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">		<span class="number">32</span>: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">		<span class="number">33</span>: <span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">		<span class="number">34</span>: <span class="string">&quot;安徽&quot;</span>,</span><br><span class="line">		<span class="number">35</span>: <span class="string">&quot;福建&quot;</span>,</span><br><span class="line">		<span class="number">36</span>: <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">		<span class="number">37</span>: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">		<span class="number">41</span>: <span class="string">&quot;河南&quot;</span>,</span><br><span class="line">		<span class="number">42</span>: <span class="string">&quot;湖北 &quot;</span>,</span><br><span class="line">		<span class="number">43</span>: <span class="string">&quot;湖南&quot;</span>,</span><br><span class="line">		<span class="number">44</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">		<span class="number">45</span>: <span class="string">&quot;广西&quot;</span>,</span><br><span class="line">		<span class="number">46</span>: <span class="string">&quot;海南&quot;</span>,</span><br><span class="line">		<span class="number">50</span>: <span class="string">&quot;重庆&quot;</span>,</span><br><span class="line">		<span class="number">51</span>: <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">		<span class="number">52</span>: <span class="string">&quot;贵州&quot;</span>,</span><br><span class="line">		<span class="number">53</span>: <span class="string">&quot;云南&quot;</span>,</span><br><span class="line">		<span class="number">54</span>: <span class="string">&quot;西藏 &quot;</span>,</span><br><span class="line">		<span class="number">61</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">		<span class="number">62</span>: <span class="string">&quot;甘肃&quot;</span>,</span><br><span class="line">		<span class="number">63</span>: <span class="string">&quot;青海&quot;</span>,</span><br><span class="line">		<span class="number">64</span>: <span class="string">&quot;宁夏&quot;</span>,</span><br><span class="line">		<span class="number">65</span>: <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">		<span class="number">71</span>: <span class="string">&quot;台湾&quot;</span>,</span><br><span class="line">		<span class="number">81</span>: <span class="string">&quot;香港&quot;</span>,</span><br><span class="line">		<span class="number">82</span>: <span class="string">&quot;澳门&quot;</span>,</span><br><span class="line">		<span class="number">91</span>: <span class="string">&quot;国外&quot;</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">var</span> birthday = <span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">6</span>, <span class="number">4</span>) + <span class="string">&#x27;/&#x27;</span> + <span class="title class_">Number</span>(<span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">10</span>, <span class="number">2</span>)) + <span class="string">&#x27;/&#x27;</span> + <span class="title class_">Number</span>(<span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">12</span>, <span class="number">2</span>));</span><br><span class="line">	<span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(birthday);</span><br><span class="line">	<span class="keyword">var</span> newBirthday = d.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;/&#x27;</span> + <span class="title class_">Number</span>(d.<span class="title function_">getMonth</span>() + <span class="number">1</span>) + <span class="string">&#x27;/&#x27;</span> + <span class="title class_">Number</span>(d.<span class="title function_">getDate</span>());</span><br><span class="line">	<span class="keyword">var</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">	<span class="keyword">var</span> time = d.<span class="title function_">getTime</span>();</span><br><span class="line">	<span class="keyword">var</span> arrInt = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">var</span> arrCh = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line">	<span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">		i, residue;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!<span class="regexp">/^\d&#123;17&#125;(\d|x)$/i</span>.<span class="title function_">test</span>(<span class="variable constant_">ID</span>)) <span class="keyword">return</span> <span class="string">&#x27;非法身份证&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (city[<span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>)] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">&quot;非法地区&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (time &gt;= currentTime || birthday !== newBirthday) <span class="keyword">return</span> <span class="string">&#x27;非法生日&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">		sum += <span class="variable constant_">ID</span>.<span class="title function_">substr</span>(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">	&#125;</span><br><span class="line">	residue = arrCh[sum % <span class="number">11</span>];</span><br><span class="line">	<span class="keyword">if</span> (residue !== <span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">17</span>, <span class="number">1</span>)) <span class="keyword">return</span> <span class="string">&#x27;非法身份证哦&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> city[<span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>)] + <span class="string">&quot;,&quot;</span> + birthday + <span class="string">&quot;,&quot;</span> + (<span class="variable constant_">ID</span>.<span class="title function_">substr</span>(<span class="number">16</span>, <span class="number">1</span>) % <span class="number">2</span> ? <span class="string">&quot; 男&quot;</span> : <span class="string">&quot;女&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="判断是移动端和IE8"><a href="#判断是移动端和IE8" class="headerlink" title="判断是移动端和IE8"></a>判断是移动端和IE8</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">isMobile</span> = <span class="regexp">/mobile/i</span>.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">isIE8</span> = <span class="regexp">/MSIE 8.0/i</span>.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>);</span><br></pre></td></tr></table></figure>

<p>移动端详细判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isMobile = &#123;</span><br><span class="line">        <span class="title class_">Android</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/Android/i</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title class_">BlackBerry</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/BlackBerry/i</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">iOS</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/iPhone|iPad|iPod/i</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title class_">Opera</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/Opera Mini/i</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title class_">Windows</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/IEMobile/i</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">any</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (isMobile.<span class="title class_">Android</span>() || isMobile.<span class="title class_">BlackBerry</span>() || isMobile.<span class="title function_">iOS</span>() || isMobile.<span class="title class_">Opera</span>() || isMobile.<span class="title class_">Windows</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="让元素进入页面时自动显示在页面可视区域"><a href="#让元素进入页面时自动显示在页面可视区域" class="headerlink" title="让元素进入页面时自动显示在页面可视区域"></a>让元素进入页面时自动显示在页面可视区域</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showElemView</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>() &lt; elem.<span class="title function_">offset</span>().<span class="property">top</span> - $(<span class="variable language_">window</span>).<span class="title function_">height</span>()) &#123;</span><br><span class="line">        $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>(elem.<span class="title function_">offset</span>().<span class="property">top</span> - $(<span class="variable language_">window</span>).<span class="title function_">height</span>() + elem.<span class="title function_">outerHeight</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="文本框根据输入内容自适应高度"><a href="#文本框根据输入内容自适应高度" class="headerlink" title="文本框根据输入内容自适应高度"></a>文本框根据输入内容自适应高度</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param                &#123;HTMLElement&#125;        输入框元素</span></span><br><span class="line"><span class="comment">* @param                &#123;Number&#125;                设置光标与输入框保持的距离(默认0)</span></span><br><span class="line"><span class="comment">* @param                &#123;Number&#125;                设置最大高度(可选)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">autoTextarea</span>(<span class="params">elem, extra, maxHeight</span>) &#123;</span><br><span class="line">    extra = extra || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> isFirefox = !!<span class="variable language_">document</span>.<span class="property">getBoxObjectFor</span> || <span class="string">&#x27;mozInnerScreenX&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>,</span><br><span class="line">        isOpera = !!<span class="variable language_">window</span>.<span class="property">opera</span> &amp;&amp; !!<span class="variable language_">window</span>.<span class="property">opera</span>.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;Opera&#x27;</span>),</span><br><span class="line">        addEvent = <span class="keyword">function</span>(<span class="params">type, callback</span>) &#123;</span><br><span class="line">            elem.<span class="property">addEventListener</span> ?</span><br><span class="line">                elem.<span class="title function_">addEventListener</span>(type, callback, <span class="literal">false</span>) :</span><br><span class="line">                elem.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + type, callback);</span><br><span class="line">        &#125;,</span><br><span class="line">        getStyle = elem.<span class="property">currentStyle</span> ? <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> val = elem.<span class="property">currentStyle</span>[name];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name === <span class="string">&#x27;height&#x27;</span> &amp;&amp; val.<span class="title function_">search</span>(<span class="regexp">/px/i</span>) !== <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> rect = elem.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">                <span class="keyword">return</span> rect.<span class="property">bottom</span> - rect.<span class="property">top</span> -</span><br><span class="line">                    <span class="built_in">parseFloat</span>(<span class="title function_">getStyle</span>(<span class="string">&#x27;paddingTop&#x27;</span>)) -</span><br><span class="line">                    <span class="built_in">parseFloat</span>(<span class="title function_">getStyle</span>(<span class="string">&#x27;paddingBottom&#x27;</span>)) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125; : <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">getComputedStyle</span>(elem, <span class="literal">null</span>)[name];</span><br><span class="line">        &#125;,</span><br><span class="line">        minHeight = <span class="built_in">parseFloat</span>(<span class="title function_">getStyle</span>(<span class="string">&#x27;height&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    elem.<span class="property">style</span>.<span class="property">resize</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> change = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> scrollTop, height,</span><br><span class="line">            padding = <span class="number">0</span>,</span><br><span class="line">            style = elem.<span class="property">style</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (elem.<span class="property">_length</span> === elem.<span class="property">value</span>.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">        elem.<span class="property">_length</span> = elem.<span class="property">value</span>.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isFirefox &amp;&amp; !isOpera) &#123;</span><br><span class="line">            padding = <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(<span class="string">&#x27;paddingTop&#x27;</span>)) + <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(<span class="string">&#x27;paddingBottom&#x27;</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        scrollTop = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line"></span><br><span class="line">        elem.<span class="property">style</span>.<span class="property">height</span> = minHeight + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (elem.<span class="property">scrollHeight</span> &gt; minHeight) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxHeight &amp;&amp; elem.<span class="property">scrollHeight</span> &gt; maxHeight) &#123;</span><br><span class="line">                height = maxHeight - padding;</span><br><span class="line">                style.<span class="property">overflowY</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                height = elem.<span class="property">scrollHeight</span> - padding;</span><br><span class="line">                style.<span class="property">overflowY</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            style.<span class="property">height</span> = height + extra + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            scrollTop += <span class="built_in">parseInt</span>(style.<span class="property">height</span>) - elem.<span class="property">currHeight</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = scrollTop;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = scrollTop;</span><br><span class="line">            elem.<span class="property">currHeight</span> = <span class="built_in">parseInt</span>(style.<span class="property">height</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addEvent</span>(<span class="string">&#x27;propertychange&#x27;</span>, change);</span><br><span class="line">    <span class="title function_">addEvent</span>(<span class="string">&#x27;input&#x27;</span>, change);</span><br><span class="line">    <span class="title function_">addEvent</span>(<span class="string">&#x27;focus&#x27;</span>, change);</span><br><span class="line">    <span class="title function_">change</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="转换日期时间格式"><a href="#转换日期时间格式" class="headerlink" title="转换日期时间格式"></a>转换日期时间格式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateConvert</span>(<span class="params">date, format</span>) &#123;</span><br><span class="line">    date = <span class="built_in">parseInt</span>(date);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Udate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">var</span> Y = <span class="title class_">Udate</span>.<span class="title function_">getFullYear</span>(),</span><br><span class="line">        M = <span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : (<span class="title class_">Udate</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>),</span><br><span class="line">        D = <span class="title class_">Udate</span>.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + <span class="title class_">Udate</span>.<span class="title function_">getDate</span>() : <span class="title class_">Udate</span>.<span class="title function_">getDate</span>(),</span><br><span class="line">        h = <span class="title class_">Udate</span>.<span class="title function_">getHours</span>(),</span><br><span class="line">        m = <span class="title class_">Udate</span>.<span class="title function_">getMinutes</span>(),</span><br><span class="line">        s = <span class="title class_">Udate</span>.<span class="title function_">getSeconds</span>(),</span><br><span class="line">        result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!format) &#123;</span><br><span class="line">        format = <span class="string">&quot;Y/M/D h:m:s&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;Y&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;Y&quot;</span>, Y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;M&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;M&quot;</span>, M);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;D&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;D&quot;</span>, D);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;h&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;h&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;m&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;m&quot;</span>, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (format.<span class="title function_">indexOf</span>(<span class="string">&quot;s&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        format = format.<span class="title function_">replace</span>(<span class="string">&quot;s&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="产生介于两个数之间的随机数"><a href="#产生介于两个数之间的随机数" class="headerlink" title="产生介于两个数之间的随机数"></a>产生介于两个数之间的随机数</h1><h2 id="取整数"><a href="#取整数" class="headerlink" title="取整数"></a>取整数</h2><p>取整数，并且包含最小值和最大值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">minNum,maxNum</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nums = maxNum - minNum;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * nums + minNum);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h2><p>取两书之间任意值，不包含最小值和最大值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">minNum,maxNum</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nums = maxNum - minNum;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>() * nums + minNum;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="保留指定小数位数"><a href="#保留指定小数位数" class="headerlink" title="保留指定小数位数"></a>保留指定小数位数</h2><p>保留<code>digits</code>位小数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">minNum,maxNum,digits</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nums = maxNum - minNum;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * nums + minNum).<span class="title function_">toFixed</span>(digits);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="js下载文件"><a href="#js下载文件" class="headerlink" title="js下载文件"></a>js下载文件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">download</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> $form = $(<span class="string">&#x27;&lt;form method=&quot;GET&quot;&gt;&lt;/form&gt;&#x27;</span>);</span><br><span class="line">    $form.<span class="title function_">attr</span>(<span class="string">&#x27;action&#x27;</span>, <span class="string">&#x27;/download/papers/1&#x27;</span>);</span><br><span class="line">    $form.<span class="title function_">appendTo</span>($(<span class="string">&#x27;body&#x27;</span>));</span><br><span class="line">    $form.<span class="title function_">submit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="iframe-获取内部元素"><a href="#iframe-获取内部元素" class="headerlink" title="iframe 获取内部元素"></a>iframe 获取内部元素</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe <span class="keyword">class</span>=<span class="string">&quot;viewbord&quot;</span> src=<span class="string">&quot;&quot;</span> frameborder=<span class="string">&quot;0&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">&quot;music&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> bord = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;viewbord&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    bord.<span class="property">style</span>.<span class="property">height</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    bord.<span class="property">style</span>.<span class="property">width</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span> + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    bord.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;viewbord&#x27;</span>)[<span class="number">0</span>].<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="property">title</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> simUrl = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;viewbord&#x27;</span>)[<span class="number">0</span>].<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;chris-txt-box&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (simUrl) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            simUrl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = simUrl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="IE8-input不支持placeholder处理办法"><a href="#IE8-input不支持placeholder处理办法" class="headerlink" title="IE8 input不支持placeholder处理办法"></a>IE8 input不支持placeholder处理办法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> onblur=<span class="string">&quot;if (this.value == &#x27;&#x27;) &#123;this.value = &#x27;省份&#x27;;&#125;&quot;</span> onfocus=<span class="string">&quot;if (this.value == &#x27;省份&#x27;) &#123;this.value = &#x27;&#x27;;&#125;&quot;</span> value=<span class="string">&quot;省份&quot;</span> &gt;</span><br></pre></td></tr></table></figure>

<h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用递归来实现深拷贝，如果对象属性的值是引用类型（Array,Object），那么对该属性进行深拷贝，直到遍历到属性的值是基本类型为止。  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;    </span><br><span class="line">  <span class="keyword">if</span>(!obj || <span class="keyword">typeof</span> obj!== <span class="string">&#x27;object&#x27;</span>) &#123;      </span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">var</span> newObj= obj.<span class="property">constructor</span> === <span class="title class_">Array</span> ? [] : &#123;&#125;;    </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;       </span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;  </span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        newObj[key] = <span class="title function_">deepClone</span>(obj[key]);          </span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newObj[key] = obj[key];         </span><br><span class="line">      &#125;       </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="webpack兼容IE8"><a href="#webpack兼容IE8" class="headerlink" title="webpack兼容IE8"></a>webpack兼容IE8</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">UglifyJsPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">mangle</span>: &#123;</span><br><span class="line">      <span class="comment">// mangle options, if any</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mangleProperties</span>: &#123;</span><br><span class="line">    <span class="attr">screw_ie8</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//ignore_quoted: true,      // do not mangle quoted properties and object keys</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">compress</span>: &#123;</span><br><span class="line">    <span class="attr">screw_ie8</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//properties: false // optional: don&#x27;t convert foo[&quot;bar&quot;] to foo.bar</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">screw_ie8</span>: <span class="literal">false</span>         </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="H5播放音乐控制"><a href="#H5播放音乐控制" class="headerlink" title="H5播放音乐控制"></a>H5播放音乐控制</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;bgMusic&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;Venice_Beach.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;bgMusicControl rotate play&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//img.dxycdn.com/biz/topic_files/biz/invitation/dist/images/music.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgMusicControl</span> &#123;</span><br><span class="line">    <span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">        from &#123;&#125;</span><br><span class="line">        to &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: .<span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: .<span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">    &amp;<span class="selector-class">.rotate</span> &#123;</span><br><span class="line">        <span class="attribute">animation</span>: rotate <span class="number">5s</span> linear infinite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bgMusic&quot;</span>);</span><br><span class="line">audio.<span class="title function_">play</span>();</span><br><span class="line"><span class="comment">// 兼容微信</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    audio.<span class="title function_">play</span>();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="播放、暂停控制"><a href="#播放、暂停控制" class="headerlink" title="播放、暂停控制"></a>播放、暂停控制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.bgMusicControl&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _ = $(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (_.<span class="title function_">hasClass</span>(<span class="string">&#x27;play&#x27;</span>)) &#123;</span><br><span class="line">        audio.<span class="title function_">pause</span>();</span><br><span class="line">        _.<span class="title function_">removeClass</span>(<span class="string">&#x27;play&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;pause&#x27;</span>)</span><br><span class="line">        _.<span class="title function_">removeClass</span>(<span class="string">&#x27;rotate&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        audio.<span class="title function_">play</span>();</span><br><span class="line">        _.<span class="title function_">removeClass</span>(<span class="string">&#x27;pause&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;play&#x27;</span>)</span><br><span class="line">        _.<span class="title function_">addClass</span>(<span class="string">&#x27;rotate&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="gitignore规则不生效解决办法"><a href="#gitignore规则不生效解决办法" class="headerlink" title=".gitignore规则不生效解决办法"></a>.gitignore规则不生效解决办法</h1><p>原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="判断是否是iPhoneX"><a href="#判断是否是iPhoneX" class="headerlink" title="判断是否是iPhoneX"></a>判断是否是iPhoneX</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isIphoneX = <span class="regexp">/iphone/gi</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>) &amp;&amp; (screen.<span class="property">height</span> == <span class="number">812</span> &amp;&amp; screen.<span class="property">width</span> == <span class="number">375</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">device-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">812px</span>) <span class="keyword">and</span> (-webkit-min-device-pixel-ratio : <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="微信点击触发颜色块"><a href="#微信点击触发颜色块" class="headerlink" title="微信点击触发颜色块"></a>微信点击触发颜色块</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="sleep函数"><a href="#sleep函数" class="headerlink" title="sleep函数"></a>sleep函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>


<h1 id="斐波那契数列第N项"><a href="#斐波那契数列第N项" class="headerlink" title="斐波那契数列第N项"></a>斐波那契数列第N项</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span> (n) &#123;</span><br><span class="line">  <span class="keyword">let</span> n1 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> n2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    sum = n1 + n2</span><br><span class="line">    n1 = n2</span><br><span class="line">    n2 = sum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="keyword">function</span> (<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n-<span class="number">1</span>) + <span class="title function_">fibonacci</span>(n-<span class="number">2</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h3 id="memoization方案进行优化"><a href="#memoization方案进行优化" class="headerlink" title="memoization方案进行优化"></a>memoization方案进行优化</h3><p>memoization方案在《JavaScript模式》和《JavaScript设计模式》都有提到。memoization是一种将函数执行结果用变量缓存起来的方法。当函数进行计算之前，先看缓存对象中是否有次计算结果，如果有，就直接从缓存对象中获取结果；如果没有，就进行计算，并将结果保存到缓存对象中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> memory = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (memory[n] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> memory[n]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">      memory[n] = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      memory[n] = <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memory[n]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fibonacci</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i++ &lt;= n) &#123;</span><br><span class="line">    [a, b] = [b, a + b]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">6</span>))</span><br></pre></td></tr></table></figure>

<h1 id="postMessage使iframe高度自适应"><a href="#postMessage使iframe高度自适应" class="headerlink" title="postMessage使iframe高度自适应"></a>postMessage使iframe高度自适应</h1><h2 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> height = e.<span class="property">data</span>;</span><br><span class="line">  $(<span class="string">&#x27;&#x27;</span>).<span class="title function_">css</span>(<span class="string">&quot;height&quot;</span>, height);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="child"><a href="#child" class="headerlink" title="child"></a>child</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> height = $(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">height</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(height, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="getScript"><a href="#getScript" class="headerlink" title="getScript"></a>getScript</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getScript</span> = (<span class="params">url, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (callback) !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">readyState</span>) &#123;</span><br><span class="line">      script.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (script.<span class="property">readyState</span> === <span class="string">&#x27;loaded&#x27;</span> || script.<span class="property">readyState</span> === <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">          script.<span class="property">onreadystatechange</span> = <span class="literal">null</span></span><br><span class="line">          <span class="title function_">callback</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      script.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  script.<span class="property">src</span> = url</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><p>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title function_">add</span>(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>); <span class="comment">//9</span></span><br></pre></td></tr></table></figure>

<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args1 = [...<span class="variable language_">arguments</span>]</span><br><span class="line">    <span class="keyword">return</span> add.<span class="title function_">apply</span>(<span class="literal">null</span>, args.<span class="title function_">concat</span>(args1))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn.<span class="property">toString</span> = fn.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, item</span>) =&gt;</span> res + item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [...<span class="variable language_">arguments</span>][<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    res += [...<span class="variable language_">arguments</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn.<span class="property">toString</span> = fn.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//十进制转其他</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">110</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>(<span class="number">8</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>(<span class="number">32</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其他转十进制</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="string">&#x27;110&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x,<span class="number">8</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x,<span class="number">16</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其他转其他</span></span><br><span class="line"><span class="comment">//先用parseInt转成十进制再用toString转到目标进制 </span></span><br></pre></td></tr></table></figure>

<h1 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBlob</span> = (<span class="params">url: string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;发生错误&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;发生错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">saveAs</span> = (<span class="params">blob, filename</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  link.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  link.<span class="property">download</span> = filename</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fix Firefox</span></span><br><span class="line">  link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  body &amp;&amp; body.<span class="title function_">appendChild</span>(link)</span><br><span class="line"></span><br><span class="line">  link.<span class="title function_">click</span>()</span><br><span class="line">  body &amp;&amp; body.<span class="title function_">removeChild</span>(link)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getBlob</span>(</span><br><span class="line">  <span class="comment">// 浏览器有缓存的情况下会导致下载失败，所以需要添加时间戳</span></span><br><span class="line">  args.<span class="title function_">add</span>(imgUrl, &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fileName = <span class="string">`filename.png`</span>;</span><br><span class="line">    <span class="title function_">saveAs</span>(blob, fileName);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化上下文</title>
    <url>/2018/11/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<p>BFC 是 <code>W3C CSS 2.1</code> 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。</p>
<span id="more"></span>

<h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><p>BFC 也叫<strong>块格式化上下文</strong></p>
<h2 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h2><p>在解释 BFC 是什么之前，需要先介绍 <code>Box</code>、<code>Formatting Context</code> 的概念。</p>
<h3 id="Box-CSS布局的基本单位"><a href="#Box-CSS布局的基本单位" class="headerlink" title="Box: CSS布局的基本单位"></a>Box: CSS布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 <code>Box</code> 组成的。元素的类型和 <code>display</code> 属性，决定了这个 <code>Box</code> 的类型。 不同类型的 <code>Box</code>， 会参与不同的 <code>Formatting Context</code>（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>
<ul>
<li><strong>block-level</strong> box:display 属性为 <code>block</code>, <code>list-item</code>, <code>table</code> 的元素，会生成 <code>block-level box</code>。并且参与 <code>block fomatting context</code>；</li>
<li><strong>inline-level</strong> box:display 属性为 <code>inline</code>, <code>inline-block</code>, <code>inline-table</code> 的元素，会生成 <code>inline-level box</code>。并且参与 <code>inline formatting context</code>；</li>
<li><strong>run-in</strong> box: CSS3 中才有， 这儿先不讲了。</li>
</ul>
<h3 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="Formatting context"></a>Formatting context</h3><p><strong>Formatting context</strong> 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 <strong>Formatting context</strong> 有 <code>Block fomatting context</code> (简称BFC)和<code> Inline formatting context</code> (简称IFC)。</p>
<p>CSS2.1 中只有 <code>BFC</code> 和 <code>IFC</code>, CSS3 中还增加了 <code>GFC</code> 和 <code>FFC</code>。</p>
<h3 id="BFC-定义"><a href="#BFC-定义" class="headerlink" title="BFC 定义"></a>BFC 定义</h3><p><strong>BFC(Block formatting context)</strong> 直译为”块级格式化上下文”。它是一个独立的渲染区域，只有 <strong>Block-level Box</strong> 参与， 它规定了内部的 <strong>Block-level Box</strong> 如何布局，并且与这个区域外部毫不相干。</p>
<h3 id="BFC布局规则："><a href="#BFC布局规则：" class="headerlink" title="BFC布局规则："></a>BFC布局规则：</h3><ul>
<li>内部的 <strong>Box</strong> 会在垂直方向，一个接一个地放置。</li>
<li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li>
<li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li>BFC 的区域不会与 float box 重叠。</li>
<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算 BFC 的高度时，浮动元素也参与计算</li>
</ul>
<h2 id="哪些元素会生成BFC"><a href="#哪些元素会生成BFC" class="headerlink" title="哪些元素会生成BFC?"></a>哪些元素会生成BFC?</h2><ul>
<li>根元素</li>
<li><code>float</code> 属性不为 <code>none</code></li>
<li><code>position</code> 为 <code>absolute</code> 或 <code>fixed</code></li>
<li><code>display</code> 为 <code>inline-block</code>, <code>table-cell</code>, <code>table-caption</code>, <code>flex</code>, <code>inline-flex</code></li>
<li><code>overflow</code> 不为 <code>visible</code></li>
</ul>
<h2 id="BFC的作用及原理"><a href="#BFC的作用及原理" class="headerlink" title="BFC的作用及原理"></a>BFC的作用及原理</h2><h3 id="自适应两栏布局"><a href="#自适应两栏布局" class="headerlink" title="自适应两栏布局"></a>自适应两栏布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f66</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/4dca44a927d4c1ffc30e3ae5f53a0b79.png"></p>
<p>根据BFC布局规则第3条：</p>
<blockquote>
<p>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p>
</blockquote>
<p>因此，虽然存在浮动的元素aslide，但main的左边依然会与包含块的左边相接触。</p>
<p>根据BFC布局规则第四条：</p>
<blockquote>
<p>BFC 的区域不会与 float box 重叠。</p>
</blockquote>
<p>我们可以通过通过触发 main 生成 BFC， 来实现自适应两栏布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当触发 main 生成 BFC 后，这个新的 BFC 不会与浮动的 aside 重叠。因此会根据包含块的宽度，和 aside 的宽度，自动变窄。效果如下：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/t01077886a9706cb26b.png"></p>
<h3 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/t016035b58195e7909a.png"></p>
<p>根据 BFC 布局规则第六条：</p>
<blockquote>
<p>计算 BFC 的高度时，浮动元素也参与计算</p>
</blockquote>
<p>为达到清除内部浮动，我们可以触发 par 生成 BFC，那么 par 在计算高度时，par 内部的浮动元素 child 也会参与计算。</p>
<p>代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/t016bbbe5236ef1ffd5.png"></p>
<h3 id="防止垂直-margin-重叠"><a href="#防止垂直-margin-重叠" class="headerlink" title="防止垂直 margin 重叠"></a>防止垂直 margin 重叠</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/t01b47b8b7d153c07cc.png"></p>
<p>两个p之间的距离为100px，发送了margin重叠。<br>根据BFC布局规则第二条：</p>
<blockquote>
<p>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</p>
</blockquote>
<p>我们可以在 p 外面包裹一层容器，并触发该容器生成一个 BFC。那么两个 P 便不属于同一个 BFC，就不会发生 margin 重叠了。<br>代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/t0118d1d2badbb00521.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实以上的几个例子都体现了BFC布局规则第五条：</p>
<blockquote>
<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>
</blockquote>
<p>因为 BFC 内部的元素和外部的元素绝对不会互相影响，因此， 当 BFC 外部存在浮动时，它不应该影响 BFC 内部 Box 的布局，BFC 会通过变窄，而不与浮动有重叠。同样的，当 BFC 内部有浮动时，为了不影响外部元素的布局，BFC 计算高度时会包括浮动的高度。避免 margin 重叠也是这样的一个道理。</p>
<h1 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h1><p>IFC(Inline Formatting Contexts)即 <strong>内联排版上下文</strong>，也可称为 <strong>内联格式化上下文</strong>。用来规定内联级盒子的格式化规则。</p>
<h2 id="布局规则"><a href="#布局规则" class="headerlink" title="布局规则"></a>布局规则</h2><ol>
<li>内部的<code>Box</code>会在水平方向，一个接一个地放置。</li>
<li>这些<code>Box</code>垂直方向的起点从包含块盒子的顶部开始。</li>
<li>摆放这些<code>Box</code>的时候，它们在水平方向上的外边距、边框、内边距所占用的空间都会被考虑在内。</li>
<li>在垂直方向上，这些框可能会以不同形式来对齐（<code>vertical-align</code>）：它们可能会使用底部或顶部对齐，也可能通过其内部的文本基线（<code>baseline</code>）对齐。</li>
<li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框（<code>line box</code>）。行框的宽度是由包含块（<code>containing box</code>）和存在的浮动来决定。</li>
<li>IFC中的<code>line box</code>一般左右边都贴紧其包含块，但是会因为<code>float</code>元素的存在发生变化。<code>float</code>元素会位于IFC与<code>line box</code>之间，使得<code>line box</code>宽度缩短。</li>
<li>IFC中的<code>line box</code>高度由CSS行高计算规则来确定，同个IFC下的多个<code>line box</code>高度可能会不同（比如一行包含了较高的图片，而另一行只有文本）。</li>
<li>当<code>inline-level box</code>的总宽度少于包含它们的<code>line box</code>时，其水平渲染规则由<code>text-align</code>属性来确定，如果取值为<code>justify</code>，那么浏览器会对<code>inline-box</code>（注意不是inline-table 和 inline-block box）中的文字和空格做 出拉伸。</li>
<li>当一个<code>inline box</code>超过<code>line box</code>的宽度时，它会被分割成多个box，这些box被分布在多个<code>line box</code>里。如果一个<code>inline box</code>不能被分割（比如只包含单个字符，或<code>word-breaking</code>机制被禁用，或该行内框受<code>white-space</code>属性值 为<code>nowrap</code>或<code>pre</code>的影响），那么这个<code>inline box</code>将溢出这个<code>line box</code>。</li>
</ol>
<blockquote>
<p>上面的术语可能会看得有点迷糊，一会儿inline box，一会儿line box。line box是 <strong>行框</strong>，inline box是 <strong>行内框</strong>（或称为 <strong>内联框</strong>），我们可简单按字面意思来理解：行内框是包含在行框内（或多个行框内，当出现换行时）的。</p>
</blockquote>
<h2 id="行框和行内框"><a href="#行框和行内框" class="headerlink" title="行框和行内框"></a>行框和行内框</h2><h3 id="行框"><a href="#行框" class="headerlink" title="行框"></a>行框</h3><p><img data-src="//blogimg.jakeyu.top/BFC/o_text_021.gif"></p>
<p>行框（line box），同行内框类似的概念，行框是指本行的一个虚拟的矩形框，也是浏览器渲染模式中的一个概念。行框高度等于本行内所有元素中行内框最大的值（以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度）。</p>
<h3 id="行内框"><a href="#行内框" class="headerlink" title="行内框"></a>行内框</h3><p><img data-src="//blogimg.jakeyu.top/BFC/o_text_020.gif"></p>
<p>行内框是一个浏览器渲染模型中的一个概念，无法显示出来，但是它又确实存在，它的高度就是行高指定的高度。</p>
<h2 id="何时会生成IFC"><a href="#何时会生成IFC" class="headerlink" title="何时会生成IFC"></a>何时会生成IFC</h2><p>和BFC可以被元素属性触发而被创建（triggered）不同，IFC只有在一个块元素中仅包含内联级别元素时才会生成。</p>
<p>下面我们通过一个实例来看看行内框的构造：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Several <span class="tag">&lt;<span class="name">em</span>&gt;</span>emphasized words<span class="tag">&lt;/<span class="name">em</span>&gt;</span> appear <span class="tag">&lt;<span class="name">strong</span>&gt;</span>in this<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> sentence, dear.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: whitesmoke;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: medium;</span><br><span class="line">    <span class="attribute">border-style</span>: dashed;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/Jietu20181128-225810.png"></p>
<p>p 元素产生一个块框，它包含了五个行内框，其中的三个是匿名的：</p>
<ul>
<li>匿名：”Several”</li>
<li>EM: “emphasized words”</li>
<li>匿名：”appear”</li>
<li>STRONG: “in this”</li>
<li>匿名：”sentence, dear.”</li>
</ul>
<p>为了格式化这个段落，用户代理将这五个框排入行框内。本例中，为 p 元素生成的框生成了行内框的包含块。如果该包含块足够宽，则所有的行内框将放在一个行框内。</p>
<p>否则inline box将产生分割，来放置在多个行框内。如上例中所示，这个段落被分布在3个行框中。您可以在上例中修改p元素的width来查看不同的格式化效果。</p>
<p>上例中，em元素被分割成2块（我们把它们称为“split1”和“split2”），margin、padding、border和text-decoration属性将不在分割处产生视觉效果，也就是在split1之后和split2之前无效。</p>
<p>回过来看上面的例子中这些属性的影响：</p>
<ul>
<li>margin 会被插入到 “emphasized” 之前和 “words” 之后。</li>
<li>padding 会被插入到 “emphasized” 的前面和上下，以及 “words” 的后面和上下。</li>
<li>border 将绘制在 “emphasized” 的前面和上下，以及 “words” 的后面和上下。</li>
</ul>
<h2 id="IFC有什么用途"><a href="#IFC有什么用途" class="headerlink" title="IFC有什么用途"></a>IFC有什么用途</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用IFC布局，display:inline-block、text-align:center和vertical-align:middle方法来实现文本垂直居中 inline-block元素以单个封闭块来参与外部的IFC，其内部会生成一个BFC，不在本例讨论范围之内。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: normal;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img data-src="//blogimg.jakeyu.top/BFC/Jietu20181128-230214.png"></p>
<ul>
<li>我们使用一个块元素来包含一个内联元素，这样会生成一个IFC来规定如何渲染行内元素。按照IFC行内框的布局规则，其水平位置将由text-align属性来确定，所以设置text-align:center将把行内框居中。</li>
<li>外部块元素的行高为内部行框设定了最小高度，好比在渲染时以一个隐藏的0宽度字符开始，具备该块元素所设置的行高（本例中为300px）和字体属性，我们称之为是一个支架（strut），作用是把外部块元素撑起来。参考阅读W3规范：<a href="https://www.w3.org/TR/CSS2/visudet.html#strut">Strut</a>。</li>
<li>然后我们设置内联（或内联块）元素的垂直对齐属性为中间，它将参照前述的隐藏支架的baseline来对齐。如果我们把块元素的字体设置为0，实际效果就是内联元素被垂直居中放置在块元素中。</li>
</ul>
<h2 id="行高计算"><a href="#行高计算" class="headerlink" title="行高计算"></a>行高计算</h2><p>用户代理（user agent）将行内级框排入垂直堆叠的行框内。行框的高度由下面步骤决定：</p>
<ol>
<li>计算行框里的各行内级框的高度。对于置换元素、行内块元素、行内表格元素来说，这是边界框的高度，对于行内框来说，这是其‘line-height’。</li>
<li>行内级元素根据其<code>vertical-align</code>属性垂直对齐。如果这些框使用<code>top</code>或<code>bottom</code>对齐，用户代理必须以最小化行框的高为目标对齐这些框。这可能存在多种对齐方案，CSS 2.1并不定义行框基线的位置（也就是前述strut的位置）。</li>
<li>行框的高是最顶端框的顶边到最底端框的底边的距离。</li>
</ol>
<blockquote>
<p>空的行内元素产生空的行内框，但是这些框仍然拥有margins, padding, borders 和一个line height, 所以在上述行高计算中和有内容的行内元素一样。</p>
</blockquote>
<h3 id="行距（Leading）和半行距（half-leading）"><a href="#行距（Leading）和半行距（half-leading）" class="headerlink" title="行距（Leading）和半行距（half-leading）"></a>行距（Leading）和半行距（half-leading）</h3><p>CSS 假设所有字体的度量都有基线以上的height和基线以下的depth，我们使用A（ascender）来表示这个height（字母高出基线部分），而用D（descender）来表示depth（字母低出基线部分）。</p>
<p>同时我们定义 AD &#x3D; A + D，也就是整个字母的高度。</p>
<p>User agent 必须在一个非替换行内框中按照字符（glyphs）的基线对它们进行对齐。也就是确定A 和 D。 某元素中的字符可能存在多个字体，A 和 D则不尽相同。如果这个行内框不包含任何字符，它被认为包含一个strut（一个0宽度的隐藏字符），这个隐藏字符的A 和 D遵循该元素的第一个有效字体。</p>
<p>除了前面所介绍的BFC和IFC之外，CSS3还引入了新的布局方式及其所生成的格式化上下文，包括grid layout所对应的GFC（grid formatting context）和flex layout所对应的FFC（flex formatting context）。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html">前端精选文摘：BFC 神奇背后的原理</a></li>
<li><a href="http://techbrood.com/h5b2a?p=css-ifc">CSS 内联排版上下文（Inline Formatting Context）</a></li>
<li><a href="https://blog.csdn.net/zp1996323/article/details/51457836">css中的baseline</a></li>
<li><a href="https://blog.csdn.net/q121516340/article/details/51483439">深入理解 CSS 中的行高与基线</a></li>
<li><a href="https://segmentfault.com/a/1190000006808606">img的间隙</a></li>
<li><a href="https://www.cnblogs.com/zxjwlh/p/6219896.html">inline-block元素vertical-align的问题分析</a></li>
<li><a href="https://github.com/chokcoco/iCSS/issues/5">谈谈一些有趣的CSS题目</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>横向视频在手机垂直时全屏播放</title>
    <url>/2018/03/08/%E6%A8%AA%E5%90%91%E8%A7%86%E9%A2%91%E5%9C%A8%E6%89%8B%E6%9C%BA%E5%9E%82%E7%9B%B4%E6%97%B6%E5%85%A8%E5%B1%8F%E6%92%AD%E6%94%BE/</url>
    <content><![CDATA[<p>通过监听<code>window.orientation</code>，让视频在手机上保持全屏播放</p>
<span id="more"></span>

<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;video&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">controls</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x5-video-player-type</span>=<span class="string">&quot;h5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x5-video-player-fullscreen</span>=<span class="string">&#x27;true&#x27;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">preload</span></span></span><br><span class="line"><span class="tag">        <span class="attr">webkit-playsinline</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">playsinline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x5-video-orientation</span>=<span class="string">&quot;landscape&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x5-video-player-type</span>=<span class="string">&quot;h5&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;//img.dxycdn.com/biz/topic_files/biz/lilai-onconnect-h5/dist/video/video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.video-wrap</span> &#123;</span><br><span class="line">    &amp;<span class="selector-class">.vertical</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-class">.horizontal</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#video</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $video = $(<span class="string">&#x27;.video-wrap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeVideoDirection</span>(<span class="variable language_">window</span>.<span class="property">orientation</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听屏幕旋转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;orientationchange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">changeVideoDirection</span>(<span class="variable language_">window</span>.<span class="property">orientation</span>)</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视频自动播放</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">[type]</span>&#125; [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">videoAutoPlay</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  video.<span class="title function_">play</span>()</span><br><span class="line">  <span class="comment">// 兼容微信</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    video.<span class="title function_">play</span>()</span><br><span class="line">  &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ended&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;location.origin&#125;</span>/services/onconnect/form`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改视频播放角度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">[type]</span>&#125; angle 0：竖屏 90：横屏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">[type]</span>&#125;       [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeVideoDirection</span> (angle) &#123;</span><br><span class="line">  <span class="keyword">if</span>(angle == <span class="number">0</span>) &#123;</span><br><span class="line">    $video.<span class="title function_">removeClass</span>(<span class="string">&#x27;horizontal&#x27;</span>)</span><br><span class="line">    $video.<span class="title function_">addClass</span>(<span class="string">&#x27;vertical&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> clientW = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span></span><br><span class="line">    <span class="keyword">let</span> clientH = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line">    $video.<span class="title function_">width</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(clientW, clientH))</span><br><span class="line">    $video.<span class="title function_">height</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(clientW, clientH))</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $video.<span class="title function_">removeClass</span>(<span class="string">&#x27;vertical&#x27;</span>)</span><br><span class="line">    $video.<span class="title function_">addClass</span>(<span class="string">&#x27;horizontal&#x27;</span>)</span><br><span class="line">    $video.<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    $video.<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>注册ChatGPT详细指南</title>
    <url>/2022/12/09/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/cbsn-fusion-promise-fear-of-artificial-intelligence-bot-chatgpt-thumbnail-1528537-640x360.jpeg"></p>
<span id="more"></span>

<p>最近ChatGPT真受欢迎，但是有些人注册时会经常面临不服务它们的地区问题，现在我们给你详细问题解决。</p>
<p>作者 <a href="https://twitter.com/BoxMrChen">twitter</a></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>代理。要求是韩国，日本，印度，新加坡，美国这些国家的地址都合适。对其他的我们还不太清楚，反正香港或中国的代理肯定不行。<a href="https://join.v2club.cc/#/register?code=C5EnE7vC">推荐机场</a></li>
<li>找一个国外手机号码，如果你没有用过接码平台也行，有些接码平台是无法接的，所以我们推荐一个就是 <a href="https://sms-activate.org/?ref=2862835">sms-activate.org</a></li>
<li>准备一个浏览器</li>
</ol>
<h1 id="开始一步一步注册"><a href="#开始一步一步注册" class="headerlink" title="开始一步一步注册"></a>开始一步一步注册</h1><h2 id="第一步是接验证码"><a href="#第一步是接验证码" class="headerlink" title="第一步是接验证码"></a>第一步是接验证码</h2><p>打开接码平台 <a href="https://sms-activate.org/?ref=2862835">sms-activate.org</a>，注册一个账号</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/pasted%20image%200.png"></p>
<p>然后要充值余额</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image.png"></p>
<p>一次接码OpenAi的验证码费用是大概11卢布，人民币来看差不多是1块钱，不过只能充美金，就先充直个1美金钱。可以选择对你任何方便方式。支付宝也有</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image%20(1).png"></p>
<p>充值完成可能需要等一会，就先放着，直接进行下一步。</p>
<h2 id="第二部是注册一个OpenAI账号"><a href="#第二部是注册一个OpenAI账号" class="headerlink" title="第二部是注册一个OpenAI账号"></a>第二部是注册一个OpenAI账号</h2><p>首先打开<a href="https://beta.openai.com/signup">ChatGPT的账户注册页面</a>。谷歌注册或者邮箱注册都可以，无所谓，我们这里用邮箱注册作为例子。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled.png"></p>
<p>用邮箱注册后你要验证邮件。进去邮箱，查看email里的链接。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image-2.png"></p>
<p>这里你需要输入需要的信息。</p>
<p>当然，有一些人会在这里遇到一个问题，会出现说不能在当前国家服务的提示。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image-3.png"></p>
<p>不用怕，这个这文章就帮助你解决这个问题。</p>
<p>这方面那，给你一招。一般你出现这种问题，就是因为你的代理没有全局，或者位置不对。香港或中国的的代理是100%无法通过的。</p>
<p>这个问题是非常神奇的，只要你出现了这个提示，那么你接下来怎么切换代理，都是没用的。现在提供给你你一招解决。</p>
<h2 id="解决地区问题"><a href="#解决地区问题" class="headerlink" title="解决地区问题"></a>解决地区问题</h2><p>先，你要把你的代理切换到任何合适的地区，我们这里选择了韩国。</p>
<p>然后，先复制下面这段代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>).<span class="title function_">find</span>(<span class="function"><span class="params">i</span>=&gt;</span>i.<span class="title function_">startsWith</span>(<span class="string">&#x27;@@auth0spajs&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p>接着在地址栏里输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">javascript</span>:</span><br></pre></td></tr></table></figure>

<p>请注意，这里一定要输入，因为你复制的话是粘贴不了的。</p>
<p>然后再粘贴我们第一段复制的内容：</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled-1.png"></p>
<p>然后按下回车键，刷新页面。如果你的代理没问题，就可以看到正常工作的注册页面了。</p>
<h2 id="输入手机号码"><a href="#输入手机号码" class="headerlink" title="输入手机号码"></a>输入手机号码</h2><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled-2.png"></p>
<p>这里选的是韩国，这是因为我们使用韩国的代理，但是我们最好选择印度。然后到我们的接码网站上去。在左侧搜索OpenAi，然后点击印度。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/sdfdskfjdls.png"></p>
<p>点击”小黄车”。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/pasted%20image%200-2.png"></p>
<p>然后我们复制这个号码，粘贴过去。然后我们点击发送验证码就完成了。</p>
<p>等一会网站会提示验证码，我们复制粘贴。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image-4.png"></p>
<p>这里你要选择你打算如何使用OpenAI。随便选择吧。</p>
<h2 id="使用ChatGPT"><a href="#使用ChatGPT" class="headerlink" title="使用ChatGPT"></a>使用ChatGPT</h2><p>注册完后，打开<a href="https://chat.openai.com/auth/login">ChatGPT网站</a>去登陆。</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled-5.png"></p>
<p>在下面这个地方就可以开始写你的任何巧妙的句子了。取乐吧！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 instanceof 和 typeof 的实现原理</title>
    <url>/2018/11/13/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/images.png"></p>
<span id="more"></span>

<h2 id="typeof-实现原理"><a href="#typeof-实现原理" class="headerlink" title="typeof 实现原理"></a>typeof 实现原理</h2><p><code>typeof</code> 一般被用于判断一个变量的类型，我们可以利用 <code>typeof</code> 来判断<code>number</code>, <code>string</code>, <code>object</code>,<code>boolean</code>, <code>function</code>, <code>undefined</code>, <code>symbol</code> 这七种类型，这种判断能帮助我们搞定一些问题，比如在判断不是 <code>object</code> 类型的数据的时候，<code>typeof</code>能比较清楚的告诉我们具体是哪一类的类型。但是，很遗憾的一点是，<code>typeof</code> 在判断一个<code> object</code>的数据的时候只能告诉我们这个数据是 <code>object</code>, 而不能细致的具体到是哪一种 <code>object</code>, 比如👉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">typeof</span> s === <span class="string">&#x27;object&#x27;</span><span class="comment">// true</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>要想判断一个数据具体是哪一种 <code>object</code> 的时候，我们需要利用 <code>instanceof</code> 这个操作符来判断，这个我们后面会说到。</p>
<p>来谈谈关于 <code>typeof</code> 的原理吧，我们可以先想一个很有意思的问题，js 在底层是怎么存储数据的类型信息呢？或者说，一个 js 的变量，在它的底层实现中，它的类型信息是怎么实现的呢？</p>
<p>其实，js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉</p>
<ul>
<li>000：对象</li>
<li>010：浮点数</li>
<li>100：字符串</li>
<li>110：布尔</li>
<li>1：整数</li>
</ul>
<p>but, 对于 <code>undefined</code> 和 <code>null</code> 来说，这两个值的信息存储是有点特殊的:</p>
<ul>
<li><code>null</code>：所有机器码均为0</li>
<li><code>undefined</code>：用 −2^30 整数来表示</li>
</ul>
<p>所以，<code>typeof</code> 在判断 <code>null</code> 的时候就出现问题了，由于 <code>null</code> 的所有机器码均为0，因此直接被当做了对象来看待。</p>
<p>然而用 <code>instanceof</code> 来判断的话👉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="literal">null</span> <span class="comment">// TypeError: Right-hand side of &#x27;instanceof&#x27; is not an object</span></span><br></pre></td></tr></table></figure>

<p><code>null</code> 直接被判断为不是 <code>object</code>，这也是 <code>JavaScript</code> 的历史遗留bug，可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a>。</p>
<p>因此在用 <code>typeof</code> 来判断变量类型的时候，我们需要注意，最好是用 <code>typeof</code> 来判断基本数据类型（包括<code>symbol</code>），避免对 <code>null</code> 的判断。</p>
<p>还有一个不错的判断类型的方法，就是<code>Object.prototype.toString</code>，我们可以利用这个方法来对一个变量的类型来进行比较准确的判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>) <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;hi&#x27;</span>) <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;hi&#x27;</span>&#125;) <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>]) <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="number">1</span>)) <span class="comment">// &quot;[object Symbol]&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof-操作符的实现原理"><a href="#instanceof-操作符的实现原理" class="headerlink" title="instanceof 操作符的实现原理"></a>instanceof 操作符的实现原理</h2><p>之前我们提到了 <code>instanceof</code> 来判断对象的具体类型，其实 <code>instanceof</code> 主要的作用就是判断一个实例是否属于某种类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当然，<code>instanceof</code> 也可以判断一个实例是否是其父类型或者祖先类型的实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> programmer = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">programmer.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> <span class="title function_">programmer</span>()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br><span class="line">nicole <span class="keyword">instanceof</span> programmer <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>这是 <code>instanceof</code> 的用法，但是 <code>instanceof</code> 的原理是什么呢？根据 ECMAScript 语言规范，我梳理了一下大概的思路，然后整理了一段代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">new_instance_of</span> (leftVaule, rightVaule) &#123;</span><br><span class="line">  <span class="keyword">let</span> rightProto = rightVaule.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">  leftVaule = leftVaule.<span class="property">__proto__</span> <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  	<span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftVaule = leftVaule.<span class="property">__proto__</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实 <code>instanceof</code> 主要的实现原理就是只要右边变量的 <code>prototype</code> 在左边变量的原型链上即可。因此，<code>instanceof</code> 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 <code>prototype</code>，如果查找失败，则会返回 <code>false</code>，告诉我们左边变量并非是右边变量的实例。</p>
<p>看几个很有趣的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Foo</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>要想全部理解 <code>instanceof</code> 的原理，除了我们刚刚提到的实现原理，我们还需要知道 JavaScript 的原型继承原理。</p>
<p>关于原型继承的原理，我简单用一张图来表示</p>
<p><img data-src="//blogimg.jakeyu.top/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/e46508fbcd140db304232aba89f41c83_articlex.jpeg"></p>
<p>我们知道每个 JavaScript 对象均有一个隐式的 <code>__proto__</code> 原型属性，而显式的原型属性是 <code>prototype</code>，只有 <code>Object.prototype.__proto__</code> 属性在未修改的情况下为 null 值。根据图上的原理，我们来梳理上面提到的几个有趣的 <code>instanceof</code> 使用的例子。</p>
<h3 id="Object-instanceof-Object"><a href="#Object-instanceof-Object" class="headerlink" title="Object instanceof Object"></a>Object instanceof Object</h3><p>由图可知，Object 的 <code>prototype</code> 属性是 <code>Object.prototype</code>, 而由于 Object 本身是一个函数，由 Function 所创建，所以 <code>Object.__proto__</code> 的值是 <code>Function.prototype</code>，而 <code>Function.prototype</code> 的 <code>__proto__</code> 属性是 <code>Object.prototype</code>，所以我们可以判断出，<code>Object instanceof Object</code> 的结果是 true 。用代码简单的表示一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">leftValue = <span class="title class_">Object</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">rightValue = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">leftValue === rightValue</span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure>

<p><code>Function instanceof Function</code> 和 <code>Function instanceof Object</code> 的运行过程与 <code>Object instanceof Object</code> 类似，故不再详说。</p>
<h3 id="Foo-instanceof-Foo"><a href="#Foo-instanceof-Foo" class="headerlink" title="Foo instanceof Foo"></a>Foo instanceof Foo</h3><p>Foo 函数的 <code>prototype</code> 属性是 <code>Foo.prototype</code>，而 Foo 的 <code>__proto__</code> 属性是 <code>Function.prototype</code>，由图可知，Foo 的原型链上并没有 <code>Foo.prototype</code> ，因此 <code>Foo instanceof Foo</code> 也就返回 false 。</p>
<p>我们用代码简单的表示一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">leftValue = <span class="title class_">Foo</span>, rightValue = <span class="title class_">Foo</span></span><br><span class="line">leftValue = <span class="title class_">Foo</span>.<span class="property">__proto</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">rightValue = <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 第三次判断</span></span><br><span class="line">leftValue === <span class="literal">null</span></span><br><span class="line"><span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure>

<h3 id="Foo-instanceof-Object"><a href="#Foo-instanceof-Object" class="headerlink" title="Foo instanceof Object"></a>Foo instanceof Object</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">leftValue = <span class="title class_">Foo</span>, rightValue = <span class="title class_">Object</span></span><br><span class="line">leftValue = <span class="title class_">Foo</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">rightValue = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">leftValue === rightValue</span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure>

<h3 id="Foo-instanceof-Function"><a href="#Foo-instanceof-Function" class="headerlink" title="Foo instanceof Function"></a>Foo instanceof Function</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">leftValue = <span class="title class_">Foo</span>, rightValue = <span class="title class_">Function</span></span><br><span class="line">leftValue = <span class="title class_">Foo</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">rightValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue === rightValue</span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说，我们使用 <code>typeof</code> 来判断基本数据类型是 ok 的，不过需要注意当用 <code>typeof</code> 来判断 null 类型时的问题，如果想要判断一个对象的具体类型可以考虑用 <code>instanceof</code>，但是 <code>instanceof</code> 也可能判断不准确，比如一个数组，他可以被 <code>instanceof</code> 判断为 Object。所以我们要想比较准确的判断对象实例的类型时，可以采取 <code>Object.prototype.toString.call</code> 方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5b0b9b9051882515773ae714">https://juejin.im/post/5b0b9b9051882515773ae714</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>现实</title>
    <url>/2018/10/22/%E7%8E%B0%E5%AE%9E/</url>
    <content><![CDATA[<p>本不打算在这个博客里面写一些矫情的文字，我有另一个不公开的博客。但是这篇，我想写在这里。</p>
<span id="more"></span>

<p>跟她分手了，原因也很简单————现实。</p>
<p>她在美国读书，家境殷实，而我只是一个出身农村普通家庭，从小与水稻、大地为伴。</p>
<p>我一直在努力赚钱，喜欢杭州，想要留在这里。本来异国恋已经很难了，而且我早有心理准备，没想到这一天到来的时候还是会无法释怀。</p>
<p>20多岁的女孩子总归要考虑结婚，未来的问题，买房紧一紧首付还是有的，可是以后呢，跟着我一起吃苦，还房贷。如果再有一个宝宝，她的生活质量会明显下降，她也说过如果在一起会让生活质量下降，那就没必要在一起了。</p>
<p>在一起的这段时间我很开心，她脾气也很好，没有公主脾气，我也全心全意去爱她。开始的时候就清楚的知道想到走到最后很难，即便是她这关过了，她父母呢？哪个女孩子的家长愿意让自己的女儿吃苦。家庭条件我无法选择，我也知道什么都不能靠家里，可是我刚毕业，几乎没有存款。二十多岁的男生，如果不靠家里，又有谁有钱呢，可是哪个女孩子愿意用青春去赌一个未知的未来？她想要的生活我短时间给不了，所以只能放弃，即便很痛苦。</p>
<p>年轻的时候我想不明白为什么会因为外在因素而导致两个相爱的人分道扬镳，想不通为什么一方家长的不同意导致本来都谈婚乱嫁的新人分开……小时候告诉自己谈恋爱一定不分手，可现在洋洋洒洒已经七段感情，但是真正算是好好谈恋爱的也就那么两段。</p>
<p>我们再也不是十八岁，现在看到还在上学，无忧无虑的孩子们只能感叹一句“年轻真好”，那时候我们可以天马行空，做着很多梦，哥几个在一起聊得都是毕业赚多少多少钱，各种游戏开黑，女人等，一旦毕业工作，那些幻想都闭口不谈，慢慢的被现实磨灭。我们几个兄弟有一个群，大学的时候经常闲聊，隔三差五讨论去哪玩、去哪喝酒，晚上喊着楼下来抽一根，无忧无虑，而现在更多的是车子、房子、工资，互相吹捧，用着一些我很讨厌的语气，气氛甚是诡异。而且大家基本都很少说话，一部分是因为大家都忙，一部分是因为感情变了。大家都为各自的生活忙碌奔波，王小波说过：“生活就是个缓慢受锤的过程”。</p>
<p>愿那些跟我一样，在大城市挣扎的人们都不会被这魔幻的地方所抛弃。</p>
]]></content>
      <categories>
        <category>随心</category>
      </categories>
  </entry>
  <entry>
    <title>理解JavaScript闭包</title>
    <url>/2016/07/07/%E7%90%86%E8%A7%A3JavaScript%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>理解JavaScript闭包</p>
<span id="more"></span>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>要理解闭包，必须先理解JavaScript特殊变量的作用域</p>
<p>变量的作用域无非就是两种：<strong>全局变量</strong>、<strong>局部变量</strong>。</p>
<p>JavaScript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(n);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>在函数的外部无法读取函数内部的局部变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">alert</span>(n); <span class="comment">//error:n is not defined</span></span><br></pre></td></tr></table></figure>

<p>注意：在函数内部声明变量的时候，一定要用var。如果不用的话，会声明一个全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	n = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">alert</span>(n); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h2 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h2><p>有时候，我们需要得到函数内部的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现，那就是在函数内部定义一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(n);	<span class="comment">//10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，函数f2就被包括在函数f1内部，这是f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是JavaScript语言特有的“链式作用域”结构，子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">result</span>();	<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><p>上面所讲的f2函数，就是闭包</p>
<p>闭包就是能够读取其它函数内部局部变量的函数。</p>
<p>由于在JavaScript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。</p>
<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><p>闭包可以用在许多地方。它的最大用处有两个：<strong>一个是前面提到的可以读取函数内部的变量</strong>，<strong>另一个就是让这些变量的值始终保存在内存中</strong></p>
<p>什么意思呢？请看下面的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">	add = <span class="keyword">function</span>(<span class="params"></span>)&#123;n+=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f2;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">result</span>();	<span class="comment">//10</span></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">result</span>();	<span class="comment">//11</span></span><br></pre></td></tr></table></figure>

<p>这段代码中，result实际上就是闭包f2函数。它一共运行两次，第一次值是10，第二次值是11。这说明<strong>函数f1中的局部变量n并没有在f1被调用后被删除，说明n一直保存在内存中</strong></p>
<p>原因就在于f1是f2的父函数，而f2被赋予了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p>
<p>这段代码中另一个值得注意的地方，就是“nAdd&#x3D;function(){n+&#x3D;1}”这一行，首先在nAdd前面没有使用var关键字，因此 nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h2 id="for循环中的闭包"><a href="#for循环中的闭包" class="headerlink" title="for循环中的闭包"></a>for循环中的闭包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>( <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">        &#125;,i*<span class="number">1000</span> ); <span class="comment">//这一行将i*1000改为j*1000也行，并不影响</span></span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者下面写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">    &#125;,j*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如果你能理解下面代码的运行结果，应该就理解闭包的运行机制了"><a href="#如果你能理解下面代码的运行结果，应该就理解闭包的运行机制了" class="headerlink" title="如果你能理解下面代码的运行结果，应该就理解闭包的运行机制了"></a>如果你能理解下面代码的运行结果，应该就理解闭包的运行机制了</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Jake&quot;</span>;</span><br><span class="line">obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;laoyu&quot;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getName</span>()();  <span class="comment">//laoyu   jake</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>理解this</title>
    <url>/2016/11/21/%E7%90%86%E8%A7%A3this/</url>
    <content><![CDATA[<p>JavaScript中this和其它语言中的不同。在下面这些情况中，分别有不同的指向</p>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>这里this指向全局对象，浏览器中的全局对象为window</p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">method</span>(); <span class="comment">//返回foo</span></span><br></pre></td></tr></table></figure>

<p>假如我们把这个方法负值给一个变量再调用会怎么样，我们试试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">method</span>(); <span class="comment">//返回foo</span></span><br><span class="line"><span class="keyword">var</span> abc = foo.<span class="property">method</span>;</span><br><span class="line"><span class="title function_">abc</span>();	<span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<p>是不是很神奇，一会我会说一个简便的理解方法。</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">foo</span>(); </span><br></pre></td></tr></table></figure>

<p>这种形式我们称之为构造函数，这时this指向新创建的对象</p>
<h2 id="主动设置this"><a href="#主动设置this" class="headerlink" title="主动设置this"></a>主动设置this</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">obj</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;jake&#x27;</span>); <span class="comment">//window</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj, <span class="string">&#x27;Jake&#x27;</span>); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure>

<p>当时我们使用call或者apply时，传入的第一个参数即位this</p>
<h2 id="简便理解"><a href="#简便理解" class="headerlink" title="简便理解"></a>简便理解</h2><p>我们可以将函数调用转化为call的形式，call中第一个参数即位调用的函数前面的部分。</p>
<h3 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h3><p>我们可以将</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>
<p>转化为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="title function_">call</span>();</span><br></pre></td></tr></table></figure>

<p>此时foo前面没有对象，没有给call传入this参数，此时默认为全局对象，即window</p>
<h3 id="方法调用-1"><a href="#方法调用-1" class="headerlink" title="方法调用"></a>方法调用</h3><p>方法调用时，我们可以将</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="title function_">method</span>();</span><br></pre></td></tr></table></figure>

<p>转化为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="property">method</span>.<span class="title function_">call</span>(foo);</span><br></pre></td></tr></table></figure>

<p>method前面的对象为foo，则此时前面的this指向foo对象。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端fixed和input获取焦点软键盘弹出影响定位的问题</title>
    <url>/2018/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AFfixed%E5%92%8Cinput%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E5%BD%B1%E5%93%8D%E5%AE%9A%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在移动端使用fixed将按钮定位在底部时，当input获取焦点弹出软键盘时，在安卓系统会奖底部的按钮顶上去。效果图：</p>
<p><img data-src="//blogimg.jakeyu.top/%E7%A7%BB%E5%8A%A8%E7%AB%AFfixed%E5%92%8Cinput%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E5%BD%B1%E5%93%8D%E5%AE%9A%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/WechatIMG6.jpeg"></p>
<span id="more"></span>

<p>解决办法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> h = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> &lt; h) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;footer&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;footer&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端头部整理</title>
    <url>/2016/11/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%A4%B4%E9%83%A8%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>移动端的头部标签和meta</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;标题&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置屏幕缩放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-itunes-app&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telphone=no, email=no&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge, chrome=1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;HandheldFriendly&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;MobileOptimized&quot;</span> <span class="attr">content</span>=<span class="string">&quot;320&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;full-screen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-fullscreen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-tap-highlight&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iOS 图标 begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/apple-touch-icon-57x57-precomposed.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;114x114&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/apple-touch-icon-114x114-precomposed.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;144x144&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/apple-touch-icon-144x144-precomposed.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iOS 图标 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- iOS 启动画面 begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;768x1004&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/splash-screen-768x1004.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;1536x2008&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/splash-screen-1536x2008.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;1024x748&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/Default-Portrait-1024x748.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;2048x1496&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/splash-screen-2048x1496.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/splash-screen-320x480.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;640x960&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/splash-screen-640x960.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;640x1136&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/splash-screen-640x1136.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iOS 启动画面 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- iOS 设备 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-TileColor&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-TileImage&quot;</span> <span class="attr">content</span>=<span class="string">&quot;icon.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;alternate&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/rss+xml&quot;</span> <span class="attr">title</span>=<span class="string">&quot;RSS&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/rss.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加 RSS 订阅 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/ico&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加 favicon icon --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/2018/11/26/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort.png"></p>
<span id="more"></span>

<h1 id="排序算法说明"><a href="#排序算法说明" class="headerlink" title="排序算法说明"></a>排序算法说明</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对一序列对象根据某个关键字进行排序。</p>
<h2 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h2><ul>
<li><strong>稳定</strong>：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</li>
<li><strong>不稳定</strong>：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</li>
<li><strong>内排序</strong>：所有排序操作都在内存中完成；</li>
<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li><strong>时间复杂度</strong>：一个算法执行所耗费的时间。</li>
<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</li>
</ul>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote>
<p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
</blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]]  <span class="comment">//交换元素</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><blockquote>
<p>改进冒泡排序： 设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[i], arr[i + <span class="number">1</span>]] = [arr[i + <span class="number">1</span>], arr[i]] <span class="comment">// 交换元素</span></span><br><span class="line">        pos = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = pos</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动图"><a href="#动图" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort05.gif"></p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul>
<li>最佳情况：T(n) &#x3D; O(n)</li>
</ul>
<p>当输入的数据已经是正序时</p>
<ul>
<li>最差情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
</ul>
<p>当输入的数据是反序时</p>
<ul>
<li>平均情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
</ul>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><blockquote>
<p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n²)的时间复杂度…..所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>
</blockquote>
<h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><blockquote>
<p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
</blockquote>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ol>
<li>初始状态：无序区为R[1..n]，有序区为空；</li>
<li>第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>n-1趟结束，数组有序化了。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> minIndex</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动图-1"><a href="#动图-1" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort06.gif"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>最佳情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
<li>最差情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
<li>平均情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
</ul>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><blockquote>
<p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了…..</p>
</blockquote>
<h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><blockquote>
<p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
</blockquote>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;插入排序耗时&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = key</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;插入排序耗时&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><blockquote>
<p>改进插入排序： 查找插入位置时使用二分查找的方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span> (array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;二分插入排序耗时：&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = array[i]; <span class="keyword">var</span> left = <span class="number">0</span>; <span class="keyword">var</span> right = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">var</span> middle = <span class="built_in">parseInt</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> (key &lt; array[middle]) &#123;</span><br><span class="line">        right = middle - <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left = middle + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= left; j--) &#123;</span><br><span class="line">      array[j + <span class="number">1</span>] = array[j]</span><br><span class="line">    &#125;</span><br><span class="line">    array[left] = key</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;二分插入排序耗时：&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动图-2"><a href="#动图-2" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort07.gif"></p>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul>
<li>最佳情况：输入数组按升序排列。T(n) &#x3D; O(n)</li>
<li>最坏情况：输入数组按降序排列。T(n) &#x3D; O(n<sup>2</sup>)</li>
<li>平均情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
</ul>
<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><blockquote>
<p>1959年Shell发明； 第一个突破O(n^2)的排序算法；是简单插入排序的改进版；它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序</p>
</blockquote>
<h2 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h2><blockquote>
<p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版》的合著者Robert Sedgewick提出的。</p>
</blockquote>
<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ul>
<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li>
<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li>
</ul>
<p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录<code>基本有序</code>时，再对全体记录进行依次直接插入排序。</p>
<h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ol>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.<span class="property">length</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> temp</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> gap = <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;希尔排序耗时:&#x27;</span>)</span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">5</span>) &#123; <span class="comment">// 动态定义间隔序列</span></span><br><span class="line">    gap = gap * <span class="number">5</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap / <span class="number">5</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;希尔排序耗时:&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shellSort</span>(arr))<span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>

<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><ul>
<li>最佳情况：T(n) &#x3D; O(nlog<sup>2</sup> n)</li>
<li>最坏情况：T(n) &#x3D; O(nlog<sup>2</sup> n)</li>
<li>平均情况：T(n) &#x3D;O(nlog n)</li>
</ul>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><blockquote>
<p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。</p>
</blockquote>
<h2 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h2><blockquote>
<p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
</blockquote>
<h2 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h2><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">let</span> left = []</span><br><span class="line">  <span class="keyword">let</span> right = []</span><br><span class="line">  <span class="keyword">let</span> center = arr.<span class="title function_">splice</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(arr / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; center) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([center], <span class="title function_">quickSort</span>(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动图-3"><a href="#动图-3" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/dd9dc195a7331351671fe9ac4f7d5aa4.gif"></p>
<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><ul>
<li>最佳情况：T(n) &#x3D; O(nlog n)</li>
<li>最差情况：T(n) &#x3D; O(n<sup>2</sup>)</li>
<li>平均情况：T(n) &#x3D; O(nlog n)</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>表单文件上传</title>
    <url>/2017/01/10/%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p><code>FormData</code>对象使用一些键值对来模拟一个完整的表单，然后使用ajax发送这个<code>FormData</code>对象，后端便可以拿到表单中上传的文件。</p>
<h2 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h2><h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果只想上传图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/png,image/gif&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>可配置属性：</p>
<ul>
<li>accept：表示可以选择的文件MIME类型，多个MIME类型用英文逗号分开，常用的MIME类型见下表。</li>
<li>multiple：是否可以选择多个文件，多个文件时其value值为第一个文件的虚拟路径。</li>
</ul>
<h3 id="常用MIME类型"><a href="#常用MIME类型" class="headerlink" title="常用MIME类型"></a>常用MIME类型</h3><table>
<thead>
<tr>
<th>后缀名</th>
<th>MIME名称</th>
</tr>
</thead>
<tbody><tr>
<td>*.3gpp</td>
<td>audio&#x2F;3gpp, video&#x2F;3gpp</td>
</tr>
<tr>
<td>*.ac3</td>
<td>audio&#x2F;ac3</td>
</tr>
<tr>
<td>*.asf</td>
<td>allpication&#x2F;vnd.ms-asf</td>
</tr>
<tr>
<td>*.au</td>
<td>audio&#x2F;basic</td>
</tr>
<tr>
<td>*.css</td>
<td>text&#x2F;css</td>
</tr>
<tr>
<td>*.csv</td>
<td>text&#x2F;csv</td>
</tr>
<tr>
<td>*.doc</td>
<td>application&#x2F;msword</td>
</tr>
<tr>
<td>*.dot</td>
<td>application&#x2F;msword</td>
</tr>
<tr>
<td>*.dtd</td>
<td>application&#x2F;xml-dtd</td>
</tr>
<tr>
<td>*.dwg</td>
<td>image&#x2F;vnd.dwg</td>
</tr>
<tr>
<td>*.dxf</td>
<td>image&#x2F;vnd.dxf</td>
</tr>
<tr>
<td>*.gif</td>
<td>image&#x2F;gif</td>
</tr>
<tr>
<td>*.htm</td>
<td>text&#x2F;html</td>
</tr>
<tr>
<td>*.html</td>
<td>text&#x2F;html</td>
</tr>
<tr>
<td>*.jp2</td>
<td>image&#x2F;jp2</td>
</tr>
<tr>
<td>*.jpe</td>
<td>image&#x2F;jpeg</td>
</tr>
<tr>
<td>*.jpeg</td>
<td>image&#x2F;jpeg</td>
</tr>
<tr>
<td>*.jpg</td>
<td>image&#x2F;jpeg</td>
</tr>
<tr>
<td>*.js</td>
<td>text&#x2F;javascript, application&#x2F;javascript</td>
</tr>
<tr>
<td>*.json</td>
<td>application&#x2F;json</td>
</tr>
<tr>
<td>*.mp2</td>
<td>audio&#x2F;mpeg, video&#x2F;mpeg</td>
</tr>
<tr>
<td>*.mp3</td>
<td>audio&#x2F;mpeg</td>
</tr>
<tr>
<td>*.mp4</td>
<td>audio&#x2F;mp4, video&#x2F;mp4</td>
</tr>
<tr>
<td>*.mpeg</td>
<td>video&#x2F;mpeg</td>
</tr>
<tr>
<td>*.mpg</td>
<td>video&#x2F;mpeg</td>
</tr>
<tr>
<td>*.mpp</td>
<td>application&#x2F;vnd.ms-project</td>
</tr>
<tr>
<td>*.ogg</td>
<td>application&#x2F;ogg, audio&#x2F;ogg</td>
</tr>
<tr>
<td>*.pdf</td>
<td>application&#x2F;pdf</td>
</tr>
<tr>
<td>*.png</td>
<td>image&#x2F;png</td>
</tr>
<tr>
<td>*.pot</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>*.pps</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>*.ppt</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>*.pptx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.presentationml.presentation</td>
</tr>
<tr>
<td>*.rtf</td>
<td>application&#x2F;rtf, text&#x2F;rtf</td>
</tr>
<tr>
<td>*.svf</td>
<td>image&#x2F;vnd.svf</td>
</tr>
<tr>
<td>*.tif</td>
<td>image&#x2F;tiff</td>
</tr>
<tr>
<td>*.tiff</td>
<td>image&#x2F;tiff</td>
</tr>
<tr>
<td>*.txt</td>
<td>text&#x2F;plain</td>
</tr>
<tr>
<td>*.wdb</td>
<td>application&#x2F;vnd.ms-works</td>
</tr>
<tr>
<td>*.wps</td>
<td>application&#x2F;vnd.ms-works</td>
</tr>
<tr>
<td>*.xhtml</td>
<td>application&#x2F;xhtml+xml</td>
</tr>
<tr>
<td>*.xlc</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>*.xlm</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>*.xls</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>*.xlsx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet</td>
</tr>
<tr>
<td>*.xlt</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>*.xlw</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>*.xml</td>
<td>text&#x2F;xml, application&#x2F;xml</td>
</tr>
<tr>
<td>*.zip</td>
<td>aplication&#x2F;zip</td>
</tr>
</tbody></table>
<h3 id="javascript代码"><a href="#javascript代码" class="headerlink" title="javascript代码"></a>javascript代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#uploadFile&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>,file);</span><br><span class="line">    </span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/webgl/upload/zip&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: formData,</span><br><span class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里我是在文件被选择上传后就会立即触发<code>ajax</code>上传文件事件，而表单中其他字段我没有使用<code>FormData</code>对象，所以<code>&lt;form&gt;</code>标签没有添加<code>enctype=&quot;multipart/form-data&quot;</code>属性。</p>
<blockquote>
<p>注：</p>
<ul>
<li><code>processData</code>设置为<code>false</code>。因为<code>data</code>值是<code>FormData</code>对象，不需要对数据做处理。</li>
<li><code>cache</code>设置为<code>false</code>，上传文件不需要缓存。</li>
<li><code>contentType</code>设置为<code>false</code>。</li>
</ul>
</blockquote>
<h2 id="nodejs代码"><a href="#nodejs代码" class="headerlink" title="nodejs代码"></a>nodejs代码</h2><h3 id="multer模块"><a href="#multer模块" class="headerlink" title="multer模块"></a>multer模块</h3><p>我使用了<code>multer</code>模块，<a href="https://www.npmjs.com/package/multer">更多信息</a>。初始化<code>multer</code>模块配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> storageZip = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&#x27;public/uploads/zip&#x27;</span>)		<span class="comment">//文件存储路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">fieldname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="string">&#x27;.zip&#x27;</span>)	<span class="comment">//对文件重新命名，防止文件名冲突</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> uploadZip = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    <span class="attr">storage</span>: storageZip</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/webgl/upload/zip&#x27;</span>, uploadZip.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>), <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(req.<span class="property">file</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>这里<code>single()</code>参数名就是使用<code>FormData.append()</code>方法添加时的文件名，这里我用的是<code>file</code>。</li>
<li>上传结束之后，会把<code>file</code>对象返回给前端，<code>file</code>对象会包含文件名等信息。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>解构</title>
    <url>/2018/08/14/%E8%A7%A3%E6%9E%84/</url>
    <content><![CDATA[<h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; type, name &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;Literal&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">(&#123; type, name &#125; = node)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure>

<p>** 注： ** 一定要用小括号包裹解构赋值语句，JavaScript引擎将一对开放的花括号视为一个代码块，而语法规定，代码块语句不允许出现在解构赋值语句左侧，添加小括号后可以将块语句转化为一个表达式，从而实现整个解构赋值的过程。</p>
<h2 id="给函数解构赋值"><a href="#给函数解构赋值" class="headerlink" title="给函数解构赋值"></a>给函数解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;Literal&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outputInfo</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value === node) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outputInfo</span>(&#123; type, name &#125; = node)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure>

<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;Literal&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; type, name, value &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;Literal&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; type, name, value = <span class="literal">true</span> &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="非同名局部变量赋值"><a href="#非同名局部变量赋值" class="headerlink" title="非同名局部变量赋值"></a>非同名局部变量赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">type</span>: localType, <span class="attr">name</span>: localName &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localType) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure>

<p>默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">type</span>: localType, <span class="attr">name</span>: localName = <span class="string">&quot;bar&quot;</span> &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localType) <span class="comment">// Indentifier</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName) <span class="comment">// bar</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套对象解构"><a href="#嵌套对象解构" class="headerlink" title="嵌套对象解构"></a>嵌套对象解构</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="attr">loc</span>: &#123;</span><br><span class="line">        <span class="attr">start</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">end</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">loc</span>: &#123; start &#125; &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">column</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>非同名局部变量赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;Indentifier&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="attr">loc</span>: &#123;</span><br><span class="line">        <span class="attr">start</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">end</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">loc</span>: &#123; <span class="attr">start</span>: localStart &#125; &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">line</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">column</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ firstColor, secondColor ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstColor) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(secondColor) <span class="comment">// green</span></span><br></pre></td></tr></table></figure>

<h2 id="取特定位置"><a href="#取特定位置" class="headerlink" title="取特定位置"></a>取特定位置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , thirdColor ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(thirdColor) <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>

<h2 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a>解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span> ]</span><br><span class="line"><span class="keyword">let</span> firstColor = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="keyword">let</span> secondColor = <span class="string">&#x27;purple&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ firstColor, secondColor ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstColor) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(secondColor) <span class="comment">// green</span></span><br></pre></td></tr></table></figure>

<h2 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> tmp</span><br><span class="line"></span><br><span class="line">tmp = a</span><br><span class="line">a = b</span><br><span class="line">b = tmp</span><br></pre></td></tr></table></figure>

<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">[ a, b ] = [ b, a ]</span><br></pre></td></tr></table></figure>

<h2 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ firstColor, secondColor = <span class="string">&#x27;green&#x27;</span> ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstColor) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(secondColor) <span class="comment">// green</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套数组解构"><a href="#嵌套数组解构" class="headerlink" title="嵌套数组解构"></a>嵌套数组解构</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span>, [ <span class="string">&quot;green&quot;</span>, <span class="string">&quot;lightgreen&quot;</span> ], <span class="string">&quot;blue&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ firstColor, [ secondColor ] ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstColor) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(secondColor) <span class="comment">// green</span></span><br></pre></td></tr></table></figure>

<h2 id="不定元素"><a href="#不定元素" class="headerlink" title="不定元素"></a>不定元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ firstColor, ...restColors ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstColor) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(restColors) <span class="comment">// [ &quot;green&quot;, &quot;blue&quot; ]</span></span><br></pre></td></tr></table></figure>

<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ ...cloneColors ] = colors</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneColors) <span class="comment">// [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ]</span></span><br></pre></td></tr></table></figure>

<h1 id="混合解构"><a href="#混合解构" class="headerlink" title="混合解构"></a>混合解构</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    <span class="attr">loc</span>: &#123;</span><br><span class="line">        <span class="attr">start</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">end</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">range</span>: [<span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">loc</span>: &#123; start &#125;, <span class="attr">range</span>: [startIndex] &#125; = node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">column</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">logs</span>(startIndex) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>深入理解ES6 – 作者: 【美】Nicholas C. Zakas</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>设置居中的几种方式</title>
    <url>/2016/05/18/%E8%AE%BE%E7%BD%AE%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>设置居中的几种方式</p>
<span id="more"></span>


<h3 id="普通水平居中"><a href="#普通水平居中" class="headerlink" title="普通水平居中"></a>普通水平居中</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用尾类垂直居中"><a href="#使用尾类垂直居中" class="headerlink" title="使用尾类垂直居中"></a>使用尾类垂直居中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用translate居中"><a href="#使用translate居中" class="headerlink" title="使用translate居中"></a>使用translate居中</h3><p>这种方式父元素一定要有宽度和高度，<code>top</code>继承自父元素。</p>
<p>如果只想设置水平居中或者垂直居中，可以单独设置<code>translateX</code>&#x2F;<code>translateY</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;	//方便查看效果</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">position</span>: relateive;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浮动元素居中"><a href="#浮动元素居中" class="headerlink" title="浮动元素居中"></a>浮动元素居中</h3><p> 确定容器的宽高 宽500 高 300 的层</p>
<p> 设置层的外边距</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">500px</span> ; <span class="attribute">height</span>:<span class="number">300px</span>;//高度可以不设</span><br><span class="line">     <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;</span><br><span class="line">     <span class="attribute">position</span>:relative;         //相对定位</span><br><span class="line">     <span class="attribute">background-color</span>:pink;     //方便看效果</span><br><span class="line">     <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绝对定位div居中"><a href="#绝对定位div居中" class="headerlink" title="绝对定位div居中"></a>绝对定位div居中</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字体图标在div中居中"><a href="#字体图标在div中居中" class="headerlink" title="字体图标在div中居中"></a>字体图标在div中居中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus fa-5x&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span>&#123;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域名存取localStorage</title>
    <url>/2020/09/20/%E8%B7%A8%E5%9F%9F%E5%90%8D%E5%AD%98%E5%8F%96localStorage/</url>
    <content><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E8%B7%A8%E5%9F%9F%E5%90%8D%E8%AF%BB%E5%8F%96localStorage/de1cd54ffb.png"></p>
<span id="more"></span>

<blockquote>
<p>无论数据存储在 localStorage 还是 sessionStorage ，<strong>它们都特定于页面的协议。</strong></p>
</blockquote>
<p>由于<code>localStorage</code>是基于当前访问源(origin)的本地存储空间，所以当我们在 <code>a.jakeyu.top</code> 中存储一段数据，并想要在 <code>b.jakeyu.top</code> 中读取数据的时候是无法取到的。</p>
<p>最近遇到这样的需求，考虑过 cookie 方案，但是可能存储大量的数据，cookie 不可行。最终我们使用<code>iframe</code>来实现，我觉得这是一个很有趣的方法。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><code>a.jakeyu.top</code> 和 <code>b.jakeyu.top</code> 通过 <code>iframe</code> 加载同一个域名的页面，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">postMessage</a> 和 <code>iframe</code> 中的页面进行通信，这样就可以实现跨域名存取 localStorage。</p>
<p>缺点是 <code>postMessage</code>  是基于回调的，所以所有 api 都是异步的。不过我们有 <code>promise</code>，可以让使用方式优雅一些。</p>
<p><img data-src="//blogimg.jakeyu.top/%E8%B7%A8%E5%9F%9F%E5%90%8D%E8%AF%BB%E5%8F%96localStorage/%E5%9B%BE%E5%83%8F2020-10-5.jpeg"></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="父级页面"><a href="#父级页面" class="headerlink" title="父级页面"></a>父级页面</h2><h3 id="创建-iframe"><a href="#创建-iframe" class="headerlink" title="创建 iframe"></a>创建 iframe</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIframe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> iframeInBody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#iframe&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (iframeInBody) &#123;</span><br><span class="line">    <span class="keyword">return</span> iframeInBody;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">  iframe.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;#iframe&#x27;</span>);</span><br><span class="line">  iframe.<span class="property">src</span> = <span class="string">&#x27;https://jakeyu.top/localstorage&#x27;</span>;</span><br><span class="line">  iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertAdjacentElement</span>(<span class="string">&#x27;beforeend&#x27;</span>, iframe);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="核心-Class"><a href="#核心-Class" class="headerlink" title="核心 Class"></a>核心 Class</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">localStorage</span> &#123;</span><br><span class="line">  <span class="attr">iframe</span>: <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iframe 是否加载完成</span></span><br><span class="line">  <span class="attr">isReady</span>: <span class="title class_">Boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同时调用方法时，需要在 iframe 回调之后执行 reslove</span></span><br><span class="line">  <span class="attr">waitMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Function</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 iframe ready之前调用方法，需要保存一下，ready后执行</span></span><br><span class="line">  <span class="attr">beforeReady</span>: [<span class="title class_">Function</span>?];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">listenMessage</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isReady</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">beforeReady</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">iframe</span> = <span class="title function_">createIframe</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">waitMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">key</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">value</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">setItem</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventType = <span class="string">&#x27;set&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> randomKey = <span class="variable language_">this</span>.<span class="title function_">getRandomString</span>(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">set</span>(randomKey, resolve);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">        eventType,</span><br><span class="line">        key,</span><br><span class="line">        value,</span><br><span class="line">        randomKey</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 监听消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">listenMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 接收 iframe 消息</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="variable language_">this</span>.<span class="property">receiveMessage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理接收消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">event</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">receiveMessage</span>(<span class="params">event: MessageEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data = &#123;&#125; &#125; = event;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; eventType, randomKey, value &#125; = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventType === <span class="string">&#x27;return&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> handler = <span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">get</span>(randomKey);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">        <span class="title function_">handler</span>(value);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">delete</span>(randomKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType === <span class="string">&#x27;ready&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReady</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">beforeReady</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fun = <span class="variable language_">this</span>.<span class="property">beforeReady</span>.<span class="title function_">shift</span>() <span class="keyword">as</span> <span class="title class_">Function</span>;</span><br><span class="line">        <span class="title function_">fun</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取随机字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">eventKey</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getRandomString</span>(<span class="params">eventKey: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> randomString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> eventKeyRandom = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      randomString = <span class="title function_">makeRandomString</span>(<span class="number">5</span>);</span><br><span class="line">      eventKeyRandom = <span class="string">`<span class="subst">$&#123;eventKey&#125;</span>_<span class="subst">$&#123;randomString&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">has</span>(eventKeyRandom));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventKeyRandom;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 向iframe中发送消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">params</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">postMessage</span>(<span class="params">params: Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isReady</span>) &#123;</span><br><span class="line">      (<span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">contentWindow</span> <span class="keyword">as</span> <span class="title class_">Window</span>).<span class="title function_">postMessage</span>(params, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">beforeReady</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        (<span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">contentWindow</span> <span class="keyword">as</span> <span class="title class_">Window</span>).<span class="title function_">postMessage</span>(params, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="iframe-页面"><a href="#iframe-页面" class="headerlink" title="iframe 页面"></a>iframe 页面</h2><p>iframe 页面只需要通过 postMessage 和父级页面进行通信，所以并不需要 ui。</p>
<h3 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h3><p>页面加载完成时，需要通知父页面，并执行 before 栈中的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">eventType</span>: <span class="string">&#x27;ready&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;*&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">receiveMessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 用来标记当前事件是 读/取 或者其他</span></span><br><span class="line">  <span class="keyword">const</span> eventType = <span class="title function_">get</span>(event, <span class="string">&#x27;data.eventType&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 数据 key</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">get</span>(event, <span class="string">&#x27;data.key&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 数据</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">get</span>(event, <span class="string">&#x27;data.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 当前事件标识，用于父级页面区分当前消息来自哪次调用</span></span><br><span class="line">  <span class="keyword">const</span> randomKey = <span class="title function_">get</span>(event, <span class="string">&#x27;data.randomKey&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只以存数据为例</span></span><br><span class="line">  <span class="keyword">if</span>(eventType === <span class="string">&#x27;set&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知父级页面存储成功</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">eventType</span>: <span class="string">&#x27;return&#x27;</span>,</span><br><span class="line">        value,</span><br><span class="line">        randomKey,</span><br><span class="line">        error,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, receiveMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在 <code>a.jekeyu.top</code> 中存储数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">localStorage</span>().<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jake&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 <code>b.jekeyu.top</code> 中存储数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title function_">localStorage</span>().<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
