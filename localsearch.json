{"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-03-24 05:08:37","updated":"2023-03-24 05:08:37","comments":false,"path":"/404.html","permalink":"https://i.jakeyu.top/404.html","excerpt":"","text":".article-title { font-size: 2.1em; } strong a { color: #747474; } .share { display: none; } .player { margin-left: -10px; } .sign { text-align: right; font-style: italic; } /*#page-visit { display: none; }*/ .center { text-align: center; height: 2.5em; font-weight: bold; } .search2 { height: 2.2em; font-size: 1em; width: 50%; margin: auto 24%; color: #727272; opacity: .6; border: 2px solid lightgray; } .search2:hover { opacity: 1; box-shadow: 0 0 10px rgba(0, 0, 0, 0.3) }; .article-entry hr { margin: 0; } .pic { text-align: center; margin: 0; } .pic br { display: none; } 很抱歉，您所访问的地址并不存在: 回主页 · 所有文章 · 留言板 可在边栏搜索框中对本站进行检索，以获取相关信息。","keywords":""},{"title":"关于","slug":"about","date":"2023-03-24 05:08:37","updated":"2023-03-24 05:08:37","comments":true,"path":"about/index.html","permalink":"https://i.jakeyu.top/about/index.html","excerpt":"","text":"2016年3月，决定要找一个自己喜欢并以后工作的事业，偶然接触到前端，于是开始学习、研究。一直到现在，如今也是主要从事前端职业。 对新鲜事物永远保持一个好奇与探索的心，学习各种感兴趣的知识。 —— 2016年8月25日 JavaScript 是一门充满吸引力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。JavaScript 不必理解就可以使用，所以很多JavaScript开发者不求甚解 ，他们往往不会深入理解语言内部的机制，遇到困难就退缩。 – 改编自《你不知道的JavaScript 上卷》 开博缘由: 前端发展飞速，各种框架不断的涌现，博客就是为了记录遇到的坑，以及解决的方法。经常会忘记一些方法、API，用博客记录下来巩固，也方便查询；共享知识，吸引同好，交流进步。 项目: 七牛图床管理 Hexo博客chrome地址栏搜索 基于gulp的前端脚手架 UMeditor vue版","keywords":""},{"title":"相关推荐","date":"2016-12-01 16:39:48","updated":"2023-03-24 05:08:37","comments":true,"path":"article-recommended/index.html","permalink":"https://i.jakeyu.top/article-recommended/index.html","excerpt":"","text":"前端 前端资源汇总 JavaScript JavaScript秘密花园 Javascript正则表达式 ECMAScript 6入门 momentjs jQuery插件开发教程 CSS Flex 布局教程：语法篇 关于谷歌浏览器input框，保存密码后，输入框颜色变成黄色的解决方法 textarea如何实现高度自适应？ less sass animate.css fontawesome字体图标 NodeJs nodejs教程 七天学会Nodejs nodejs包教不包会 Nodemailer multer上传文件 前端性能优化 移动H5前端性能优化指南 Javascript高性能动画与页面渲染 Yahoo关于性能优化的N条军规 Yahoo!团队实践分享:网站性能优化的34条黄金守则(一)—内容 工具 终极 Shell Gulp新手入门教程 shadowsocks一键安装 iPresst - 时尚专业随性的在线创作发布平台 图片压缩-TinyPNG BootCDN staticfile CDN ckeditor文本编辑器","keywords":""},{"title":"categories","date":"2017-03-21 11:15:15","updated":"2023-03-24 05:08:37","comments":false,"path":"categories/index.html","permalink":"https://i.jakeyu.top/categories/index.html","excerpt":"","text":"","keywords":""},{"title":"CSS3自定义滚动条样式","date":"2023-03-24 05:08:37","updated":"2023-03-24 05:08:37","comments":true,"path":"demo/CSS3自定义滚动条样式.html","permalink":"https://i.jakeyu.top/demo/CSS3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F.html","excerpt":"","text":".scrollbar { margin-left: 30px; float: left; height: 300px; width: 65px; background: #F5F5F5; overflow-y: scroll; margin-bottom: 25px; } .force-overflow { min-height: 450px; } #wrapper { text-align: center; width: 500px; margin: auto; } #wrapper:after { content: ''; display: block; clear: both; } #style-1::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; background-color: #F5F5F5; } #style-1::-webkit-scrollbar { width: 12px; background-color: #F5F5F5; } #style-1::-webkit-scrollbar-thumb { border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3); background-color: #555; } #style-2::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; background-color: #F5F5F5; } #style-2::-webkit-scrollbar { width: 12px; background-color: #F5F5F5; } #style-2::-webkit-scrollbar-thumb { border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3); background-color: #D62929; } #style-3::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; } #style-3::-webkit-scrollbar { width: 6px; background-color: #F5F5F5; } #style-3::-webkit-scrollbar-thumb { background-color: #000000; } #style-4::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; } #style-4::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-4::-webkit-scrollbar-thumb { background-color: #000000; border: 2px solid #555555; } #style-5::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; } #style-5::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-5::-webkit-scrollbar-thumb { background-color: #0ae; background-image: -webkit-gradient(linear, 0 0, 0 100%,color-stop(.5, rgba(255, 255, 255, .2)),color-stop(.5, transparent), to(transparent)); } #style-6::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; } #style-6::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-6::-webkit-scrollbar-thumb { background-color: #F90; background-image: -webkit-linear-gradient(45deg,rgba(255, 255, 255, .2) 25%,transparent 25%,transparent 50%,rgba(255, 255, 255, .2) 50%,rgba(255, 255, 255, .2) 75%,transparent 75%,transparent) } #style-7::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; border-radius: 10px; } #style-7::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-7::-webkit-scrollbar-thumb { border-radius: 10px; background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0.44, rgb(122, 153, 217)), color-stop(0.72, rgb(73, 125, 189)), color-stop(0.86, rgb(28, 58, 148))); } #style-8::-webkit-scrollbar-track { border: 1px solid black; background-color: #F5F5F5; } #style-8::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-8::-webkit-scrollbar-thumb { background-color: #000000; } #style-9::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; } #style-9::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-9::-webkit-scrollbar-thumb { background-color: #F90; background-image: -webkit-linear-gradient(90deg, rgba(255, 255, 255, .2) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .2) 50%, rgba(255, 255, 255, .2) 75%, transparent 75%, transparent) } #style-10::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; border-radius: 10px; } #style-10::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-10::-webkit-scrollbar-thumb { background-color: #AAA; border-radius: 10px; background-image: -webkit-linear-gradient(90deg, rgba(0, 0, 0, .2) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, .2) 50%, rgba(0, 0, 0, .2) 75%, transparent 75%, transparent) } #style-11::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #F5F5F5; border-radius: 10px; } #style-11::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-11::-webkit-scrollbar-thumb { background-color: #3366FF; border-radius: 10px; background-image: -webkit-linear-gradient(0deg, rgba(255, 255, 255, 0.5) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.5) 50%, rgba(255, 255, 255, 0.5) 75%, transparent 75%, transparent) } #style-12::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.9); border-radius: 10px; background-color: #444444; } #style-12::-webkit-scrollbar { width: 12px; background-color: #F5F5F5; } #style-12::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #D62929; background-image: -webkit-linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.4) 50%, transparent, transparent) } #style-13::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.9); border-radius: 10px; background-color: #CCCCCC; } #style-13::-webkit-scrollbar { width: 12px; background-color: #F5F5F5; } #style-13::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #D62929; background-image: -webkit-linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.4) 50%, transparent, transparent) } #style-14::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.6); background-color: #CCCCCC; } #style-14::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-14::-webkit-scrollbar-thumb { background-color: #FFF; background-image: -webkit-linear-gradient(90deg, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 1) 25%, transparent 100%, rgba(0, 0, 0, 1) 75%, transparent) } #style-15::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.1); background-color: #F5F5F5; border-radius: 10px; } #style-15::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-15::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #FFF; background-image: -webkit-gradient(linear, 40% 0%, 75% 84%, from(#4D9C41), to(#19911D), color-stop(.6, #54DE5D)) } #style-16::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.1); background-color: #F5F5F5; border-radius: 10px; } #style-16::-webkit-scrollbar { width: 10px; background-color: #F5F5F5; } #style-16::-webkit-scrollbar-thumb { border-radius: 10px; background-color: #FFF; background-image: -webkit-linear-gradient(top, #e4f5fc 0%, #bfe8f9 50%, #9fd8ef 51%, #2ab0ed 100%); }","keywords":""},{"title":"标签","date":"2016-11-08 22:11:24","updated":"2023-03-24 05:08:37","comments":false,"path":"tags/index.html","permalink":"https://i.jakeyu.top/tags/index.html","excerpt":"","text":"","keywords":""}],"posts":[{"title":"使用 Depay 和欧易 (OKX) 订阅 ChatGPT Plus","slug":"使用 Depay 和欧易 (OKX) 订阅 ChatGPT Plus","date":"2023-03-21 20:26:12","updated":"2023-03-24 05:08:37","comments":true,"path":"2023/03/21/使用 Depay 和欧易 (OKX) 订阅 ChatGPT Plus/","link":"","permalink":"https://i.jakeyu.top/2023/03/21/%E4%BD%BF%E7%94%A8%20Depay%20%E5%92%8C%E6%AC%A7%E6%98%93%20(OKX)%20%E8%AE%A2%E9%98%85%20ChatGPT%20Plus/","excerpt":"","text":"下载和注册 DepayDepay 是一个虚拟信用卡服务提供商，可以将 USDT 转换为美元，以用于虚拟信用卡交易。您需要进行身份验证并传输您的身份证才能使用 Depay。 注册 Depay 账户使用此链接: https://depay.depay.one/web-app/register-h5?invitCode=876620&lang=zh-cn，填写信息并输入邀请码 876620 来注册 Depay 虚拟 Master 卡或 Visa 卡。 完成身份认证在 iOS App Store 中下载 Depay 应用，使用已注册的账户登录，然后完成 KYC 验证。 如果您使用安卓系统，请在官网下载 Depay 应用。 获取 USDT 如果您有朋友可以直接向您转移 USDT，则可以跳过此步骤。 Depay 只能使用 TRC20 网络。如果是币圈新手，请牢记这一点。 下载和注册欧易 (OKX)欧易 (OKX) 是虚拟钱包和交易平台之一，您需要在其中购买 USDT 并将其转移到 Depay 账户中。 下载欧易 (OKX)在美国地区的应用商店中下载 OKX 应用。注册账户时，请使用中国手机号码，如果有邀请码，请输入 13041699。 存储资金在 OKX 应用程序中，依次打开“资产” -&gt; “总览” -&gt; “资金账户” -&gt; “充币”。按照指示存储 USDT ，注意选择 USDT-TRC20网络。 转移资金使用 OKX 应用程序进行提款操作，在 Depay 应用程序中充值。在 OKX 应用程序中，依次打开“资产”-&gt;“总览”-&gt;“资金账户”-&gt;“提现”。在 TRC20 地址栏中粘贴您的 Depay 钱包地址，确保选择正确的网络(USDT-TRC20)。 开通虚拟信用卡在 Depay 钱包收到 USDT 后，您需要先开通信用卡，然后兑换成美元。 开卡首先开通标准套餐（0美元，月费1美元，充值手续费最少1.35％），然后根据需要升级套餐。 兑换 USD在 Depay 应用程序中，依次打开“钱包”-&gt;“USDT”-&gt;“兑换”，将 USDT 兑换成美元。 充值在 Depay 应用程序中，依次打开“卡”-&gt;“充值”，然后输入要充值的美元数，并支付手续费1.35％。 从本方法中损失的资金包括：1 USDT（给 OKX 的手续费）+ 1.35％ Depay 充值手续费 + USDT 转换为美元所需的费用。 订阅 ChatGPT Plus为了订阅ChatGPT Plus，需要在全局代理下使用手机浏览器打开 https://chat.openai.com，并输入 Depay 虚拟信用卡信息。如果需要，可以使用美国地址生成器替代您的地址。","author":"Jake","categories":[{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://i.jakeyu.top/categories/ChatGPT/"}],"tags":[{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://i.jakeyu.top/tags/ChatGPT/"}]},{"title":"使用 github action 自动部署博客和同步备份","slug":"使用-github-action-自动部署博客和同步备份","date":"2023-02-04 00:14:33","updated":"2023-03-24 05:08:37","comments":true,"path":"2023/02/04/使用-github-action-自动部署博客和同步备份/","link":"","permalink":"https://i.jakeyu.top/2023/02/04/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/","excerpt":"","text":"前言使用 github action 自动化可以让我们发布博客更加简单，只需要把代码提交到 github 仓库即可。 准备关于如何使用 git 上传博客到自己的服务器可以查看我之前写的Hexo博客部署到服务器。 部署到 github pageaction 配置在项目根目录下创建 .github/workflows 文件夹，然后在该文件夹下创建 deploy-gh-page.yml 文件，内容如下： 12345678910111213141516171819202122232425262728293031323334name: Deploy to gh-page# 根据实际情况调整分支on: push: branches: - masterjobs: deploy-gh-page: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: ref: master fetch-depth: 0 - uses: pnpm/action-setup@v2 with: version: 7 run_install: false - uses: actions/setup-node@v3 with: node-version: &quot;16&quot; cache: &quot;pnpm&quot; - name: Install dependencies run: pnpm install --frozen-lockfile - name: Build run: npm run build - name: Deploy to gh-page uses: peaceiris/actions-gh-pages@v3 with: # github 自带变量，无需配置 github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; publish_dir: ./public 部署到服务器SSH key添加 SSH Private Key 到 github repo -&gt; settings -&gt; Secrets and variables -&gt; Actions。 action 配置在上文的配置基础上，增加如下配置: 12345678910111213deploy-to-server: runs-on: ubuntu-latest # 依赖 deploy-gh-page job needs: [deploy-gh-page] steps: - name: Deploy to server uses: wei/git-sync@v3 with: source_repo: JakeLaoyu/blog source_branch: refs/remotes/source/gh-pages destination_repo: root@110.40.198.64:/www/wwwroot/blog.git destination_branch: refs/heads/master destination_ssh_private_key: $&#123;&#123; secrets.SERVER_PRIVATE_KEY &#125;&#125; 效果 同步至 gitee 等依赖 wearerequired&#x2F;git-mirror-action 我们可以很方便实现。 在项目根目录下创建 .github/workflows 文件夹，然后在该文件夹下创建 sync-to-gitee.yml 文件，内容如下： 1234567891011121314151617181920name: Sync to Giteeon: push: branches: [master]jobs: sync: runs-on: ubuntu-latest steps: - name: Sync to Gitee uses: wearerequired/git-mirror-action@master env: # 需要事先在 gitee 上创建 ssh key 并添加到仓库 SSH_PRIVATE_KEY: $&#123;&#123; secrets.GITEE_RSA_PRIVATE_KEY &#125;&#125; with: # GitHub 源仓库地址 source-repo: git@github.com:JakeLaoyu/blog.git # Gitee 目标仓库地址 destination-repo: git@gitee.com:jakelaoyu/HexoBlogBackup.git","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"服务器","slug":"前端/服务器","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"CI/CD","slug":"前端/服务器/CI-CD","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/CI-CD/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://i.jakeyu.top/tags/CI-CD/"}]},{"title":"注册ChatGPT详细指南","slug":"注册ChatGPT详细指南","date":"2022-12-09 13:46:15","updated":"2023-03-24 05:08:37","comments":true,"path":"2022/12/09/注册ChatGPT详细指南/","link":"","permalink":"https://i.jakeyu.top/2022/12/09/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/","excerpt":"","text":"最近ChatGPT真受欢迎，但是有些人注册时会经常面临不服务它们的地区问题，现在我们给你详细问题解决。 作者 twitter 准备 代理。要求是韩国，日本，印度，新加坡，美国这些国家的地址都合适。对其他的我们还不太清楚，反正香港或中国的代理肯定不行。推荐机场 找一个国外手机号码，如果你没有用过接码平台也行，有些接码平台是无法接的，所以我们推荐一个就是 sms-activate.org 准备一个浏览器 开始一步一步注册第一步是接验证码打开接码平台 sms-activate.org，注册一个账号 然后要充值余额 一次接码OpenAi的验证码费用是大概11卢布，人民币来看差不多是1块钱，不过只能充美金，就先充直个1美金钱。可以选择对你任何方便方式。支付宝也有 充值完成可能需要等一会，就先放着，直接进行下一步。 第二部是注册一个OpenAI账号首先打开ChatGPT的账户注册页面。谷歌注册或者邮箱注册都可以，无所谓，我们这里用邮箱注册作为例子。 用邮箱注册后你要验证邮件。进去邮箱，查看email里的链接。 这里你需要输入需要的信息。 当然，有一些人会在这里遇到一个问题，会出现说不能在当前国家服务的提示。 不用怕，这个这文章就帮助你解决这个问题。 这方面那，给你一招。一般你出现这种问题，就是因为你的代理没有全局，或者位置不对。香港或中国的的代理是100%无法通过的。 这个问题是非常神奇的，只要你出现了这个提示，那么你接下来怎么切换代理，都是没用的。现在提供给你你一招解决。 解决地区问题先，你要把你的代理切换到任何合适的地区，我们这里选择了韩国。 然后，先复制下面这段代码 1window.localStorage.removeItem(Object.keys(window.localStorage).find(i=&gt;i.startsWith(&#x27;@@auth0spajs&#x27;))) 接着在地址栏里输入 1javascript: 请注意，这里一定要输入，因为你复制的话是粘贴不了的。 然后再粘贴我们第一段复制的内容： 然后按下回车键，刷新页面。如果你的代理没问题，就可以看到正常工作的注册页面了。 输入手机号码 这里选的是韩国，这是因为我们使用韩国的代理，但是我们最好选择印度。然后到我们的接码网站上去。在左侧搜索OpenAi，然后点击印度。 点击”小黄车”。 然后我们复制这个号码，粘贴过去。然后我们点击发送验证码就完成了。 等一会网站会提示验证码，我们复制粘贴。 这里你要选择你打算如何使用OpenAI。随便选择吧。 使用ChatGPT注册完后，打开ChatGPT网站去登陆。 在下面这个地方就可以开始写你的任何巧妙的句子了。取乐吧！","author":"Jake","categories":[{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://i.jakeyu.top/categories/ChatGPT/"}],"tags":[{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://i.jakeyu.top/tags/ChatGPT/"}]},{"title":"vscode 插件之代码补全提示","slug":"vscode-插件之代码补全提示","date":"2021-12-04 16:23:58","updated":"2023-03-24 05:08:37","comments":true,"path":"2021/12/04/vscode-插件之代码补全提示/","link":"","permalink":"https://i.jakeyu.top/2021/12/04/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/","excerpt":"","text":"前言vscode 插件提供了很强大个能力，借助插件可以帮助我们提升开发效率。 在写 node 项目时经常需要相对路径寻找引用 Service 文件等，写一个插件帮我们自动补全。 借助 vscode.languages.registerCompletionItemProvider 方法，我们可以注册相关补全提示。 注册服务1234567export function activate(context: vscode.ExtensionContext) &#123; context.subscriptions.push( vscode.languages.registerCompletionItemProvider(&quot;typescript&quot;, &#123; provideCompletionItems, &#125;) );&#125; provideCompletionItems12345678910111213141516171819202122232425262728293031323334const provideCompletionItems = async ( document: vscode.TextDocument, position: vscode.Position) =&gt; &#123; const serviceFiles = await vscode.workspace.findFiles(&quot;app/services/**/*.ts&quot;); if (!serviceFiles.length) &#123; return; &#125; return serviceFiles.map((file) =&gt; &#123; // 生成相对当前编辑文件的相对路径 const relativePath = path.relative( path.dirname(document.uri.path), path.dirname(file.path) ); const basename = path.basename(file.path); const extname = path.extname(file.path); const filename = basename.replace(extname, &quot;&quot;); const insertText = `import $&#123;filename&#125; from &#x27;$&#123;relativePath&#125;/$&#123;filename&#125;&#x27;;\\n$&#123;filename&#125;`; const completionItem = new vscode.CompletionItem( filename, vscode.CompletionItemKind.Class ); completionItem.detail = basename; completionItem.insertText = insertText; completionItem.documentation = `$&#123;insertText&#125;`; return completionItem; &#125;);&#125;; 配置同时我们需要在 package.json 中添加相应配置 12345&#123; &quot;activationEvents&quot;: [ &quot;onLanguage:typescript&quot; ],&#125; 参考 VS Code API VS-Code-Extension-Doc-ZH","author":"Jake","categories":[{"name":"vscode","slug":"vscode","permalink":"https://i.jakeyu.top/categories/vscode/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vscode","slug":"vscode","permalink":"https://i.jakeyu.top/tags/vscode/"}]},{"title":"centos 使用 Clash 梯子","slug":"centos-使用-Clash-梯子","date":"2021-11-27 21:56:23","updated":"2023-03-24 05:08:37","comments":true,"path":"2021/11/27/centos-使用-Clash-梯子/","link":"","permalink":"https://i.jakeyu.top/2021/11/27/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/","excerpt":"服务器访问 npm、github 等真让人捉急，折腾一下配个 clash。","text":"服务器访问 npm、github 等真让人捉急，折腾一下配个 clash。 下载 clash去 github 下载最新 linux 版本，一般使用 linux-amd64。 1234gunzip clash-linux-amd64-v1.8.0.gzmv clash-linux-amd64-v1.8.0 ~/clashchmod +x ~/clash./clash 一套执行完后会生成默认配置文件 ~/.config/clash 123l ~/.config/clash-rw-r--r-- 1 root root 190K 11月 24 16:38 config.yaml-rw-r--r-- 1 root root 5.7M 11月 24 16:02 Country.mmdb 配置我是用的是 V2Club。 复制订阅地址 这个配置我们不能直接使用，需要使用 https://acl4ssr-sub.github.io/ 服务生成订阅地址，然后打开订阅地址就可以看到明文配置。 使用这份配置覆盖 ~/.config/clash/config.yaml。 启动代理然后启动 clash 1./clash 设置终端使用 clash 代理 1export ALL_PROXY=socks5://127.0.0.1:7891 可以使用 curl 测试是否连接成功。 1curl https://www.google.com 远程管理修改配置文件 1vim ~/.config/clash/config.yaml 123external-controller: 0.0.0.0:9090# 一定要配置 secret，用来远程访问安全secret: xxxx 重启 clash 服务。 打开官方 http://clash.razord.top/，在设置中填写相应的端口，secret 配置。配置完成就即可远程管理 推荐 订阅 ChatGPT Plus使用 Depay 和欧易 (OKX) 订阅 ChatGPT Plus 注册ChatGPT注册ChatGPT","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"跨域名存取localStorage","slug":"跨域名存取localStorage","date":"2020-09-20 19:15:11","updated":"2023-03-24 05:08:37","comments":true,"path":"2020/09/20/跨域名存取localStorage/","link":"","permalink":"https://i.jakeyu.top/2020/09/20/%E8%B7%A8%E5%9F%9F%E5%90%8D%E5%AD%98%E5%8F%96localStorage/","excerpt":"","text":"无论数据存储在 localStorage 还是 sessionStorage ，它们都特定于页面的协议。 由于localStorage是基于当前访问源(origin)的本地存储空间，所以当我们在 a.jakeyu.top 中存储一段数据，并想要在 b.jakeyu.top 中读取数据的时候是无法取到的。 最近遇到这样的需求，考虑过 cookie 方案，但是可能存储大量的数据，cookie 不可行。最终我们使用iframe来实现，我觉得这是一个很有趣的方法。 思路a.jakeyu.top 和 b.jakeyu.top 通过 iframe 加载同一个域名的页面，并使用 postMessage 和 iframe 中的页面进行通信，这样就可以实现跨域名存取 localStorage。 缺点是 postMessage 是基于回调的，所以所有 api 都是异步的。不过我们有 promise，可以让使用方式优雅一些。 实现父级页面创建 iframe12345678910111213141516function createIframe() &#123; const iframeInBody = document.querySelector(&#x27;#iframe&#x27;) as HTMLIFrameElement; if (iframeInBody) &#123; return iframeInBody; &#125; const iframe = document.createElement(&#x27;iframe&#x27;); iframe.setAttribute(&#x27;id&#x27;, &#x27;#iframe&#x27;); iframe.src = &#x27;https://jakeyu.top/localstorage&#x27;; iframe.style.display = &#x27;none&#x27;; document.body.insertAdjacentElement(&#x27;beforeend&#x27;, iframe); return iframe;&#125; 核心 Class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110class localStorage &#123; iframe: HTMLIFrameElement; // iframe 是否加载完成 isReady: Boolean; // 同时调用方法时，需要在 iframe 回调之后执行 reslove waitMap: Map&lt;string, Function&gt;; // 在 iframe ready之前调用方法，需要保存一下，ready后执行 beforeReady: [Function?]; constructor() &#123; this.listenMessage(); this.isReady = false; this.beforeReady = []; this.iframe = createIframe(); this.waitMap = new Map(); &#125; /** * 设置数据 * @param key * @param value */ setItem(key: string, value: any) &#123; const eventType = &#x27;set&#x27;; const randomKey = this.getRandomString(eventType); return new Promise((resolve) =&gt; &#123; this.waitMap.set(randomKey, resolve); this.postMessage(&#123; eventType, key, value, randomKey &#125;); &#125;); &#125; /** * 监听消息 */ listenMessage() &#123; // 接收 iframe 消息 window.addEventListener(&#x27;message&#x27;, this.receiveMessage.bind(this), false); &#125; /** * 处理接收消息 * @param event */ receiveMessage(event: MessageEvent) &#123; const &#123; data = &#123;&#125; &#125; = event; if (typeof data === &#x27;string&#x27;) return; const &#123; eventType, randomKey, value &#125; = data; if (eventType === &#x27;return&#x27;) &#123; const handler = this.waitMap.get(randomKey); if (handler) &#123; handler(value); this.waitMap.delete(randomKey); &#125; &#125; else if (eventType === &#x27;ready&#x27;) &#123; this.isReady = true; while (this.beforeReady.length) &#123; const fun = this.beforeReady.shift() as Function; fun(); &#125; &#125; &#125; /** * 获取随机字符串 * @param eventKey */ getRandomString(eventKey: string) &#123; let randomString = &#x27;&#x27;; let eventKeyRandom = &#x27;&#x27;; do &#123; randomString = makeRandomString(5); eventKeyRandom = `$&#123;eventKey&#125;_$&#123;randomString&#125;`; &#125; while (this.waitMap.has(eventKeyRandom)); return eventKeyRandom; &#125; /** * 向iframe中发送消息 * @param params */ postMessage(params: Record&lt;string, string&gt;) &#123; if (this.isReady) &#123; (this.iframe.contentWindow as Window).postMessage(params, &#x27;*&#x27;); &#125; else &#123; this.beforeReady.push(() =&gt; &#123; (this.iframe.contentWindow as Window).postMessage(params, &#x27;*&#x27;); &#125;); &#125; &#125;&#125; iframe 页面iframe 页面只需要通过 postMessage 和父级页面进行通信，所以并不需要 ui。 ready页面加载完成时，需要通知父页面，并执行 before 栈中的函数。 123456window.parent.postMessage( &#123; eventType: &#x27;ready&#x27;, &#125;, &#x27;*&#x27;); 监听消息12345678910111213141516171819202122232425262728function receiveMessage(event) &#123; // 用来标记当前事件是 读/取 或者其他 const eventType = get(event, &#x27;data.eventType&#x27;, &#x27;&#x27;); // 数据 key const key = get(event, &#x27;data.key&#x27;, &#x27;&#x27;); // 数据 const value = get(event, &#x27;data.value&#x27;, &#x27;&#x27;); // 当前事件标识，用于父级页面区分当前消息来自哪次调用 const randomKey = get(event, &#x27;data.randomKey&#x27;, &#x27;&#x27;); // 只以存数据为例 if(eventType === &#x27;set&#x27;) &#123; localStorage.setItem(key, value); // 通知父级页面存储成功 window.parent.postMessage( &#123; eventType: &#x27;return&#x27;, value, randomKey, error, &#125;, &#x27;*&#x27; ); &#125;&#125;window.addEventListener(&#x27;message&#x27;, receiveMessage, false); 使用在 a.jekeyu.top 中存储数据 1new localStorage().setItem(&#x27;name&#x27;, &#x27;jake&#x27;) 在 b.jekeyu.top 中存储数据 1const name = await new localStorage().getItem(&#x27;name&#x27;)","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"使用docker部署Hexo博客","slug":"使用docker部署Hexo博客","date":"2020-03-18 00:25:47","updated":"2023-03-24 05:08:37","comments":true,"path":"2020/03/18/使用docker部署Hexo博客/","link":"","permalink":"https://i.jakeyu.top/2020/03/18/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/","excerpt":"经常迁移博客是件头疼的事，每次都要折腾一堆文件，所以折腾了一下，使用docker部署博客。","text":"经常迁移博客是件头疼的事，每次都要折腾一堆文件，所以折腾了一下，使用docker部署博客。 介绍Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 文件DockerFile创建 DockerFile 配置中的路径根据自己实际路径调整 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354FROM centos:6ENV container docker# 添加环境RUN yum -y update &amp;&amp;\\ yum -y install epel-release &amp;&amp;\\ yum -y install nginx &amp;&amp;\\ yum -y install vim &amp;&amp;\\ yum install passwd openssl openssh-server openssh-clients -y &amp;&amp;\\ yum install initscripts -y# 更新源，用于安装 git 2.x，修复 --work-tree 不能和 --git-dir 同名问题RUN yum -y install wget &amp;&amp;\\ wget http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm &amp;&amp;\\ rpm -ivh wandisco-git-release-6-1.noarch.rpm &amp;&amp;\\ yum -y install git# 安装zshRUN yum install -y zsh &amp;&amp;\\ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh# 创建目录RUN mkdir -p /home/blogWORKDIR /home# 添加 blog git钩子RUN git init --bare blog.gitRUN echo -e &#x27;#!/bin/bash\\ngit --work-tree=/home/blog --git-dir=/home/blog.git checkout -f&#x27; &gt;&gt; blog.git/hooks/post-receiveRUN chmod +x blog.git/hooks/post-receive# 创建日志文件RUN mkdir -p /home/logWORKDIR /home/logRUN touch blog.log# 配置 nginxWORKDIR /etc/nginxCOPY ./nginx ./conf.d# 解决执行 nginx 报错RUN nginx -c /etc/nginx/nginx.conf# 导入自动执行脚本COPY ./start.sh /root/start.shRUN chmod +x /root/start.sh# 切换工作目录WORKDIR /home# 启动服务CMD /root/start.sh# 端口，使用81 端口避免和 nginx默认端口冲突# 22 端口为 ssh 所用EXPOSE 9022:22 9081:81 nginx1234567891011121314server &#123; listen 81; server_name i.jakeyu.top; # 处理 nginx 自动 301 加斜杠以及端口问题 server_name_in_redirect on; port_in_redirect off; location / &#123; root /home/blog; error_page 404 https://i.jakeyu.top/404.html; &#125; access_log /home/log/blog.log;&#125; start.sh12345678910#!/bin/sh# 启动 sshd 服务service sshd start# 启动nginxnginx# 防止容器退出/bin/sh 构建在 DockerFile 所在目录执行 1docker build -t blog:v1 . 启动容器1docker run -ti -d -p 9081:81 -p 9022:22 blog:v1 ssh配置查看所有容器，找到想要配置的 container id 1docker ps -a 进入容器 1docker exec -ti [container id] /bin/zsh 把宿主机的 ~/.ssh/id_rsa.pub 文件 copy 到容器 ~/.ssh/authorized_keys 中 重启ssh服务： 1service sshd restart 部署博客配置修改 Hexo 博客的配置文件 _config.yml 12345deploy: type: git repo: ssh: ssh://root@ip:port/home/blog.git branch: master 把 ip 和 port 换成和自己相对应的，比如在这里 port 就是 9022。 部署1hexo d 访问使用 curl 测试 1curl 127.0.0.1:81 删除批量删除容器1docker container rm $(docker container ls -a -q) 批量删除镜像1docker image rm $(docker image ls -a -q) 参考 Hexo博客部署到服务器 Docker学习之SSH连接docker容器 Docker 入门教程","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"拖拽文件夹上传文件","slug":"拖拽文件夹上传文件","date":"2019-02-25 17:07:10","updated":"2023-03-24 05:08:37","comments":true,"path":"2019/02/25/拖拽文件夹上传文件/","link":"","permalink":"https://i.jakeyu.top/2019/02/25/%E6%8B%96%E6%8B%BD%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/","excerpt":"","text":"代码12345678910111213141516171819202122232425262728293031323334353637function traverseFileTree(item, path) &#123; path = path || &quot;&quot;; if (item.isFile) &#123; // Get file item.file(function(file) &#123; console.log(&quot;File:&quot;, path + file.name); &#125;); &#125; else if (item.isDirectory) &#123; // Get folder contents var dirReader = item.createReader(); readerEntries(dirReader, path, item) &#125;&#125;// readEntries 每次最多返回100个，需要重复调用// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntriesfunctoin readerEntries (dirReader, path, item) &#123; dirReader.readEntries(entries =&gt; &#123; for (var i = 0; i &lt; entries.length; i++) &#123; traverseFileTree(entries[i], path + item.name + &#x27;/&#x27;) &#125; if (entries.length) readerEntries(dirReader, path, item) &#125;)&#125;,dropArea.addEventListener(&quot;drop&quot;, function(event) &#123; event.preventDefault(); var items = event.dataTransfer.items; for (var i=0; i&lt;items.length; i++) &#123; // webkitGetAsEntry is where the magic happens var item = items[i].webkitGetAsEntry(); if (item) &#123; traverseFileTree(item); &#125; &#125;&#125;, false); 兼容性CanIUse 参考 FileSystemDirectoryReader - MDN","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"Semver(npm 语义化版本号)","slug":"Semver-npm-语义化版本号","date":"2019-01-10 09:58:01","updated":"2023-03-24 05:08:37","comments":true,"path":"2019/01/10/Semver-npm-语义化版本号/","link":"","permalink":"https://i.jakeyu.top/2019/01/10/Semver-npm-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7/","excerpt":"","text":"简介在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的包越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。 在依赖高的系统中发布新版本包可能很快会成为噩梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个依赖包改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本依赖被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。 因此，Github 起草了一个具有指导意义的，统一的版本号表示规则，称为 Semantic Versioning(语义化版本表示)。该规则规定了版本号如何表示，如何增加，如何进行比较，不同的版本号意味着什么。 版本格式版本格式：主版本号.次版本号.修订号，版本号递增规则如下： 主版本号：当你做了不兼容的 API 修改， 次版本号：当你做了向下兼容的功能性新增， 修订号：当你做了向下兼容的问题修正。 先行版本号及版本编译元数据可以加到主版本号.次版本号.修订号的后面，作为延伸。 先行版本当要发布大版本或者核心的 Feature 时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和 RC 版本。Semver规范中使用alpha、beta、rc (以前叫做gama)来修饰即将要发布的版本。它们的含义是： alpha: 内部版本 beta: 公测版本 rc: 即Release candiate，正式版本的候选版本 比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc 后需要带上次数信息。 版本发布准则列举出比较实用的一些规则： 标准的版本号必须采用XYZ的格式，并且X、Y 和 Z 为非负的整数，禁止在数字前方补零，版本发布需要严格递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。 某个软件版本发行后，任何修改都必须以新版本发行。 1.0.0 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的API时，就可以发布 1.0.0 版本了。 版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较。 npm包依赖12345&#123; &quot;dependencies&quot;: &#123; &quot;react&quot;: &quot;^15.6.1&quot;, &#125;&#125; 项目对包的依赖可以使用下面的 3 种方法来表示(假设当前版本号是 16.2.0): 兼容模块新发布的补丁版本：~16.2.0、16.2.x、16.2 兼容模块新发布的小版本、补丁版本：^16.2.0、16.x、16 兼容模块新发布的大版本、小版本、补丁版本：*、x ^ 允许在不修改 [major, minor, patch] 中最左非零数字的更改（匹配大于 X、Y、Z 的更新 Y、Z 的版本号） 在 X.Y.Z 结构的版本号中，X、Y、Z 都是非负的整数，上面定义的意思就是说从左向右，遇到第一个非零数字是不可修改的，下一个数字可以更改，比如: X、Y、Z 都不为 0，^15.6.1,最左的非零数字是15，所以 X 是不允许更新的，也就是说主版本号不会超过15，表示的就是版本号&gt;=15.6.1 &amp;&amp; &lt;16.0.0 如果 X 为 0，那么第一个非零数字就是 Y，就只能对 z 做出修改，^0.1.2表示版本号&gt;=0.1.2 &amp;&amp; &lt; 0.2.0 如果 X、Y 的数字都是 0 的话，第一个非零数字就是 Z，表示的就是版本号不允许更新；^0.0.2，主版本号和次版本号都是 0，修订号为非零，表示的就是版本号&gt;=0.0.2 &amp;&amp; &lt; 0.0.3 ~ 匹配大于 X.Y.Z 的更新 Z 的版本号 X、Y、Z 都不为 0，~1.2.3 表示版本号 &gt;=1.2.3 &amp;&amp; &lt; 1.3.0 X 为 0，~0.2.3 表示版本号 &gt;=0.2.3 &amp;&amp; &lt; 0.3.0，这种情况下，~ 等价于 ^ X、Y 为0，0.0.3 表示版本号 &gt;=0.0.3 &amp;&amp; &lt; 0.1.0 x 可以替代 X、Y、Z 中任意一个，表示该位置可更新 1.2.x: &gt;=1.2.0 &amp;&amp; &lt; 1.3.0 1.x: &gt;=1.0.0 &amp;&amp; &lt; 2.0.0 *: 任意版本都可以 上面的 x 可以用 * 代替，其实，用 x 或 * 的地方可以省略不写，比如 1.2.x 和 1.2 表示的意思是一样的 npm包发布通常我们发布一个包到 npm 仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对 Semver 规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从 Semver 规范： 升级补丁版本号：npm version patch 升级小版本号：npm version minor 升级大版本号：npm version major 当执行 npm publish 时，会首先将当前版本发布到 npm registry，然后更新 dist-tags.latest 的值为新版本。当执行 npm publish --tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等） 参考 https://semver.org/lang/zh-CN/ Semver(语义化版本号)扫盲 - 腾讯IVWEB团队 语义化版本控制模块-Semver","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"antd upload组件不能显示参数图片缩略图","slug":"antd-upload组件不能显示参数图片缩略图","date":"2018-12-13 19:43:05","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/12/13/antd-upload组件不能显示参数图片缩略图/","link":"","permalink":"https://i.jakeyu.top/2018/12/13/antd-upload%E7%BB%84%E4%BB%B6%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%8F%82%E6%95%B0%E5%9B%BE%E7%89%87%E7%BC%A9%E7%95%A5%E5%9B%BE/","excerpt":"在使用ant-design-vue的upload组件时，无法显示加密图片，经过测试，凡是带参数的图片地址都无法显示缩略图。","text":"在使用ant-design-vue的upload组件时，无法显示加密图片，经过测试，凡是带参数的图片地址都无法显示缩略图。 base64这个组件是基于ant-design改写的，在issues中发现了解决办法 #10102 1234567891011121314151617/** * 将图片转换成base64 * @param &#123;String&#125; url 图片地址 */export const base64Url = function (url) &#123; let xhr = new XMLHttpRequest() xhr.onload = function () &#123; let reader = new FileReader() reader.onloadend = function () &#123; self.postMessage(reader.result) //web worker 通信 &#125; reader.readAsDataURL(xhr.response) &#125; xhr.open(&#x27;GET&#x27;, url) xhr.responseType = &#x27;blob&#x27; xhr.send()&#125; 通过ajax获取图片，并将图片转为base64。 Web Worker但是由于我开发的业务页面中有大量图片，如果每个图片都这样操作，页面会有些卡顿。所以需要进行优化。 我选择使用Web Worker，关于Web Worker可以查看阮一峰老师的文章： Web Worker 使用教程 创建一个生成Web Worker的函数： 1234567891011/** * 创建web worker * @param &#123;Function&#125; f 要在worker中执行的函数 * @param &#123;Strint&#125; args 函数参数 */export const createWorker = (f, args) =&gt; &#123; var blob = new Blob([&#x27;(&#x27; + f.toString() + &#x27;)(&quot;&#x27; + args + &#x27;&quot;)&#x27;]) var url = window.URL.createObjectURL(blob) var worker = new Worker(url) return worker&#125; 调用 123456let myWorker = createWorker(base64Url, url)// 监听message事件myWorker.onmessage = (data) =&gt; &#123; console.log(data.data) //打印转换后的base64 myWorker.terminate() //销毁 web worker&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"Object 方法","slug":"Object-preventExtensions-Object-seal-Object-freeze","date":"2018-12-10 09:51:48","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/12/10/Object-preventExtensions-Object-seal-Object-freeze/","link":"","permalink":"https://i.jakeyu.top/2018/12/10/Object-preventExtensions-Object-seal-Object-freeze/","excerpt":"","text":"方法 描述 详情 Object.preventExtensions() 让一个对象变的不可扩展，也就是永远不能再添加新的属性。 MDN Object.isExtensible() 判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。 MDN Object.seal() 封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。 MDN Object.isSealed() 判断一个对象是否被密封。 MDN Object.freeze() 冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。 MDN Object.isFrozen() 判断一个对象是否被冻结。 MDN","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"flex的各种值","slug":"flex的各种值","date":"2018-12-08 17:51:26","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/12/08/flex的各种值/","link":"","permalink":"https://i.jakeyu.top/2018/12/08/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/","excerpt":"","text":"介绍 2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。 关于详细flex使用，可以查看阮一峰的两篇文章: Flex 布局教程：语法篇 Flex 布局教程：实例篇 正文首先明确一点是， flex 是 flex-grow、flex-shrink、flex-basis的缩写。故其取值可以考虑以下情况： flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。同理，如下是等同的： 123456.item &#123;flex: 2333 3222 234px;&#125;.item &#123; flex-grow: 2333; flex-shrink: 3222; flex-basis: 234px;&#125; 当 flex 取值为 none，则计算值为 0 0 auto，如下是等同的： 123456.item &#123;flex: none;&#125;.item &#123; flex-grow: 0; flex-shrink: 0; flex-basis: auto;&#125; 当 flex 取值为 auto，则计算值为 1 1 auto，如下是等同的： 123456.item &#123;flex: auto;&#125;.item &#123; flex-grow: 1; flex-shrink: 1; flex-basis: auto;&#125; 当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的： 123456.item &#123;flex: 1;&#125;.item &#123; flex-grow: 1; flex-shrink: 1; flex-basis: 0%;&#125; 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）： 123456789101112.item-1 &#123;flex: 0%;&#125;.item-1 &#123; flex-grow: 1; flex-shrink: 1; flex-basis: 0%;&#125;.item-2 &#123;flex: 24px;&#125;.item-2 &#123; flex-grow: 1; flex-shrink: 1; flex-basis: 24px;&#125; 当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的： 123456.item &#123;flex: 2 3;&#125;.item &#123; flex-grow: 2; flex-shrink: 3; flex-basis: 0%;&#125; 当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的： 123456.item &#123;flex: 2333 3222px;&#125;.item &#123; flex-grow: 2333; flex-shrink: 1; flex-basis: 3222px;&#125; flex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况： auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。 content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。 百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。 举一个不同的值之间的区别： 12345&lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;item-1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;item-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;item-3&quot;&gt;&lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021.parent &#123; display: flex; width: 600px;&#125;.parent &gt; div &#123; height: 100px;&#125;.item-1 &#123; width: 140px; flex: 2 1 0%; background: blue;&#125;.item-2 &#123; width: 100px; flex: 2 1 auto; background: darkblue;&#125;.item-3 &#123; flex: 1 1 200px; background: lightblue;&#125; See the Pen flex 不同的值 by Jake (@JakeLaoyu) on CodePen. 主轴上父容器总尺寸为 600px 子元素的总基准值是：0% + auto + 200px &#x3D; 300px，其中 0% 即 0 宽度 auto 对应取主尺寸即 100px 故剩余空间为 600px - 300px &#x3D; 300px 伸缩放大系数之和为： 2 + 2 + 1 &#x3D; 5 剩余空间分配如下： item-1 和 item-2 各分配 2&#x2F;5，各得 120px item-3 分配 1&#x2F;5，得 60px 各项目最终宽度为： item-1 &#x3D; 0% + 120px &#x3D; 120px item-2 &#x3D; auto + 120px &#x3D; 220px item-3 &#x3D; 200px + 60px &#x3D; 260px 当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设 而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间 参考 https://segmentfault.com/q/1010000004080910/a-1020000004121373","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"层叠顺序（stacking level）与堆栈上下文（stacking context）","slug":"层叠顺序（stacking-level）与堆栈上下文（stacking-context）","date":"2018-12-01 18:04:35","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/12/01/层叠顺序（stacking-level）与堆栈上下文（stacking-context）/","link":"","permalink":"https://i.jakeyu.top/2018/12/01/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%EF%BC%88stacking-level%EF%BC%89%E4%B8%8E%E5%A0%86%E6%A0%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89/","excerpt":"z-index 看上去其实很简单，根据 z-index 的高低决定层叠的优先级，实则深入进去，会发现内有乾坤。","text":"z-index 看上去其实很简单，根据 z-index 的高低决定层叠的优先级，实则深入进去，会发现内有乾坤。 正文看看下面这题，定义两个 div A 和 B，被包括在同一个父 div 标签下。HTML结构如下： 1234&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;inline-block&quot;&gt;#divA display:inline-block&lt;/div&gt; &lt;div class=&quot;float&quot;&gt; #divB float:left&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617.container&#123; position:relative; background:#ddd;&#125;.container &gt; div&#123; width:200px; height:200px;&#125;.float&#123; float:left; background-color:deeppink;&#125;.inline-block&#123; display:inline-block; background-color:yellowgreen; margin-left:-100px;&#125; 大概描述起来，意思就是拥有共同父容器的两个 DIV 重叠在一起，是 display:inline-block 叠在上面，还是 float:left 叠在上面？ 注意这里 DOM 的顺序，是先生成 display:inline-block ，再生成 float:left 。当然也可以把两个的 DOM 顺序调转如下： 1234&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;float&quot;&gt; #divB float:left&lt;/div&gt; &lt;div class=&quot;inline-block&quot;&gt;#divA display:inline-block&lt;/div&gt;&lt;/div&gt; 会发现，无论顺序如何，始终是 display:inline-block 的 div 叠在上方。 DEMO戳我 这里其实是涉及了所谓的层叠水平（stacking level)，有一张图可以很好的诠释： 运用上图的逻辑，上面的题目就迎刃而解，inline-blcok 的 stacking level 比之 float 要高，所以无论 DOM 的先后顺序都堆叠在上面。 不过上面图示的说法有一些不准确，按照 W3官方 的说法，准确的 7 层为： the background and borders of the element forming the stacking context. the child stacking contexts with negative stack levels (most negative first). the in-flow, non-inline-level, non-positioned descendants. the non-positioned floats. the in-flow, inline-level, non-positioned descendants, including inline tables and inline blocks. the child stacking contexts with stack level 0 and the positioned descendants with stack level 0. the child stacking contexts with positive stack levels (least positive first). 稍微翻译一下： 形成堆叠上下文环境的元素的背景与边框 拥有负 z-index 的子堆叠上下文元素 （负的越高越堆叠层级越低） 正常流式布局，非 inline-block，无 position 定位（static除外）的子元素 无 position 定位（static除外）的 float 浮动元素 正常流式布局， inline-block元素，无 position 定位（static除外）的子元素（包括 display:table 和 display:inline ） 拥有 z-index:0 的子堆叠上下文元素 拥有正 z-index: 的子堆叠上下文元素（正的越低越堆叠层级越低） 所以我们的两个 div 的比较是基于上面所列出来的 4 和 5 。5 的 stacking level 更高，所以叠得更高。 不过！不过！不过！重点来了，请注意，上面的比较是基于两个 div 都没有形成 堆叠上下文 这个为基础的。下面我们修改一下题目，给两个 div ，增加一个 opacity: 123456789101112131415161718.container&#123; position:relative; background:#ddd;&#125;.container &gt; div&#123; width:200px; height:200px; opacity:0.9; // 注意这里，增加一个 opacity&#125;.float&#123; float:left; background-color:deeppink;&#125;.inline-block&#123; display:inline-block; background-color:yellowgreen; margin-left:-100px;&#125; DEMO戳我 会看到，inline-block 的 div 不再一定叠在 float 的 div 之上，而是和 HTML 代码中 DOM 的堆放顺序有关，后添加的 div 会 叠在先添加的 div 之上。 这里的关键点在于，添加的 opacity:0.9 这个让两个 div 都生成了 stacking context（堆叠上下文） 的概念。此时，要对两者进行层叠排列，就需要 z-index ，z-index 越高的层叠层级越高。 堆叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向（电脑屏幕的）视窗或者网页的用户的 z 轴上延伸，HTML 元素依据其自身属性按照优先级顺序占用层叠上下文的空间。 那么，如何触发一个元素形成 堆叠上下文 ？方法如下，摘自 MDN： 根元素 (HTML), z-index 值不为 “auto”的 绝对&#x2F;相对定位， 一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex， opacity 属性值小于 1 的元素（参考 the specification for opacity）， transform 属性值不为 “none”的元素， mix-blend-mode 属性值不为 “normal”的元素， filter值不为“none”的元素， perspective值不为“none”的元素， isolation 属性被设置为 “isolate”的元素， position: fixed 在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值 -webkit-overflow-scrolling 属性被设置 “touch”的元素 所以，上面我们给两个 div 添加 opacity 属性的目的就是为了形成 stacking context。也就是说添加 opacity 替换成上面列出来这些属性都是可以达到同样的效果。 在层叠上下文中，其子元素同样也按照上面解释的规则进行层叠。 特别值得一提的是，其子元素的 z-index 值只在父级层叠上下文中有意义。意思就是父元素的 z-index 低于父元素另一个同级元素，子元素 z-index 再高也没用。 理解上面的 stacking-level 与 stacking-context 是理解 CSS 的层叠顺序的关键。 参见 谈谈一些有趣的CSS题目（1~5） · Issue #1 · chokcoco&#x2F;iCSS","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"获取元素样式","slug":"getComputedStyle","date":"2018-11-29 21:55:35","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/11/29/getComputedStyle/","link":"","permalink":"https://i.jakeyu.top/2018/11/29/getComputedStyle/","excerpt":"引用MND的说明： Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。","text":"引用MND的说明： Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。 语法1let style = window.getComputedStyle(element, [pseudoElt]); element: 用语获取计算样式的Element pseudoElt: 指定一个要匹配的伪元素的字符串。必须对普通元素省略（或null）。 例如: 123var dom = document.getElementById(&quot;test&quot;)var style = window.getComputedStyle(dom , &quot;:after&quot;)var style = window.getComputedStyle(dom , &quot;:after&quot;).content getComputedStyle与style的区别我们使用element.style也可以获取元素的CSS样式声明对象，但是其与getComputedStyle方法还有有一些差异的。 只读与可写 正如上面提到的getComputedStyle方法是只读的，只能获取样式，不能设置；而element.style能读能写，能屈能伸。 获取的对象范围 getComputedStyle方法获取的是最终应用在元素上的所有CSS属性对象（即使没有CSS代码，也会把默认的祖宗八代都显示出来）；而element.style只能获取元素style属性中的CSS样式。因此对于一个光秃秃的元素&lt;p&gt;，getComputedStyle方法返回对象中length属性值（如果有）就是190+(据我测试FF:192, IE9:195, Chrome:253, 不同环境结果可能有差异), 而element.style就是0。 getComputedStyle与defaultView许多在线的演示代码中，getComputedStyle是通过 document.defaultView 对象来调用的。大部分情况下，这是不需要的，因为可以直接通过window对象调用。但有一种情况，你必需要使用 defaultView, 那是在firefox3.6上访问子框架内的样式 。 getPropertyValuegetPropertyValue方法可以获取CSS样式申明对象上的属性值（直接属性名称），例如： 1window.getComputedStyle(element, null).getPropertyValue(&quot;float&quot;); 如果我们不使用getPropertyValue方法，直接使用键值访问，其实也是可以的。但是，比如这里的的float，如果使用键值访问，则不能直接使用getComputedStyle(element, null).float，而应该是cssFloat与styleFloat，自然需要浏览器判断了，比较折腾！ 使用getPropertyValue方法不必可以驼峰书写形式（不支持驼峰写法），例如：style.getPropertyValue(&quot;border-top-left-radius&quot;) 获取变量例子： 123:root&#123; --testMargin:75px;&#125; 12345678// 读取var root = getComputedStyle(document.documentElement);var cssVariable = root.getPropertyValue(&#x27;--testMargin&#x27;).trim();console.log(cssVariable); // &#x27;75px&#x27;// 写入document.documentElement.style.setProperty(&#x27;--testMargin&#x27;, &#x27;100px&#x27;); CSSStyleDeclaration概要CSSStyleDeclaration 表示一个CSS属性键值对的集合。它被用于一些API中： HTMLElement.style - 用于操作单个元素的样式()； (TODO: reword) 作为 declaration block 的接口，当规则为 CSSStyleRule 时，由stylesheet中的 style 属性返回 。 CSSStyleDeclaration也是由window.getComputedStyle()返回的只读接口. 方法 CSSStyleDeclaration.getPropertyPriority(): 返回可选的优先级，”Important”, 例如：1priString= styleObj.getPropertyPriority(&#x27;color&#x27;) CSSStyleDeclaration.getPropertyValue(): 返回属性值。例如:1valString= styleObj.getPropertyValue(&#x27;color&#x27;) CSSStyleDeclaration.item(): 返回属性名。 例如:1nameString= styleObj.item(0) Alternative: nameString= styleObj[0] CSSStyleDeclaration.removeProperty(): 返回被删除的属性。例如:1valString= styleObj.removeProperty(&#x27;color&#x27;) CSSStyleDeclaration.setProperty(): 没有返回值。例如:1styleObj.setProperty(&#x27;color&#x27;, &#x27;red&#x27;, &#x27;important&#x27;) CSSStyleDeclaration.getPropertyCSSValue(): 仅支持通过getComputedStyle的方式。 在Firefox (CSSPrimitiveValue中返回 ROCSSPrimitiveValue, 在其他实现 CSSValue，或为null 速记属性。 兼容性 参考 MDN 获取元素CSS值之getComputedStyle方法熟悉–张鑫旭 CSSStyleDeclaration–MDN","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"},{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"格式化上下文","slug":"格式化上下文","date":"2018-11-28 17:32:07","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/11/28/格式化上下文/","link":"","permalink":"https://i.jakeyu.top/2018/11/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/","excerpt":"BFC 是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。","text":"BFC 是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。 BFCBFC 也叫块格式化上下文 BFC是什么在解释 BFC 是什么之前，需要先介绍 Box、Formatting Context 的概念。 Box: CSS布局的基本单位Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子： block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context； inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context； run-in box: CSS3 中才有， 这儿先不讲了。 Formatting contextFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。 CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 GFC 和 FFC。 BFC 定义BFC(Block formatting context) 直译为”块级格式化上下文”。它是一个独立的渲染区域，只有 Block-level Box 参与， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。 BFC布局规则： 内部的 Box 会在垂直方向，一个接一个地放置。 Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC 的区域不会与 float box 重叠。 BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 计算 BFC 的高度时，浮动元素也参与计算 哪些元素会生成BFC? 根元素 float 属性不为 none position 为 absolute 或 fixed display 为 inline-block, table-cell, table-caption, flex, inline-flex overflow 不为 visible BFC的作用及原理自适应两栏布局12345678910111213141516body &#123; width: 300px; position: relative;&#125;.aside &#123; width: 100px; height: 150px; float: left; background: #f66;&#125;.main &#123; height: 200px; background: #fcc;&#125; 1234&lt;body&gt; &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;/body&gt; 页面： 根据BFC布局规则第3条： 每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 因此，虽然存在浮动的元素aslide，但main的左边依然会与包含块的左边相接触。 根据BFC布局规则第四条： BFC 的区域不会与 float box 重叠。 我们可以通过通过触发 main 生成 BFC， 来实现自适应两栏布局。 123.main &#123; overflow: hidden;&#125; 当触发 main 生成 BFC 后，这个新的 BFC 不会与浮动的 aside 重叠。因此会根据包含块的宽度，和 aside 的宽度，自动变窄。效果如下： 清除内部浮动1234567891011.par &#123; border: 5px solid #fcc; width: 300px;&#125;.child &#123; border: 5px solid #f66; width:100px; height: 100px; float: left;&#125; 123456&lt;body&gt; &lt;div class=&quot;par&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 页面： 根据 BFC 布局规则第六条： 计算 BFC 的高度时，浮动元素也参与计算 为达到清除内部浮动，我们可以触发 par 生成 BFC，那么 par 在计算高度时，par 内部的浮动元素 child 也会参与计算。 代码： 123.par &#123; overflow: hidden;&#125; 效果如下: 防止垂直 margin 重叠12345678p &#123; color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align:center; margin: 100px;&#125; 1234&lt;body&gt; &lt;p&gt;Haha&lt;/p&gt; &lt;p&gt;Hehe&lt;/p&gt;&lt;/body&gt; 页面： 两个p之间的距离为100px，发送了margin重叠。根据BFC布局规则第二条： Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 我们可以在 p 外面包裹一层容器，并触发该容器生成一个 BFC。那么两个 P 便不属于同一个 BFC，就不会发生 margin 重叠了。代码： 1234567891011.wrap &#123; overflow: hidden;&#125;p &#123; color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align:center; margin: 100px;&#125; 123456&lt;body&gt; &lt;p&gt;Haha&lt;/p&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;p&gt;Hehe&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; 效果如下： 总结其实以上的几个例子都体现了BFC布局规则第五条： BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 因为 BFC 内部的元素和外部的元素绝对不会互相影响，因此， 当 BFC 外部存在浮动时，它不应该影响 BFC 内部 Box 的布局，BFC 会通过变窄，而不与浮动有重叠。同样的，当 BFC 内部有浮动时，为了不影响外部元素的布局，BFC 计算高度时会包括浮动的高度。避免 margin 重叠也是这样的一个道理。 IFCIFC(Inline Formatting Contexts)即 内联排版上下文，也可称为 内联格式化上下文。用来规定内联级盒子的格式化规则。 布局规则 内部的Box会在水平方向，一个接一个地放置。 这些Box垂直方向的起点从包含块盒子的顶部开始。 摆放这些Box的时候，它们在水平方向上的外边距、边框、内边距所占用的空间都会被考虑在内。 在垂直方向上，这些框可能会以不同形式来对齐（vertical-align）：它们可能会使用底部或顶部对齐，也可能通过其内部的文本基线（baseline）对齐。 能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框（line box）。行框的宽度是由包含块（containing box）和存在的浮动来决定。 IFC中的line box一般左右边都贴紧其包含块，但是会因为float元素的存在发生变化。float元素会位于IFC与line box之间，使得line box宽度缩短。 IFC中的line box高度由CSS行高计算规则来确定，同个IFC下的多个line box高度可能会不同（比如一行包含了较高的图片，而另一行只有文本）。 当inline-level box的总宽度少于包含它们的line box时，其水平渲染规则由text-align属性来确定，如果取值为justify，那么浏览器会对inline-box（注意不是inline-table 和 inline-block box）中的文字和空格做 出拉伸。 当一个inline box超过line box的宽度时，它会被分割成多个box，这些box被分布在多个line box里。如果一个inline box不能被分割（比如只包含单个字符，或word-breaking机制被禁用，或该行内框受white-space属性值 为nowrap或pre的影响），那么这个inline box将溢出这个line box。 上面的术语可能会看得有点迷糊，一会儿inline box，一会儿line box。line box是 行框，inline box是 行内框（或称为 内联框），我们可简单按字面意思来理解：行内框是包含在行框内（或多个行框内，当出现换行时）的。 行框和行内框行框 行框（line box），同行内框类似的概念，行框是指本行的一个虚拟的矩形框，也是浏览器渲染模式中的一个概念。行框高度等于本行内所有元素中行内框最大的值（以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度）。 行内框 行内框是一个浏览器渲染模型中的一个概念，无法显示出来，但是它又确实存在，它的高度就是行高指定的高度。 何时会生成IFC和BFC可以被元素属性触发而被创建（triggered）不同，IFC只有在一个块元素中仅包含内联级别元素时才会生成。 下面我们通过一个实例来看看行内框的构造： 1&lt;p&gt;Several &lt;em&gt;emphasized words&lt;/em&gt; appear &lt;strong&gt;in this&lt;/strong&gt; sentence, dear.&lt;/p&gt; 12345678910111213141516p &#123; color: whitesmoke; background: orange; width: 200px; line-height: 40px; text-align: center; margin: 30px; font-size: 18px;&#125;em &#123; padding: 2px; margin: 12px; border-width: medium; border-style: dashed; line-height: 24px;&#125; 效果： p 元素产生一个块框，它包含了五个行内框，其中的三个是匿名的： 匿名：”Several” EM: “emphasized words” 匿名：”appear” STRONG: “in this” 匿名：”sentence, dear.” 为了格式化这个段落，用户代理将这五个框排入行框内。本例中，为 p 元素生成的框生成了行内框的包含块。如果该包含块足够宽，则所有的行内框将放在一个行框内。 否则inline box将产生分割，来放置在多个行框内。如上例中所示，这个段落被分布在3个行框中。您可以在上例中修改p元素的width来查看不同的格式化效果。 上例中，em元素被分割成2块（我们把它们称为“split1”和“split2”），margin、padding、border和text-decoration属性将不在分割处产生视觉效果，也就是在split1之后和split2之前无效。 回过来看上面的例子中这些属性的影响： margin 会被插入到 “emphasized” 之前和 “words” 之后。 padding 会被插入到 “emphasized” 的前面和上下，以及 “words” 的后面和上下。 border 将绘制在 “emphasized” 的前面和上下，以及 “words” 的后面和上下。 IFC有什么用途123&lt;div class=&quot;wrap&quot;&gt; &lt;p&gt;使用IFC布局，display:inline-block、text-align:center和vertical-align:middle方法来实现文本垂直居中 inline-block元素以单个封闭块来参与外部的IFC，其内部会生成一个BFC，不在本例讨论范围之内。&lt;/p&gt;&lt;/div&gt; 123456789101112131415161718192021body &#123; margin: 0;&#125;.wrap &#123; text-align: center; line-height: 300px; width: 100%; height: 300px; background-color: #ccc; font-size: 0;&#125;p &#123; line-height: normal; display: inline-block; vertical-align: middle; background-color: #333; font-size: 18px; padding: 10px; width: 360px; color: #fff;&#125; 效果： 我们使用一个块元素来包含一个内联元素，这样会生成一个IFC来规定如何渲染行内元素。按照IFC行内框的布局规则，其水平位置将由text-align属性来确定，所以设置text-align:center将把行内框居中。 外部块元素的行高为内部行框设定了最小高度，好比在渲染时以一个隐藏的0宽度字符开始，具备该块元素所设置的行高（本例中为300px）和字体属性，我们称之为是一个支架（strut），作用是把外部块元素撑起来。参考阅读W3规范：Strut。 然后我们设置内联（或内联块）元素的垂直对齐属性为中间，它将参照前述的隐藏支架的baseline来对齐。如果我们把块元素的字体设置为0，实际效果就是内联元素被垂直居中放置在块元素中。 行高计算用户代理（user agent）将行内级框排入垂直堆叠的行框内。行框的高度由下面步骤决定： 计算行框里的各行内级框的高度。对于置换元素、行内块元素、行内表格元素来说，这是边界框的高度，对于行内框来说，这是其‘line-height’。 行内级元素根据其vertical-align属性垂直对齐。如果这些框使用top或bottom对齐，用户代理必须以最小化行框的高为目标对齐这些框。这可能存在多种对齐方案，CSS 2.1并不定义行框基线的位置（也就是前述strut的位置）。 行框的高是最顶端框的顶边到最底端框的底边的距离。 空的行内元素产生空的行内框，但是这些框仍然拥有margins, padding, borders 和一个line height, 所以在上述行高计算中和有内容的行内元素一样。 行距（Leading）和半行距（half-leading）CSS 假设所有字体的度量都有基线以上的height和基线以下的depth，我们使用A（ascender）来表示这个height（字母高出基线部分），而用D（descender）来表示depth（字母低出基线部分）。 同时我们定义 AD &#x3D; A + D，也就是整个字母的高度。 User agent 必须在一个非替换行内框中按照字符（glyphs）的基线对它们进行对齐。也就是确定A 和 D。 某元素中的字符可能存在多个字体，A 和 D则不尽相同。如果这个行内框不包含任何字符，它被认为包含一个strut（一个0宽度的隐藏字符），这个隐藏字符的A 和 D遵循该元素的第一个有效字体。 除了前面所介绍的BFC和IFC之外，CSS3还引入了新的布局方式及其所生成的格式化上下文，包括grid layout所对应的GFC（grid formatting context）和flex layout所对应的FFC（flex formatting context）。 参考 前端精选文摘：BFC 神奇背后的原理 CSS 内联排版上下文（Inline Formatting Context） css中的baseline 深入理解 CSS 中的行高与基线 img的间隙 inline-block元素vertical-align的问题分析 谈谈一些有趣的CSS题目","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"css响应式正方形居中","slug":"css响应式正方形居中","date":"2018-11-27 21:39:47","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/11/27/css响应式正方形居中/","link":"","permalink":"https://i.jakeyu.top/2018/11/27/css%E5%93%8D%E5%BA%94%E5%BC%8F%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%B1%85%E4%B8%AD/","excerpt":"body -&gt; div#box，body铺满屏幕，box是一个宽度为body一半的正方形，用css使box垂直水平居中。","text":"body -&gt; div#box，body铺满屏幕，box是一个宽度为body一半的正方形，用css使box垂直水平居中。 padding百分比继承自父元素宽度，然后通过绝对定位和translate来实现。 123&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt; 123456789101112body &#123; width: 100vw; height: 100vh;&#125;.box &#123; position: absolute; padding: 25%; background: red; left: 50%; top: 50%; transform: translate(-50%,-50%);&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"经典排序算法","slug":"经典排序算法","date":"2018-11-26 00:43:19","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/11/26/经典排序算法/","link":"","permalink":"https://i.jakeyu.top/2018/11/26/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","excerpt":"","text":"排序算法说明定义对一序列对象根据某个关键字进行排序。 术语说明 稳定：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面； 不稳定：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面； 内排序：所有排序操作都在内存中完成； 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行； 时间复杂度：一个算法执行所耗费的时间。 空间复杂度：运行完一个程序所需内存的大小。 冒泡排序描述 冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 实现 比较相邻的元素。如果第一个比第二个大，就交换它们两个； 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； 针对所有的元素重复以上的步骤，除了最后一个； 重复步骤1~3，直到排序完成。 1234567891011121314function bubbleSort (arr) &#123; console.time(&#x27;耗时：&#x27;) for (let i = 0; i &lt; arr.length; i++) &#123; for (let j = 0; j &lt; arr.length - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]] //交换元素 &#125; &#125; &#125; console.timeEnd(&#x27;耗时：&#x27;) return arr&#125; 优化 改进冒泡排序： 设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。 123456789101112131415161718function bubbleSort (arr) &#123; console.time(&#x27;耗时：&#x27;) var len = arr.length while (len &gt; 0) &#123; let pos = 0 for (let i = 0; i &lt; len; i++) &#123; if (arr[i] &gt; arr[i + 1]) &#123; [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]] // 交换元素 pos = i &#125; &#125; len = pos &#125; console.timeEnd(&#x27;耗时：&#x27;) return arr&#125; 动图 算法分析 最佳情况：T(n) &#x3D; O(n) 当输入的数据已经是正序时 最差情况：T(n) &#x3D; O(n2) 当输入的数据是反序时 平均情况：T(n) &#x3D; O(n2) 选择排序 表现最稳定的排序算法之一，因为无论什么数据进去都是O(n²)的时间复杂度…..所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。 描述 选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 实现n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下： 初始状态：无序区为R[1..n]，有序区为空； 第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区； n-1趟结束，数组有序化了。 12345678910111213141516function selectionSort (arr) &#123; console.time(&#x27;耗时：&#x27;) let len = arr.length let minIndex for (let i = 0; i &lt; len; i++) &#123; minIndex = i for (let j = i + 1; j &lt; len; j++) &#123; if (arr[j] &lt; arr[minIndex]) &#123; minIndex = j &#125; &#125; [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]] &#125; console.timeEnd(&#x27;耗时：&#x27;) return arr&#125; 动图 分析 最佳情况：T(n) &#x3D; O(n2) 最差情况：T(n) &#x3D; O(n2) 平均情况：T(n) &#x3D; O(n2) 插入排序 插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了….. 描述 插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 实现一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下： 从第一个元素开始，该元素可以认为已经被排序； 取出下一个元素，在已经排序的元素序列中从后向前扫描； 如果该元素（已排序）大于新元素，将该元素移到下一位置； 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； 将新元素插入到该位置后； 重复步骤2~5。 123456789101112131415function insertionSort (arr) &#123; console.time(&#x27;插入排序耗时&#x27;); for (let i = 1; i &lt; arr.length; i++) &#123; let key = arr[i] let j = i - 1 while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) &#123; arr[j + 1] = arr[j] j-- &#125; arr[j + 1] = key &#125; console.timeEnd(&#x27;插入排序耗时&#x27;); return arr&#125; 优化 改进插入排序： 查找插入位置时使用二分查找的方式 12345678910111213141516171819202122function insertionSort (array) &#123; console.time(&#x27;二分插入排序耗时：&#x27;); for (var i = 1; i &lt; array.length; i++) &#123; var key = array[i]; var left = 0; var right = i - 1 while (left &lt;= right) &#123; var middle = parseInt((left + right) / 2) if (key &lt; array[middle]) &#123; right = middle - 1 &#125; else &#123; left = middle + 1 &#125; &#125; for (var j = i - 1; j &gt;= left; j--) &#123; array[j + 1] = array[j] &#125; array[left] = key &#125; console.timeEnd(&#x27;二分插入排序耗时：&#x27;); return array&#125; 动图 分析 最佳情况：输入数组按升序排列。T(n) &#x3D; O(n) 最坏情况：输入数组按降序排列。T(n) &#x3D; O(n2) 平均情况：T(n) &#x3D; O(n2) 希尔排序 1959年Shell发明； 第一个突破O(n^2)的排序算法；是简单插入排序的改进版；它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序 描述 希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版》的合著者Robert Sedgewick提出的。 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的： 插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率； 但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位； 希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。 实现先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述： 选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1； 按增量序列个数k，对序列进行k 趟排序； 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。 123456789101112131415161718192021222324function shellSort (arr) &#123; var len = arr.length var temp var gap = 1 console.time(&#x27;希尔排序耗时:&#x27;) while (gap &lt; len / 5) &#123; // 动态定义间隔序列 gap = gap * 5 + 1 &#125; for (gap; gap &gt; 0; gap = Math.floor(gap / 5)) &#123; for (var i = gap; i &lt; len; i++) &#123; temp = arr[i] for (var j = i - gap; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j -= gap) &#123; arr[j + gap] = arr[j] &#125; arr[j + gap] = temp &#125; &#125; console.timeEnd(&#x27;希尔排序耗时:&#x27;) return arr&#125;var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]console.log(shellSort(arr))// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50] 分析 最佳情况：T(n) &#x3D; O(nlog2 n) 最坏情况：T(n) &#x3D; O(nlog2 n) 平均情况：T(n) &#x3D;O(nlog n) 快速排序 快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。 描述 快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。 实现快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下： 从数列中挑出一个元素，称为 “基准”（pivot）； 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作； 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。 1234567891011121314function quickSort (arr) &#123; if (arr.length &lt;= 1) return arr let left = [] let right = [] let center = arr.splice(Math.floor(arr / 2), 1)[0] for (let i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &lt; center) &#123; left.push(arr[i]) &#125; else &#123; right.push(arr[i]) &#125; &#125; return quickSort(left).concat([center], quickSort(right))&#125; 动图 分析 最佳情况：T(n) &#x3D; O(nlog n) 最差情况：T(n) &#x3D; O(n2) 平均情况：T(n) &#x3D; O(nlog n)","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"浅谈 instanceof 和 typeof 的实现原理","slug":"浅谈-instanceof-和-typeof-的实现原理","date":"2018-11-13 09:28:15","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/11/13/浅谈-instanceof-和-typeof-的实现原理/","link":"","permalink":"https://i.jakeyu.top/2018/11/13/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/","excerpt":"","text":"typeof 实现原理typeof 一般被用于判断一个变量的类型，我们可以利用 typeof 来判断number, string, object,boolean, function, undefined, symbol 这七种类型，这种判断能帮助我们搞定一些问题，比如在判断不是 object 类型的数据的时候，typeof能比较清楚的告诉我们具体是哪一类的类型。但是，很遗憾的一点是，typeof 在判断一个 object的数据的时候只能告诉我们这个数据是 object, 而不能细致的具体到是哪一种 object, 比如👉 123let s = new String(&#x27;abc&#x27;);typeof s === &#x27;object&#x27;// trues instanceof String // true 要想判断一个数据具体是哪一种 object 的时候，我们需要利用 instanceof 这个操作符来判断，这个我们后面会说到。 来谈谈关于 typeof 的原理吧，我们可以先想一个很有意思的问题，js 在底层是怎么存储数据的类型信息呢？或者说，一个 js 的变量，在它的底层实现中，它的类型信息是怎么实现的呢？ 其实，js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉 000：对象 010：浮点数 100：字符串 110：布尔 1：整数 but, 对于 undefined 和 null 来说，这两个值的信息存储是有点特殊的: null：所有机器码均为0 undefined：用 −2^30 整数来表示 所以，typeof 在判断 null 的时候就出现问题了，由于 null 的所有机器码均为0，因此直接被当做了对象来看待。 然而用 instanceof 来判断的话👉 1null instanceof null // TypeError: Right-hand side of &#x27;instanceof&#x27; is not an object null 直接被判断为不是 object，这也是 JavaScript 的历史遗留bug，可以参考typeof。 因此在用 typeof 来判断变量类型的时候，我们需要注意，最好是用 typeof 来判断基本数据类型（包括symbol），避免对 null 的判断。 还有一个不错的判断类型的方法，就是Object.prototype.toString，我们可以利用这个方法来对一个变量的类型来进行比较准确的判断 1234567891011121314151617Object.prototype.toString.call(1) // &quot;[object Number]&quot;Object.prototype.toString.call(&#x27;hi&#x27;) // &quot;[object String]&quot;Object.prototype.toString.call(&#123;a:&#x27;hi&#x27;&#125;) // &quot;[object Object]&quot;Object.prototype.toString.call([1,&#x27;a&#x27;]) // &quot;[object Array]&quot;Object.prototype.toString.call(true) // &quot;[object Boolean]&quot;Object.prototype.toString.call(() =&gt; &#123;&#125;) // &quot;[object Function]&quot;Object.prototype.toString.call(null) // &quot;[object Null]&quot;Object.prototype.toString.call(undefined) // &quot;[object Undefined]&quot;Object.prototype.toString.call(Symbol(1)) // &quot;[object Symbol]&quot; instanceof 操作符的实现原理之前我们提到了 instanceof 来判断对象的具体类型，其实 instanceof 主要的作用就是判断一个实例是否属于某种类型 1234let person = function () &#123;&#125;let nicole = new person()nicole instanceof person // true 当然，instanceof 也可以判断一个实例是否是其父类型或者祖先类型的实例。 12345678let person = function () &#123;&#125;let programmer = function () &#123;&#125;programmer.prototype = new person()let nicole = new programmer()nicole instanceof person // truenicole instanceof programmer // true 这是 instanceof 的用法，但是 instanceof 的原理是什么呢？根据 ECMAScript 语言规范，我梳理了一下大概的思路，然后整理了一段代码如下 12345678910111213function new_instance_of (leftVaule, rightVaule) &#123; let rightProto = rightVaule.prototype // 取右表达式的 prototype 值 leftVaule = leftVaule.__proto__ // 取左表达式的__proto__值 while (true) &#123; if (leftVaule === null) &#123; return false &#125; if (leftVaule === rightProto) &#123; return true &#125; leftVaule = leftVaule.__proto__ &#125;&#125; 其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。 看几个很有趣的例子 123456789function Foo() &#123;&#125;Object instanceof Object // trueObject instanceof Function //trueFunction instanceof Function // trueFunction instanceof Object // trueFoo instanceof Foo // falseFoo instanceof Object // trueFoo instanceof Function // true 要想全部理解 instanceof 的原理，除了我们刚刚提到的实现原理，我们还需要知道 JavaScript 的原型继承原理。 关于原型继承的原理，我简单用一张图来表示 我们知道每个 JavaScript 对象均有一个隐式的 __proto__ 原型属性，而显式的原型属性是 prototype，只有 Object.prototype.__proto__ 属性在未修改的情况下为 null 值。根据图上的原理，我们来梳理上面提到的几个有趣的 instanceof 使用的例子。 Object instanceof Object由图可知，Object 的 prototype 属性是 Object.prototype, 而由于 Object 本身是一个函数，由 Function 所创建，所以 Object.__proto__ 的值是 Function.prototype，而 Function.prototype 的 __proto__ 属性是 Object.prototype，所以我们可以判断出，Object instanceof Object 的结果是 true 。用代码简单的表示一下 12345678leftValue = Object.__proto__ = Function.prototype;rightValue = Object.prototype;// 第一次判断leftValue != rightValueleftValue = Function.prototype.__proto__ = Object.prototype// 第二次判断leftValue === rightValue// 返回 true Function instanceof Function 和 Function instanceof Object 的运行过程与 Object instanceof Object 类似，故不再详说。 Foo instanceof FooFoo 函数的 prototype 属性是 Foo.prototype，而 Foo 的 __proto__ 属性是 Function.prototype，由图可知，Foo 的原型链上并没有 Foo.prototype ，因此 Foo instanceof Foo 也就返回 false 。 我们用代码简单的表示一下 123456789101112leftValue = Foo, rightValue = FooleftValue = Foo.__proto = Function.prototyperightValue = Foo.prototype// 第一次判断leftValue != rightValueleftValue = Function.prototype.__proto__ = Object.prototype// 第二次判断leftValue != rightValueleftValue = Object.prototype = null// 第三次判断leftValue === null// 返回 false Foo instanceof Object123456789leftValue = Foo, rightValue = ObjectleftValue = Foo.__proto__ = Function.prototyperightValue = Object.prototype// 第一次判断leftValue != rightValueleftValue = Function.prototype.__proto__ = Object.prototype// 第二次判断leftValue === rightValue// 返回 true Foo instanceof Function123456leftValue = Foo, rightValue = FunctionleftValue = Foo.__proto__ = Function.prototyperightValue = Function.prototype// 第一次判断leftValue === rightValue// 返回 true 总结简单来说，我们使用 typeof 来判断基本数据类型是 ok 的，不过需要注意当用 typeof 来判断 null 类型时的问题，如果想要判断一个对象的具体类型可以考虑用 instanceof，但是 instanceof 也可能判断不准确，比如一个数组，他可以被 instanceof 判断为 Object。所以我们要想比较准确的判断对象实例的类型时，可以采取 Object.prototype.toString.call 方法。 参考 https://juejin.im/post/5b0b9b9051882515773ae714","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"nodejs调用小程序生成二维码接口，并保存成图片","slug":"nodejs调用小程序生成二维码接口，并保存成图片","date":"2018-10-25 22:08:22","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/10/25/nodejs调用小程序生成二维码接口，并保存成图片/","link":"","permalink":"https://i.jakeyu.top/2018/10/25/nodejs%E8%B0%83%E7%94%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%B9%B6%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87/","excerpt":"小程序生成二维码接口返回的是二进制，所以我们要把二进制流保存成图片，再返回给前端。 这里我分别用axios和request实现请求","text":"小程序生成二维码接口返回的是二进制，所以我们要把二进制流保存成图片，再返回给前端。 这里我分别用axios和request实现请求 获取token1const &#123;data: &#123; access_token &#125;&#125; = await axios.get(&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&#x27;) axios1234567891011axios(&#123; method: &#x27;post&#x27;, url: `https://api.weixin.qq.com/wxa/getwxacode?access_token=$&#123;access_token&#125;`, data: &#123; path: &#x27;&#x27; &#125;, responseType: &#x27;stream&#x27;&#125;) .then(function (response) &#123; response.data.pipe(fs.createWriteStream(&#x27;path.jpg&#x27;)) &#125;) request12345678910request.post(&#123; url: `https://api.weixin.qq.com/wxa/getwxacode?access_token=$&#123;access_token&#125;`, json: true, headers: &#123; &#x27;content-type&#x27;: &#x27;application/json&#x27; &#125;, body: &#123; path: &#x27;&#x27; &#125;&#125;, function (error, response, body) &#123; res.send(imgUrl)&#125;).pipe(fs.createWriteStream(&#x27;path.png&#x27;))","author":"Jake","categories":[{"name":"小程序","slug":"小程序","permalink":"https://i.jakeyu.top/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://i.jakeyu.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"现实","slug":"现实","date":"2018-10-22 21:23:45","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/10/22/现实/","link":"","permalink":"https://i.jakeyu.top/2018/10/22/%E7%8E%B0%E5%AE%9E/","excerpt":"本不打算在这个博客里面写一些矫情的文字，我有另一个不公开的博客。但是这篇，我想写在这里。","text":"本不打算在这个博客里面写一些矫情的文字，我有另一个不公开的博客。但是这篇，我想写在这里。 跟她分手了，原因也很简单————现实。 她在美国读书，家境殷实，而我只是一个出身农村普通家庭，从小与水稻、大地为伴。 我一直在努力赚钱，喜欢杭州，想要留在这里。本来异国恋已经很难了，而且我早有心理准备，没想到这一天到来的时候还是会无法释怀。 20多岁的女孩子总归要考虑结婚，未来的问题，买房紧一紧首付还是有的，可是以后呢，跟着我一起吃苦，还房贷。如果再有一个宝宝，她的生活质量会明显下降，她也说过如果在一起会让生活质量下降，那就没必要在一起了。 在一起的这段时间我很开心，她脾气也很好，没有公主脾气，我也全心全意去爱她。开始的时候就清楚的知道想到走到最后很难，即便是她这关过了，她父母呢？哪个女孩子的家长愿意让自己的女儿吃苦。家庭条件我无法选择，我也知道什么都不能靠家里，可是我刚毕业，几乎没有存款。二十多岁的男生，如果不靠家里，又有谁有钱呢，可是哪个女孩子愿意用青春去赌一个未知的未来？她想要的生活我短时间给不了，所以只能放弃，即便很痛苦。 年轻的时候我想不明白为什么会因为外在因素而导致两个相爱的人分道扬镳，想不通为什么一方家长的不同意导致本来都谈婚乱嫁的新人分开……小时候告诉自己谈恋爱一定不分手，可现在洋洋洒洒已经七段感情，但是真正算是好好谈恋爱的也就那么两段。 我们再也不是十八岁，现在看到还在上学，无忧无虑的孩子们只能感叹一句“年轻真好”，那时候我们可以天马行空，做着很多梦，哥几个在一起聊得都是毕业赚多少多少钱，各种游戏开黑，女人等，一旦毕业工作，那些幻想都闭口不谈，慢慢的被现实磨灭。我们几个兄弟有一个群，大学的时候经常闲聊，隔三差五讨论去哪玩、去哪喝酒，晚上喊着楼下来抽一根，无忧无虑，而现在更多的是车子、房子、工资，互相吹捧，用着一些我很讨厌的语气，气氛甚是诡异。而且大家基本都很少说话，一部分是因为大家都忙，一部分是因为感情变了。大家都为各自的生活忙碌奔波，王小波说过：“生活就是个缓慢受锤的过程”。 愿那些跟我一样，在大城市挣扎的人们都不会被这魔幻的地方所抛弃。","author":"Jake","categories":[{"name":"随心","slug":"随心","permalink":"https://i.jakeyu.top/categories/%E9%9A%8F%E5%BF%83/"}],"tags":[]},{"title":"vue webpack模板开启局域网访问","slug":"vue-webpack模板开启局域网访问","date":"2018-09-20 10:18:51","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/09/20/vue-webpack模板开启局域网访问/","link":"","permalink":"https://i.jakeyu.top/2018/09/20/vue-webpack%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE/","excerpt":"","text":"修改config/index.js文件： 123456789const &#123; networkInterfaces &#125; = require(&#x27;os&#x27;)const getIpAddress = () =&gt; (networkInterfaces().en0 || networkInterfaces().en4).filter((&#123; family &#125;) =&gt; family === &#x27;IPv4&#x27;)[0].addressdev: &#123; ... host: getIpAddress() ...&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"VUE","slug":"VUE","permalink":"https://i.jakeyu.top/tags/VUE/"}]},{"title":"css3自定义滚动条","slug":"css3自定义滚动条","date":"2018-09-04 22:42:49","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/09/04/css3自定义滚动条/","link":"","permalink":"https://i.jakeyu.top/2018/09/04/css3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/","excerpt":"","text":"前言webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，所以用处还是挺大的。当然，兼容所有浏览器的滚动条样式目前是不存在的。 DEMO 滚动条属性 ::-webkit-scrollbar 滚动条整体部分 ::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条） ::-webkit-scrollbar-track 滚动条的轨道（里面装有Thumb） ::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。 ::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去） ::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处 ::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件 简洁版这里就不贴出详细代码了，demo里面可以通过查看源码寻找具体样式的设置。来看看demo中第二个滚动条的样式 1234567891011121314151617181920212223/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/::-webkit-scrollbar&#123; width: 16px; height: 16px; background-color: #F5F5F5;&#125;/*定义滚动条轨道 内阴影+圆角*/::-webkit-scrollbar-track&#123; -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); border-radius: 10px; background-color: #F5F5F5;&#125;/*定义滑块 内阴影+圆角*/::-webkit-scrollbar-thumb&#123; border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3); background-color: #555;&#125; 详细设置定义滚动条就是利用伪元素与伪类，那什么是伪元素和伪类呢？ 伪类大家应该很熟悉:link,:focus,:hover，此外CSS3中又增加了许多伪类选择器，如:nth-child，:last-child，:nth-last-of-type()等。 CSS中的伪元素大家以前看过：:first-line,:first-letter,:before,:after。那么在CSS3中，伪元素进行了调整，在以前的基础上增加了一个：也就是现在变成了::first-letter,::first-line,::before,::after，另外CSS3还增加了一个::selection。两个：：和一个：在css3中主要用来区分伪类和伪元素。 webkit的伪类和伪元素的实现很强，可以把滚动条当成一个页面元素来定义，再结合一些高级的CSS3属性，比如渐变、圆角、RGBa等等。然后如果有些地方要用图片，可以把图片也可以转换成Base64，不然每次都得加载那个多个图片，增加请求数。 任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。下面的伪类可以应用到上面的伪元素中。有点小复杂，具体怎么写可以看第一个demo，那里也有注释。 1234567891011121314151617181920212223242526272829303132333435363738394041424344:horizontal/*horizontal伪类适用于任何水平方向上的滚动条*/:vertical/*vertical伪类适用于任何垂直方向的滚动条*/:decrement/*decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮*/:increment/*increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮*/:start/*start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面*/:end/*end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面*/:double-button/*double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。*/:single-button/*single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。*/:no-button/*no-button伪类表示轨道结束的位置没有按钮。*/:corner-present/*corner-present伪类表示滚动条的角落是否存在。*/:window-inactive/*适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。*/::-webkit-scrollbar-track-piece:start &#123;/*滚动条上半边或左半边*/&#125;::-webkit-scrollbar-thumb:window-inactive &#123;/*当焦点不在当前区域滑块的状态*/&#125;::-webkit-scrollbar-button:horizontal:decrement:hover &#123;/*当鼠标在水平滚动条下面的按钮上的状态*/&#125; 参考 地址： CSS3自定义滚动条样式 -webkit-scrollbar - 轩枫阁","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"Content Security Policy (CSP) 介绍","slug":"Content-Security-Policy-CSP-介绍","date":"2018-08-26 19:10:50","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/08/26/Content-Security-Policy-CSP-介绍/","link":"","permalink":"https://i.jakeyu.top/2018/08/26/Content-Security-Policy-CSP-%E4%BB%8B%E7%BB%8D/","excerpt":"内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。","text":"内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。 起因当我不经意间在 Twitter 页面 view source 后，发现了惊喜。 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;Twitter&lt;/title&gt; &lt;style&gt; body &#123; background-color: #ffffff; font-family: sans-serif; &#125; a &#123; color: #1da1f2; &#125; svg &#123; color: #1da1f2; display: block; fill: currentcolor; height: 21px; margin: 13px auto; width: 24px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;noscript&gt; &lt;center&gt;If you’re not redirected soon, please &lt;a href=&quot;/&quot;&gt;use this link&lt;/a&gt;.&lt;/center&gt; &lt;/noscript&gt; &lt;script nonce=&quot;SG0bV9rOanQfzG0ccU8WQw==&quot;&gt; document.cookie = &quot;app_shell_visited=1;path=/;max-age=5&quot;; location.replace(location.href.split(&quot;#&quot;)[0]); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 相比平时看到的其他站点的源码，可以说是很清爽了。没有乱七八糟的标签，功能却一样不少。特别有迷惑性，以为这便是页面所有的源码，但查看 DevTools 的 Source 面板后很容易知道这并不是真实的 HTML 代码。但为何页面源码给出的是如此清爽的版本，这里先不研究。 把目光移向 script 标签时，发现一个不认识的 nonce 属性。它以及它后面的神秘字符串成功引起了我的好奇。再去看 Google 首页的源码，也有好些 nonce 的运用。是时候去了解一下这里的 nonce 是什么了。 123456! &lt;script nonce=&quot;SG0bV9rOanQfzG0ccU8WQw==&quot;&gt; document.cookie = &quot;app_shell_visited=1;path=/;max-age=5&quot;; location.replace(location.href.split(&quot;#&quot;)[0]);&lt;/script&gt; Content Security Policy (CSP)要了解 nonce， 先了解 Content-Security-Policy(CSP)。 我们都知道浏览器有同源策略（same-origin policy）的安全限制，即每个站点只允许加载来自和自身同域（origin）的数据，https://a.com 是无法从 https://b.com 加载到资源的。每个站点被严格限制在了自已的孤岛上，自己就是一个沙盒，这样很安全，整个网络不会杂乱无章。主要地，它能解决大部分安全问题。假若没有同源策略，恶意代码能够轻松在浏览器端执行然后获取各种隐私信息：银行帐号，社交数据等。 那网站间如何进行数据共享，当然是有办法的，了解下 CORS。 现实中，问题是同源策略也并不是万无一失，跨域攻击 Cross-site scripting (XSS) 便包含五花八门绕开限制的手段，形式上通过向页面注入恶意代码完成信息的窃取或攻击。比如 UGC 类型的站点，因为内容依赖用户创建，这就开了很大一个口子，允许用户输入的内容运行在页面上。当然，因为我们都知道会有注入攻击，所以对用户输入的内容进行防 XSS 过滤也成了标配。 Content-Security-Policy 从另一方面给浏览器加了层防护，能极大地减少这种攻击的发生。 原理CSP 通过告诉浏览器一系列规则，严格规定页面中哪些资源允许有哪些来源， 不在指定范围内的统统拒绝。相比同源策略，CSP 可以说是很严格了。 其实施有两种途径： 服务器添加 Content-Security-Policy 响应头来指定规则 HTML 中添加 标签来指定 Content-Security-Policy 规则 mobile.twitter.com header 中的 CSP 规则 为了测试方便，以下示例均使用 &lt;meta&gt; 标签来开启 CSP 规则。但 &lt;meta&gt; 中有些指令是不能使用的，后面会了解到。只有响应头中才能使用全部的限制指令。 一个简单示例 创建一个 HTML 文件放入以下内容： csp_test.html 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#x27;self&#x27; https://unpkg.com&quot;&gt; &lt;title&gt;CSP Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在该测试文件所在目录开启一个本地 server 以访问，这里使用 Python 自带的 server: 1python -m SimpleHTTPServer 8000 然后访问 localhost:8000 以观察结果： 符合 CSP 规则情况下的正常访问 然后我们将 Content-Security-Policy 改成不允许任何资源再试一下： csp_test.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;- &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#x27;self&#x27; https://unpkg.com&quot;&gt;+ &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src ‘none’&quot;&gt; &lt;title&gt;CSP Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 触发 CSP 规则资源被 block 的情况 下面我们来解释这里设置的 CSP 规则及理解为何资源加载失败。 CSP 规则无论是 header 中还是 &lt;meta&gt; 标签中指定，其值的格式都是统一的，由一系列 CSP 指令（directive）组合而成。 示例： 1Content-Security-Policy: &lt;policy-directive&gt;; &lt;policy-directive&gt;… 这里 directive，即指令，是 CSP 规范中规定用以详细详述某种资源的来源，比如前面示例中使用的 script-src，指定脚本可以有哪些合法来源，img-src 则指定图片，以下是常用指令： base-uri 限制可出现在页面 &lt;base&gt; 标签中的链接。 child-src 列出可用于 worker 及以 frame 形式嵌入的链接。 譬如: child-src https://youtube.com 表示只能从 Youtube 嵌入视频资源。 connect-src 可发起连接的地址 (通过 XHR, WebSockets 或 EventSource)。 font-src 字体来源。譬如，要使用 Google web fonts 则需要添加 font-src https://themes.googleusercontent.com 规则。 form-action &lt;form&gt; 标签可提交的地址。 frame-ancestors 当前页面可被哪些来源所嵌入（与 child-src 正好相反）。作用于 &lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; 及 &lt;applet&gt;。 该指令不能通过 &lt;meta&gt; 指定且只对非 HTML文档类型的资源生效。 frame-src 该指令已在 level 2 中废弃但会在 level 3 中恢复使用。未指定的情况下回退到 tochild-src 指令。 img-src 指定图片来源。 media-src 限制音视频资源的来源。 object-src Flash 及其他插件的来源。 plugin-types 限制页面中可加载的插件类型。 report-uri 指定一个可接收 CSP 报告的地址，浏览器会在相应指令不通过时发送报告。不能通过 &lt;meta&gt; 标签来指定。 style-src 限制样式文件的来源。 upgrade-insecure-requests 指导客户端将页面地址重写，HTTP 转 HTTPS。用于站点中有大量旧地址需要重定向的情形。 worker-src CSP Level 3 中的指令，规定可用于 worker, shared worker, 或 service worker 中的地址。 child-src 与 frame-ancestors 看起来比较像。前者规定的是页面中可加载哪些 iframe，后者规定谁可以以 iframe 加载本页。 比如来自不同站点的两个网页 A 与 B，B，B 中有 iframe 加载了 A。那么 A 的 frame-ancestors 需要包含 B B 的 child-src 需要包含 A 默认情况下，这些指令都是最大条件开放的，可以理解为其默认值为 *。比如 img-src，如果不明确指定，则可以从所有地方加载图片资源。 还有种特殊的指令 default-src，如果指定了它的值，则相当于改变了这些未指定的指令的默认值。可以理解为，上面 img-src 如果没指定，本来其默认值是 *，可以加载所有来源的图片，但设置 default-src 后，默认值就成了 default-src 指定的值。 常见的做法会设置 default-src ‘self’，这样所有资源都被限制在了和页面同域下。如果此时想要加载从 CDN 来的图片，将图片来源单独添加上即可。 1Content-Security-Policy: default-src ‘self’; img-src https://cdn.example.com 现在来看开头那个示例，也许现在就能看明白了。因为页面中需要从 CDN 加载 React 库，所以我们&lt;meta&gt; 标签指定了如下 CSP 规则： 1script-src &#x27;self&#x27; https://unpkg.com 这里的 self 及后来改成的 none 是预设值，需用引号包裹，否则会当成 URI 来解析。这里的 CSP 规则表示页面中脚本只能从同域及 https://unpkg.com 加载。假如我们把后者去掉，同样会像上图截图那样 React 库会加载失败，同时控制台中会有加载失败的日志及被触发的规则列出来。 改成 none 之后表示页面不加载任何脚本，即使自己站点上的脚本都无法被加载执行。这里不妨试一下在 csp_test.html 旁边创建一个脚本文件 test.js: test.js 1alert(‘来自 test.js 的问候！’) 同时在页面中引用它： csp_test.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#x27;none&#x27;&quot;&gt; &lt;title&gt;CSP Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;+ &lt;script src=&quot;./test.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 页面执行结果： script-src none 时页面将不加载任何脚本 是的，哪怕是自己的脚本也无法被加载执行。CSP 就是这样严格和明确，不存在模棱两可的情况。所以在指定来源时，我们需要确认 URI 是否正确。 指令可接受的值指令后面跟的来源，有两种写法 预设值 URI 通配符 预设值其中预设值有以下这些： none 不匹配任何东西。 self 匹配当前域，但不包括子域。比如 example.com 可以，api.example.com 则会匹配失败。 unsafe-inline 允许内嵌的脚本及样式。是的，没看错，对于页面中内嵌的内容也是有相应限制规则的。 unsafe-eval 允许通过字符串动态创建的脚本执行，比如 eval，setTimeout 等。 特别地，在 CSP 的严格控制下，页面中内联脚本及样式也会受影响，在没有明确指定的情况下，其不能被浏览器执行。 考虑下面的代码： csp_test.html 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;CSP Test&lt;/title&gt; &lt;style&gt; body&#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello, World!&lt;/h1&gt; &lt;script&gt; window.onload=function()&#123; alert(&#x27;hi jack!&#x27;) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 未指定 CSP 的情况 根据 MDN 上的描述，如果站点未指定 CSP 无则，浏览器默认不会开启相应检查，所以上面一切运行正常，只受正常的同域限制 。 If the site doesn’t offer the CSP header, browsers likewise use the standard same-origin policy.— 来自 MDN 关于 Content Security Policy (CSP) 的描述 我们加上 CSP 限制： csp_test.html 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;+ &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;&quot;&gt; &lt;title&gt;CSP Test&lt;/title&gt; &lt;style&gt; body&#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello, World!&lt;/h1&gt; &lt;script&gt; window.onload=function()&#123; alert(&#x27;hi jack!&#x27;) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 配置站点默认只信息同域的资源，但注意，这个设置并不包含内联的情况，所以结果会如下图。 内联代码被禁止 如何修复它呢。如果我们想要允许页面内的内联脚本或样式，则需要明确地通过 script-src 和 style-src 指出来。 csp_test.html 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;! &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27; ‘unsave-inline’&quot;&gt; &lt;title&gt;CSP Test&lt;/title&gt; &lt;style&gt; body&#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello, World!&lt;/h1&gt; &lt;script&gt; window.onload=function()&#123; alert(&#x27;hi jack!&#x27;) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 这里 default-src &#39;self&#39; ‘unsave-inline’ 配置默认可信的来源有这些： 和页面同域的，以及内联的。 刷新页面，样式及脚本又可以正常执行了。 通常是不建议使用 unsafe-inline 的（同样也不推荐使用 unsafe-eval），因为内联的脚本和样式维护不便，也不利用良好地组织代码。最佳实践是样式抽离到样式文件，脚本放到单独的 js 文件中加载，让 HTML 文件纯粹一点才是好的做法。即使是 onclick=“myHandler” 或 href=“javascript:;” 这种平时常见的写法，也属于内联的脚本，是需要改造的。 如果页面中非得用内联的写法，还有种方式。即页面中这些内联的脚本或样式标签，赋值一个加密串，这个加密串由服务器生成，同时这个加密串被添加到页面的响应头里面。 123&lt;script nonce=&quot;EDNnf03nceIOfn39fn3e9h3sdfa&quot;&gt; // 这里放置内联在 HTML 中的代码&lt;/script&gt; 页面 HTTP 响应头的 Content-Security-Policy 配置中包含相同的加密串： 1Content-Security-Policy: script-src &#x27;nonce-EDNnf03nceIOfn39fn3e9h3sdfa&#x27; 注意这里的 nonce- 前缀。 这也就是文章开头看到的方式，到这里明白了。 &lt;style&gt; 标签也是类似的处理。 这里的加密串一定是随机不可预测的，否则达不到安全效果，且每次页面被访问时重新生成。 除了使用 nonce 指定加密串，还可以通过混淆的 hash 值来达到目的。这种做法不需要在标签上加 nonce 而是将需要内嵌的代码本身使用加密算法生成 hash 后放入 CSP 指令中作为值使用，这里的加密算法支持 sha256, sha384 和 sha512。此时 CSP 中使用的前缀为相应的算法名。 hash 方式的示例： 1&lt;script&gt;alert(&#x27;Hello, world.&#x27;);&lt;/script&gt; 1Content-Security-Policy: script-src &#x27;sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng=&#x27; evaljs 中好些地方是可以以字符串方式动态创建代码并执行，这被认为是不安全的，所以不推荐使用，一般最佳实践里都会提。 setTimeout/setInterval 可接收一段字符串作为代码执行。js setTimeout(&#39;alert(1)&#39;,1000) 。 eval 。js eval(&#39;alert(1)&#39;) 。 Function 构造函数。 js new Function(&#39;alert(1)&#39;) 。 和内联一样，有专门的指令 unsafe-eval 以允许类似代码的执行。但建议的做法是对于 eval 和 Function 构造器，杜绝使用，而 setTimeout/setInterval 可改造为非字符串形式。 123setTimout(function()&#123; alert(1);&#125;, 1000) URI除了上面的预设值，还可通过提供完整的 URI 或带通配符 * 的地址来匹配，以指定资源的合法来源。这里 URI 的规则和配置服务器的跨域响应头是一样的，参考 Same-origin policy。 *://*.example.com:* 会匹配所有 example.com 的子域名，但不包括 example.com。 http://example.com 和 http://www.example.com 是两个不同的 URI。 http://example.com:80 和 http://example.com 也是是两个不同的 URI，虽然网站默认端口就是 80 根据维基百科 Uniform Resource Identifier 页面 给出的解释，一个完整的 URI 由以下部分组成：URI = scheme:[//authority]path[?query][#fragment] 其中 authority 又包含：authority = [userinfo@]host[:port] 所以你可以认为其中某一项不同，那都是两个 URI。了解这点很重要，一如上面列出的第一条例子 *.example.com， 我们很容易先入为主地认为既然已经允许了该域名的所有子域名，那必然 example.com 也是合法的。 因为 URI 是进行动态匹配的，所以解释了上面提到的预设值缘何要加引号。因为如果不加引号的话， self 会表示 host 是 self 的资源地址，而不会表示原有的意思。 优先级CSP 的配置是很灵活的。每条指令可指定多个来源，空格分开。而一条 CSP 规则可由多条指令组成，指令间用分号隔开。各指令间没有顺序的要求，因为每条指令都是各司其职。甚至一次响应中， Content-Security-Policy 响应头都可以重复设置。 我们来看这些情形下 CSP 的表现。 对于设置了多次响应头的情况，最严格的规则会生效。比如下面两条响应头中，虽然 第二条中设置 connect-src 允许 http://example.com/，但第一条里面设置了 connect-src 为 none，所以更加严格的 none 会生效。参见 Multiple content security policies。 1234Content-Security-Policy: default-src &#x27;self&#x27; http://example.com; connect-src &#x27;none&#x27;;Content-Security-Policy: connect-src http://example.com/; script-src http://example.com/ 同一指令多次指定，以第一个为准，后续的会被忽略。 csp_test.html 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;;default-src &#x27;unsafe-inline&#x27;;&quot;&gt; &lt;title&gt;CSP Test&lt;/title&gt; &lt;style&gt; body&#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello, World!&lt;/h1&gt; &lt;script&gt; window.onload=function()&#123; alert(&#x27;hi jack!&#x27;) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 重复配置同一指令时效果展示 很智能地， 浏览器不仅会将检测不过的资源及指令打印出来，重复配置时被忽略的指令也会提示出来。 指定 default-src 的情况下，它会充当 Fetch 类指令 的默认值。即 default-src 并不对所有指令生效，其他指令默认值仍是 *。 发送报告当检测到非法资源时，除了控制台看到的报错信息，也可以让浏览器将日志发送到服务器以供后续分析使用。接收报告的地址可在 Content-Security-Policy 响应头中通过 report-uri 指令来配置。当然，服务端需要编写相应的服务来接收该数据。 1Content-Security-Policy: default-src &#x27;self&#x27;; ...; report-uri /my_amazing_csp_report_parser; 服务端拿到的是以 JSON 形式传来的数据。 123456789&#123; &quot;csp-report&quot;: &#123; &quot;document-uri&quot;: &quot;http://example.org/page.html&quot;, &quot;referrer&quot;: &quot;http://evil.example.com/&quot;, &quot;blocked-uri&quot;: &quot;http://evil.example.com/evil.js&quot;, &quot;violated-directive&quot;: &quot;script-src &#x27;self&#x27; https://apis.google.com&quot;, &quot;original-policy&quot;: &quot;script-src &#x27;self&#x27; https://apis.google.com; report-uri http://example.org/my_amazing_csp_report_parser&quot; &#125;&#125; 报告模式CSP 提供了一种报告模式，该模式下资源不会真的被限制加载，只会对检测到的问题进行上报 ，以 JSON 数据的形式发送到 report-uri 指定的地方。 通过指定 Content-Security-Policy-Report-Only 而不是 Content-Security-Policy，则开启了报告模式。 1Content-Security-Policy-Report-Only: default-src &#x27;self&#x27;; ...; report-uri /my_amazing_csp_report_parser; 当然，你也可以同时指定两种响应头，各自里的规则还会正常执行，不会互相影响。比如： 12Content-Security-Policy: img-src *;Content-Security-Policy-Report-Only: img-src ‘none’; report-uri http://reportcollector.example.com/collector.cgi 这里图片还是会正常加载，但是 img-src ‘none’ 也会检测到并且发送报告。 报告模式对于测试非常有用。在开启 CSP 之前肯定需要对整站做全面的测试，将发现的问题及时修复后再真正开启，比如上面提到的对内联代码的改造。 推荐的做法这样的安全措施当然是能尽快启用就尽快。以下是推荐的做法： 先只开启报告模式，看影响范围，修改问题。 添加指令时从 default-src ‘none’ 开始，查看报错，逐步添加规则直至满足要求。 上线后观察一段时间，稳定后再由报告模式转到强制执行。 浏览器兼容性目前发布的 Level 3 规范 中大部分还未被浏览器实现，通过 Can I Use 的数据 来看，除 IE 外，Level 2 的功能已经得到了很好的支持。这里还有一分来自 W3C 跟踪的各浏览器实现情况的统计：Implementation Report for Content Security Policy Level 2。 对于浏览器不支持的情况，也不必担心，会回退到同源策略的限制上。 参考 原文：http://www.cnblogs.com/Wayou/p/intro_to_content_security_policy.html作者： 刘哇勇","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://i.jakeyu.top/tags/HTML/"}]},{"title":"Object.create","slug":"Object-create","date":"2018-08-23 22:47:10","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/08/23/Object-create/","link":"","permalink":"https://i.jakeyu.top/2018/08/23/Object-create/","excerpt":"在Vue和Vuex的源码中，作者都使用了Object.create(null)来初始化一个新对象。为什么不用更简洁的&#123;&#125;呢？ 在SegmentFault和Stack Overflow等开发者社区中也有很多人展开了讨论，在这里总结成文，温故知新。","text":"在Vue和Vuex的源码中，作者都使用了Object.create(null)来初始化一个新对象。为什么不用更简洁的&#123;&#125;呢？ 在SegmentFault和Stack Overflow等开发者社区中也有很多人展开了讨论，在这里总结成文，温故知新。 定义照搬一下MDN上的定义： 1Object.create(proto,[propertiesObject]) proto:新创建对象的原型对象 propertiesObject:可选。要添加到新对象的可枚举（新添加的属性是其自身的属性，而不是其原型链上的属性）的属性。 实现类式继承下面的例子演示了如何使用Object.create()来实现类式继承。这是一个所有版本JavaScript都支持的单继承。 1234567891011121314151617181920212223242526272829// Shape - 父类(superclass)function Shape() &#123; this.x = 0; this.y = 0;&#125;// 父类的方法Shape.prototype.move = function(x, y) &#123; this.x += x; this.y += y; console.info(&#x27;Shape moved.&#x27;);&#125;;// Rectangle - 子类(subclass)function Rectangle() &#123; Shape.call(this); // call super constructor.&#125;// 子类续承父类Rectangle.prototype = Object.create(Shape.prototype);Rectangle.prototype.constructor = Rectangle;var rect = new Rectangle();console.log(&#x27;Is rect an instance of Rectangle?&#x27;, rect instanceof Rectangle); // trueconsole.log(&#x27;Is rect an instance of Shape?&#x27;, rect instanceof Shape); // truerect.move(1, 1); // Outputs, &#x27;Shape moved.&#x27; 如果你希望能继承到多个对象，则可以使用混入的方式。 123456789101112131415function MyClass() &#123; SuperClass.call(this); OtherSuperClass.call(this);&#125;// 继承一个类MyClass.prototype = Object.create(SuperClass.prototype);// 混合其它Object.assign(MyClass.prototype, OtherSuperClass.prototype);// 重新指定constructorMyClass.prototype.constructor = MyClass;MyClass.prototype.myMethod = function() &#123; // do a thing&#125;; Object.assign 会把OtherSuperClass原型上的函数拷贝到 MyClass原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。Object.assign 是在 ES2015 引入的，且可用 polyfilled。要支持旧浏览器的话，可用使用 jQuery.extend() 或者 _.assign()。 使用 Object.create 的 propertyObject参数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162var o;// 创建一个原型为null的空对象o = Object.create(null);o = &#123;&#125;;// 以字面量方式创建的空对象就相当于:o = Object.create(Object.prototype);o = Object.create(Object.prototype, &#123; // foo会成为所创建对象的数据属性 foo: &#123; writable:true, configurable:true, value: &quot;hello&quot; &#125;, // bar会成为所创建对象的访问器属性 bar: &#123; configurable: false, get: function() &#123; return 10 &#125;, set: function(value) &#123; console.log(&quot;Setting `o.bar` to&quot;, value); &#125; &#125;&#125;);function Constructor()&#123;&#125;o = new Constructor();// 上面的一句就相当于:o = Object.create(Constructor.prototype);// 当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码// 创建一个以另一个空对象为原型,且拥有一个属性p的对象o = Object.create(&#123;&#125;, &#123; p: &#123; value: 42 &#125; &#125;)// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:o.p = 24o.p//42o.q = 12for (var prop in o) &#123; console.log(prop)&#125;//&quot;q&quot;delete o.p//false//创建一个可写的,可枚举的,可配置的属性po2 = Object.create(&#123;&#125;, &#123; p: &#123; value: 42, writable: true, enumerable: true, configurable: true &#125;&#125;); Object.create()、{…}的区别先看看我们经常使用的&#123;&#125;创建的对象是什么样子的： 12var o = &#123;a: 1&#125;;console.log(o) 在chrome控制台打印如下： 从上图可以看到，新创建的对象继承了Object自身的方法，如hasOwnProperty、toString等，在新对象上可以直接使用。 再看看使用Object.create()创建对象： 12345678var o = Object.create(null,&#123; a:&#123; writable:true, configurable:true, value:&#x27;1&#x27; &#125;&#125;)console.log(o) 在chrome控制台打印如下： 可以看到，新创建的对象除了自身属性a之外，原型链上没有任何属性，也就是没有继承Object的任何东西，此时如果我们调用o.toString()会报Uncaught TypeError的错误。 大家可能会注意到，第一个参数使用了null。也就是说将null设置成了新创建对象的原型，自然就不会有原型链上的属性。我们再把上面的例子改一改： 12345678var o = Object.create(&#123;&#125;,&#123; a:&#123; writable:true, configurable:true, value:&#x27;1&#x27; &#125;&#125;)console.log(o) 将null改为&#123;&#125;，结果是怎样的？在chrome控制台打印如下： 我们看到，这样创建的对象和使用&#123;&#125;创建对象已经很相近了，但是还是有一点区别：多了一层proto嵌套。 我们最后再来改一下： 12345678var o = Object.create(Object.prototype,&#123; a:&#123; writable:true, configurable:true, value:&#x27;1&#x27; &#125;&#125;)console.log(o) chrome控制台打印如下： 这次就和使用&#123;&#125;创建的对象一模一样了。至此，我相信大家已经对两者的区别十分清楚了。 Object.create(null)的使用场景再回到文章开头的问题，为什么很多源码作者会使用Object.create(null)来初始化一个新对象呢？这是作者的习惯，还是一个最佳实践？ 其实都不是，这并不是作者不经思考随便用的，也不是javascript编程中的最佳实践，而是需要因地制宜，具体问题具体分析。 我们进一步比较一下Object.create(null)和&#123;&#125;创建控对象的区别： 在chrome打印如下： 从上图可以看到，使用create创建的对象，没有任何属性，显示No properties，我们可以把它当作一个非常纯净的map来使用，我们可以自己定义hasOwnProperty、toString方法，不管是有意还是不小心，我们完全不必担心会将原型链上的同名方法覆盖掉。举个例子： 1234567891011121314//Demo1:var a= &#123;...省略很多属性和方法...&#125;;//如果想要检查a是否存在一个名为toString的属性，你必须像下面这样进行检查：if(Object.prototype.hasOwnProperty.call(a,&#x27;toString&#x27;))&#123; ...&#125;//为什么不能直接用a.hasOwnProperty(&#x27;toString&#x27;)?因为你可能给a添加了一个自定义的hasOwnProperty//你无法使用下面这种方式来进行判断,因为原型上的toString方法是存在的：if(a.toString)&#123;&#125;//Demo2:var a = Object.create(null)//你可以直接使用下面这种方式判断，因为存在的属性，都将定义在a上面，除非手动指定原型：if(a.toString)&#123;&#125; 另一个使用create(null)的理由是，在我们使用for..in循环的时候会遍历对象原型链上的属性，使用create(null)就不必再对属性进行检查了，当然，我们也可以直接使用Object.keys[]。 总结 你需要一个非常干净且高度可定制的对象当作数据字典的时候； 想节省hasOwnProperty带来的一丢丢性能损失并且可以偷懒少些一点代码的时候 用Object.create(null)吧！其他时候，请用&#123;&#125;。 参考 详解Object.create(null) Object.create()–MDN","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"数组去重","slug":"数组去重","date":"2018-08-18 22:28:36","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/08/18/数组去重/","link":"","permalink":"https://i.jakeyu.top/2018/08/18/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/","excerpt":"","text":"Set方法123let arr = [1, 2, 2, 3, 3, 4, 5]console.log([...new Set(arr)]) //[1, 2, 3, 4, 5] indexOf12345678910let arr = [1, 2, 2, 3, 3, 4, 5]let newArr = []arr.forEach(item =&gt; &#123; if(newArr.indexOf(item) === -1) &#123; newArr.push(item) &#125;&#125;)console.log(newArr) //[1, 2, 3, 4, 5] 正常情况下使用这种方式没问题，但是当arr中有NaN时： 12345678910let arr = [1, 2, 2, 3, 3, 4, 5, NaN, NaN]let newArr = []arr.forEach(item =&gt; &#123; if(newArr.indexOf(item) === -1) &#123; newArr.push(item) &#125;&#125;)console.log(newArr) //[1, 2, 3, 4, 5, NaN, NaN] 结果与预期的不符，因为indexOf判断NaN时，结果始终为-1。 我们可以使用includes进行判断，includes会正确判断NaN，但是与Object.is()表现不同的是+0和-0，includes判断+0、-0为true。 关于Object.is()请查看：在相等比较中使用 Object.is()让结果更准确 12345678910let arr = [1, 2, 2, 3, 3, 4, 5, NaN, NaN]let newArr = []arr.forEach(item =&gt; &#123; if(!newArr.includes(item)) &#123; newArr.push(item) &#125;&#125;)console.log(newArr) //[1, 2, 3, 4, 5, NaN] 使用对象Key123456789101112let arr = [1, 2, 2, 3, 3, 4, 5, NaN, NaN]let newArr = []let obj = &#123;&#125;arr.forEach(item =&gt; &#123; if(!obj[item]) &#123; obj[item] = true newArr.push(item) &#125;&#125;)console.log(newArr) //[1, 2, 3, 4, 5, NaN] 但是如果下面的情况，使用这种方式就会有问题： 123456789101112let arr = [1, 2, 2, 3, 3, 4, 5, &#x27;5&#x27;, NaN, NaN]let newArr = []let obj = &#123;&#125;arr.forEach(item =&gt; &#123; if(!obj[item]) &#123; obj[item] = true newArr.push(item) &#125;&#125;)console.log(newArr) //[1, 2, 3, 4, 5, NaN] 我们发现&#39;5&#39;被过滤掉了，因为Object的会把key默认转换成字符串，所以识别5时，会当成&#39;5&#39;处理，所以再判断&#39;5&#39;时，对象中已经存在。 对于这样的情况，我们可以使用ES6的Map结构。 123456789101112let arr = [1, 2, 2, 3, 3, 4, 5, &#x27;5&#x27;, NaN, NaN]let newArr = []let obj = new Map()arr.forEach(item =&gt; &#123; if(!obj.has(item)) &#123; obj.set(item,true) newArr.push(item) &#125;&#125;)console.log(newArr) //[1, 2, 3, 4, 5, &quot;5&quot;, NaN] 我们看到Map并没有把5转换成&#39;5&#39;。 关于Map更多了解，请查看：Set 和 Map 数据结构","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"解构","slug":"解构","date":"2018-08-14 23:28:08","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/08/14/解构/","link":"","permalink":"https://i.jakeyu.top/2018/08/14/%E8%A7%A3%E6%9E%84/","excerpt":"","text":"对象解构基本用法123456789let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;&#125;let &#123; type, name &#125; = nodeconsole.log(type) // Indentifierconsole.log(type) // foo 解构赋值1234567891011let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;&#125;let type = &#x27;Literal&#x27;let name = 5(&#123; type, name &#125; = node)console.log(type) // Indentifierconsole.log(name) // foo ** 注： ** 一定要用小括号包裹解构赋值语句，JavaScript引擎将一对开放的花括号视为一个代码块，而语法规定，代码块语句不允许出现在解构赋值语句左侧，添加小括号后可以将块语句转化为一个表达式，从而实现整个解构赋值的过程。 给函数解构赋值123456789101112131415let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;&#125;let type = &#x27;Literal&#x27;let name = 5function outputInfo(value) &#123; console.log(value === node) // true&#125;outputInfo(&#123; type, name &#125; = node)console.log(type) // Indentifierconsole.log(name) // foo 默认值123456789101112let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;&#125;let type = &#x27;Literal&#x27;let name = 5let &#123; type, name, value &#125; = nodeconsole.log(type) // Indentifierconsole.log(name) // fooconsole.log(value) // undefined 123456789101112let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;&#125;let type = &#x27;Literal&#x27;let name = 5let &#123; type, name, value = true &#125; = nodeconsole.log(type) // Indentifierconsole.log(name) // fooconsole.log(value) // true 非同名局部变量赋值123456789let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;&#125;let &#123; type: localType, name: localName &#125; = nodeconsole.log(localType) // Indentifierconsole.log(localName) // foo 默认值 12345678let node = &#123; type: &quot;Indentifier&quot;&#125;let &#123; type: localType, name: localName = &quot;bar&quot; &#125; = nodeconsole.log(localType) // Indentifierconsole.log(localName) // bar 嵌套对象解构12345678910111213141516171819let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;, loc: &#123; start: &#123; line: 1, column: 1 &#125;, end: &#123; line: 1, column: 4 &#125; &#125;&#125;let &#123; loc: &#123; start &#125; &#125; = nodeconsole.log(start.line) // 1console.log(start.column) // 1 非同名局部变量赋值 12345678910111213141516171819let node = &#123; type: &quot;Indentifier&quot;, name: &quot;foo&quot;, loc: &#123; start: &#123; line: 1, column: 1 &#125;, end: &#123; line: 1, column: 4 &#125; &#125;&#125;let &#123; loc: &#123; start: localStart &#125; &#125; = nodeconsole.log(localStart.line) // 1console.log(localStart.column) // 1 数组解构基本用法123456let colors = [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ]let [ firstColor, secondColor ] = colorsconsole.log(firstColor) // redconsole.log(secondColor) // green 取特定位置12345let colors = [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ]let [ , , thirdColor ] = colorsconsole.log(thirdColor) // blue 解构赋值12345678let colors = [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ]let firstColor = &#x27;black&#x27;let secondColor = &#x27;purple&#x27;let [ firstColor, secondColor ] = colorsconsole.log(firstColor) // redconsole.log(secondColor) // green 交换变量ES51234567let a = 1let b = 2let tmptmp = aa = bb = tmp ES61234let a = 1let b = 2[ a, b ] = [ b, a ] 默认值123456let colors = [ &quot;red&quot; ]let [ firstColor, secondColor = &#x27;green&#x27; ] = colorsconsole.log(firstColor) // redconsole.log(secondColor) // green 嵌套数组解构123456let colors = [ &quot;red&quot;, [ &quot;green&quot;, &quot;lightgreen&quot; ], &quot;blue&quot; ]let [ firstColor, [ secondColor ] ] = colorsconsole.log(firstColor) // redconsole.log(secondColor) // green 不定元素123456let colors = [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ]let [ firstColor, ...restColors ] = colorsconsole.log(firstColor) // redconsole.log(restColors) // [ &quot;green&quot;, &quot;blue&quot; ] 克隆12345let colors = [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ]let [ ...cloneColors ] = colorsconsole.log(cloneColors) // [ &quot;red&quot;, &quot;green&quot;, &quot;blue&quot; ] 混合解构123456789101112131415161718192021let node = &#123; type: &#x27;Identifier&#x27;, name: &#x27;foo&#x27;, loc: &#123; start: &#123; line: 1, column: 1 &#125;, end: &#123; line: 1, column: 4 &#125;, range: [0, 3] &#125;&#125;let &#123; loc: &#123; start &#125;, range: [startIndex] &#125; = nodeconsole.log(start.line) // 1console.log(start.column) // 1console.logs(startIndex) // 0 参考 深入理解ES6 – 作者: 【美】Nicholas C. Zakas","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://i.jakeyu.top/tags/ES6/"}]},{"title":"在相等比较中使用 Object.is()让结果更准确","slug":"在相等比较中使用-Object-is-让结果更准确","date":"2018-08-14 21:55:28","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/08/14/在相等比较中使用-Object-is-让结果更准确/","link":"","permalink":"https://i.jakeyu.top/2018/08/14/%E5%9C%A8%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Object-is-%E8%AE%A9%E7%BB%93%E6%9E%9C%E6%9B%B4%E5%87%86%E7%A1%AE/","excerpt":"当在JavaScript中比较两个值时，可能习惯于使用==或===，我更喜欢后者，因为==存在强制类型转换。但是===也不完全准确。","text":"当在JavaScript中比较两个值时，可能习惯于使用==或===，我更喜欢后者，因为==存在强制类型转换。但是===也不完全准确。 比较NaN需要使用isNaN()方法才可以正确检测 NaN。 ES6中引入了Object.is()方法来弥补全等运算符的不准确运算。这个方法接收两个参数，如果这两个参数类型相同且具有相同的值，则返回true。 对于Object.is()方法来说，其运行结果大部分情况中与===运算符相同，唯一区别在于+0和-0被识别为不相等并且NaN与NaN等价。 放一张对比图: 参考 深入理解ES6 – 作者: 【美】Nicholas C. Zakas 为什么你应该在相等比较中使用 Object.is()","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://i.jakeyu.top/tags/ES6/"}]},{"title":"video汇总","slug":"video汇总","date":"2018-07-19 18:30:50","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/07/19/video汇总/","link":"","permalink":"https://i.jakeyu.top/2018/07/19/video%E6%B1%87%E6%80%BB/","excerpt":"开发中遇到的video一些问题的汇总。","text":"开发中遇到的video一些问题的汇总。 倍数播放B站，或者腾讯视频等主流视频网站视频现在都支持倍速播放功能。介绍一下实现方法。 其实很简单，使用HTML5 video 原生 playbackrate 属性就能实现。 12345var video = document.getElementById(&quot;video&quot;);var speed = video.playbackRate //获取播放速度video.playbackRate = 0.5 //设置播放速度为0.5 常用属性1234567891011121314&lt;video id=&quot;video&quot; src=&quot;video.mp4&quot; controls = &quot;true&quot; poster=&quot;images.jpg&quot; /*视频封面*/ preload=&quot;auto&quot; webkit-playsinline=&quot;true&quot; /*这个属性是ios 10中设置可以让视频在小窗内播放，也就是不是全屏播放*/ playsinline=&quot;true&quot; /*IOS微信浏览器支持小窗内播放*/ x-webkit-airplay=&quot;allow&quot; x5-video-player-type=&quot;h5&quot; /*启用H5播放器,是wechat安卓版特性*/ x5-video-player-fullscreen=&quot;true&quot; /*全屏设置，设置为 true 是防止横屏*/ x5-video-orientation=&quot;portraint&quot; //播放器支付的方向， landscape横屏，portraint竖屏，默认值为竖屏 style=&quot;object-fit:fill&quot;&gt;&lt;/video&gt; src: 视频地址 controls: 使用系统默认控制组件 poster: 属性规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。如果未设置该属性，则使用视频的第一帧来代替。 preload: 属性规定在页面加载后载入视频。 webkit-playsinline、playsinline: 视频播放时局域播放，不脱离文档流 。但是这个属性比较特别， 需要嵌入网页的APP比如WeChat中UIwebview 的allowsInlineMediaPlayback &#x3D; YES webview.allowsInlineMediaPlayback &#x3D; YES，才能生效。换句话说，如果APP不设置，你页面中加了这标签也无效，这也就是为什么安卓手机WeChat 播放视频总是全屏，因为APP不支持playsinline，而ISO的WeChat却支持。 x-webkit-airplay=”allow”: 这个属性应该是使此视频支持ios的AirPlay功能。使用AirPlay可以直接从使用iOS的设备上的不同位置播放视频、音乐还有照片文件，也就是说通过AirPlay功能可以实现影音文件的无线播放，当然前提是播放的终端设备也要支持相应的功能 x5-video-player-type: 启用同层H5播放器，就是在视频全屏的时候，div可以呈现在视频层上，也是WeChat安卓版特有的属性。同层播放别名也叫做沉浸式播放，播放的时候看似全屏，但是已经除去了control和微信的导航栏，只留下”X”和”&lt;”两键。目前的同层播放器只在Android（包括微信）上生效，暂时不支持iOS。至于为什么同层播放只对安卓开放，是因为安卓不能像ISO一样局域播放，默认的全屏会使得一些界面操作被阻拦，如果是全屏H5还好，但是做直播的话，诸如弹幕那样的功能就无法实现了，所以这时候同层播放的概念就解决了这个问题。不过在测试的过程中发现，不同版本的IOS和安卓效果略有不同 x5-video-orientation: 声明播放器支持的方向，可选值landscape 横屏, portraint竖屏。默认值portraint。无论是直播还是全屏H5一般都是竖屏播放，但是这个属性需要x5-video-player-type开启H5模式 x5­-video­-player­-fullscreen: 全屏设置。它又两个属性值，ture和false，true支持全屏播放，false不支持全屏播放。其实，IOS 微信浏览器是webkit内核，相关的属性都支持，也是为什么X5同层播放不支持的原因。安卓微信浏览器是X5内核，一些属性标签比如playsinline就不支持，所以始终全屏。 自动播放123456const video = document.getElementById(&#x27;video&#x27;)video.play()// 兼容微信document.addEventListener(&#x27;WeixinJSBridgeReady&#x27;, function () &#123; video.play()&#125;, false) 参考链接 视频H5 video标签最佳实践","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"video","slug":"video","permalink":"https://i.jakeyu.top/tags/video/"}]},{"title":"css3实现文字渐变色动画","slug":"css3实现文字渐变色动画","date":"2018-06-27 16:44:25","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/06/27/css3实现文字渐变色动画/","link":"","permalink":"https://i.jakeyu.top/2018/06/27/css3%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E6%B8%90%E5%8F%98%E8%89%B2%E5%8A%A8%E7%94%BB/","excerpt":"","text":"利用css3background-clip属性： background-clip: border-box || padding-box || context-box || no-clip || text 1&lt;div class=&quot;title&quot;&gt;彩蛋不只是结尾才有&lt;/div&gt; 123456789101112131415161718.title &#123; font-size: 16px; background-image: -webkit-linear-gradient(90deg, #4e17df, #fb6bea 25%, #4e17df 50%, #fb6bea 75%, #4e17df); -webkit-text-fill-color: transparent; -webkit-background-clip: text; background-size: 100% 600%; animation: title 10s linear infinite;&#125;@keyframes title &#123; 0% &#123; background-position: 0 0; &#125; 100% &#123; background-position: 0 -300%; &#125;&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"Android微信真机联调","slug":"Android微信真机联调","date":"2018-06-05 16:48:25","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/06/05/Android微信真机联调/","link":"","permalink":"https://i.jakeyu.top/2018/06/05/Android%E5%BE%AE%E4%BF%A1%E7%9C%9F%E6%9C%BA%E8%81%94%E8%B0%83/","excerpt":"","text":"chrome开发者工具调试 使用微信打开 http://debugx5.qq.com 在打开的网页中选择 【信息】-&gt;【TBS settings】，勾选 【是否打开 TBS 内核 Inspector 调试功能】 重启微信 开启安卓开发者调试工具，打开USB调试 使用chrome打开 chrome://inspect ![](//blogimg.jakeyu.top/Android微信真机联调/Jietu20180605-171919.png) ![](//blogimg.jakeyu.top/Android微信真机联调/Jietu20180605-172348.png) TBS Studio官方文档","author":"Jake","categories":[{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"NexT v5.1.4 进阶配置","slug":"NexT v5.1.4 进阶配置","date":"2018-06-04 15:27:04","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/06/04/NexT v5.1.4 进阶配置/","link":"","permalink":"https://i.jakeyu.top/2018/06/04/NexT%20v5.1.4%20%E8%BF%9B%E9%98%B6%E9%85%8D%E7%BD%AE/","excerpt":"","text":"添加swiperdemohttps://i.jakeyu.top/2018/06/03/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/#%E6%88%AA%E5%9B%BE 配置编辑主题配置文件/themes/next/_config.ylm，在vendors下面添加： 1234# swiper version 4.3.2# http://www.swiper.com.cn/swiper_css: //cdnjs.loli.net/ajax/libs/Swiper/4.3.2/css/swiper.min.cssswiper_js: //cdnjs.loli.net/ajax/libs/Swiper/4.3.2/js/swiper.min.js 编辑/themes/next/layout/_partials/head.swig，添加： 1&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; theme.vendors.swiper_css &#125;&#125;&quot;&gt; 新建/themes/next/layout/_third-party/swiper/swiper.swig 1&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; theme.vendors.swiper_js &#125;&#125;&quot;&gt;&lt;/script&gt; 编辑/themes/next/layout/_layout.swig，添加： 123456.......&#123;% include &#x27;_scripts/boostrap.swig&#x27; %&#125;&#123;% include &#x27;_third-party/swiper/swiper.swig&#x27; %&#125;&#123;% include &#x27;_third-party/comments/index.swig&#x27; %&#125;&#123;% include &#x27;_third-party/search/index.swig&#x27; %&#125;....... 新建/themes/next/source/css/_common/components/third-party/swiper.styl 1234.swiper&#123; position: relative; overflow: hidden;&#125; 编辑/themes/next/source/css/_common/components/third-party/third-party.styl，添加： 12345.......@import &quot;busuanzi-counter&quot;;@import &quot;swiper&quot;;@import &quot;algolia-search&quot; if hexo-config(&#x27;algolia_search.enable&#x27;);....... 编辑/themes/next/source/js/src/util.js，添加： 123456789101112131415161718192021222324252627282930313233NexT.utils = NexT.$u = &#123; swiper: function() &#123; $(&#x27;.swiper&#x27;).each(function(index,item)&#123; var _ = $(item) var wapper = $(&#x27;&lt;div class=&quot;swiper-wrapper&quot;&gt;&lt;/div&gt;&#x27;) _.addClass(&#x27;swiper-&#x27; + (index+1)) _.append(&#x27;&lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;&lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;&lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;&#x27;) _.find(&#x27;img&#x27;).each(function (index,item) &#123; wapper.append($(&#x27;&lt;div class=&quot;swiper-slide&quot;&gt;&lt;/div&gt;&#x27;).append(item)) &#125;) _.prepend(wapper) _.find(&#x27;br&#x27;).remove() new Swiper(&#x27;.swiper-&#x27; + (index + 1), &#123; autoHeight: true, preloadImages: true, loop : true, pagination: &#123; el: &#x27;.swiper-pagination&#x27;, &#125;, navigation: &#123; nextEl: &#x27;.swiper-button-next&#x27;, prevEl: &#x27;.swiper-button-prev&#x27;, &#125;, mousewheel: true, &#125;) &#125;) &#125;, /** * Wrap images with fancybox support. */ wrapImageWithFancyBox: function () &#123; ....... 编辑/themes/next/source/js/src/bootstrap.js，添加： 1234......NexT.utils.swiper()CONFIG.fancybox &amp;&amp; NexT.utils.wrapImageWithFancyBox();...... 注意：一定要在CONFIG.fancybox &amp;&amp; NexT.utils.wrapImageWithFancyBox();前面添加 写作1234&lt;div class=&quot;swiper&quot;&gt;![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180604-141733.png)![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180604-141841.png)&lt;/div&gt; 添加运行时间配置编辑/themes/next/source/css/_mixins/base.styl，添加 12345678@media (max-width: 767px) &#123; .since-line &#123; display: none; &#125; #since &#123; display: block; &#125;&#125; 编辑/themes/next/layout/_layout.swig，添加： 123456789&lt;footer id=&quot;footer&quot; class=&quot;footer&quot;&gt; &lt;div class=&quot;footer-inner&quot;&gt; &#123;% include &#x27;_partials/footer.swig&#x27; %&#125; &#123;% include &#x27;_third-party/analytics/analytics-with-widget.swig&#x27; %&#125; &#123;% block footer %&#125;&#123;% endblock %&#125; &lt;span class=&quot;post-meta-divider since-line&quot;&gt;|&lt;/span&gt; &lt;span id=&quot;since&quot;&gt;&lt;/span&gt; &lt;/div&gt;&lt;/footer&gt; 在_layout.swig文件最后添加: 1234567891011121314151617181920&lt;script type=&quot;text/javascript&quot;&gt; function show_date_time () &#123; window.setTimeout(function () &#123; show_date_time(); &#125;, 1000); var BirthDay = new Date(2016,8,25); var today = new Date(); var timeold = (today.getTime() - BirthDay.getTime()); var msPerDay = 24 * 60 * 60 * 1000; var e_daysold = timeold / msPerDay; var daysold = Math.floor(e_daysold); var e_hrsold = (e_daysold - daysold) * 24; var hrsold = Math.floor(e_hrsold); var e_minsold = (e_hrsold - hrsold) * 60; var minsold = Math.floor((e_hrsold - hrsold) * 60); var seconds = Math.floor((e_minsold - minsold) * 60); $(&#x27;#since&#x27;).html(daysold + &quot;天&quot; + hrsold + &quot;小时&quot; + minsold + &quot;分&quot; + seconds + &quot;秒&quot;); &#125; show_date_time();&lt;/script&gt;","author":"Jake","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://i.jakeyu.top/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://i.jakeyu.top/tags/Hexo/"}]},{"title":"mac好用的软件整理","slug":"mac好用的软件整理","date":"2018-06-03 23:07:50","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/06/03/mac好用的软件整理/","link":"","permalink":"https://i.jakeyu.top/2018/06/03/mac%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/","excerpt":"","text":"先粗略写一下，后面详细说明 如果点击app store地址打开错误，请关闭电脑代理再打开 开发iHostsapp store 地址 host管理工具，随时快捷键呼出，呼出位置是鼠标所在位置。切换配置过得代理 Your browser does not support the video tag. iTerm2 + Oh My ZSHhttps://www.iterm2.com/http://ohmyz.sh/ 终端神器 go2Shellhttp://zipzapmac.com/go2shell 在当前文件夹打开终端 Your browser does not support the video tag. postmanhttps://www.getpostman.com/ 功能强大的网页调试与发送网页HTTP请求的工具。 sourcetreehttps://www.sourcetreeapp.com/ git图形管理 gitterhttps://gitter.im/vuejs/vue Gitter是GitHub存储库的开发人员和用户的即时通讯聊天室系统。 Medishttps://github.com/luin/medis redis 数据库客户端 Studio 3Thttps://studio3t.com/ mongodb 数据库客户端，个人用户免费 Cyberduckhttps://cyberduck.io/ Cyberduck is a libre server and cloud storage browser for Mac and Windows with support for FTP, SFTP, WebDAV, Amazon S3, OpenStack Swift, Backblaze B2, Microsoft Azure &amp; OneDrive, Google Drive and Dropbox. ForkLiftapp store FTP + SFTP + WebDAV + Amazon s3 客户端 charleshttps://www.charlesproxy.com/ mac http 代理、抓包等工具 笔记Bearhttp://www.bear-writer.com/ 高颜值、高效率的写作工具 奇妙清单https://www.wunderlist.com/zh/ 记录待办事项，并可以设置提醒 和Bear各有优势。Bear如果要和其他设备同步需要付费，奇妙清单是免费的。所以工作的时候我选择Bear，因为工作离不开电脑。平时自己的项目或者记录要做的时用奇妙清单，随时可以添加，因为idea转瞬即逝，即便没有电脑也可以使用手机添加 图片imageOptimhttps://imageoptim.com/mac 图片压缩 PicUhttps://github.com/chenxtdo/UPImageMacApp 七牛图片上传 视频IINAhttps://lhc70000.github.io/iina/zh-cn/ 支持全格式、颜值很高的视频播放器， 工具Hastehttps://itunes.apple.com/cn/app/haste-quick-web-search/id1175250324?mt=12 Haste 是一款一站式，大撒网式搜索工具，当你双击 ⌘ 键两次后会自动弹出搜索框，输入关键目标词，按回车键即可在包括主流搜索引擎在内的所有互联网网站上进行目标搜索。 OmniDiskSweeperhttps://www.omnigroup.com/more/ 清理电脑神器 iStat Menushttps://bjango.com/mac/istatmenus/ 系统监控 yomailhttp://www.yomail.com/ 邮箱客户端 Maipohttps://weiboformac.sinaapp.com/ 微博客户端 Tickeys官网 打字机械音效声音模拟器 Bartenderhttps://www.macbartender.com/ 图标整理 NameChanger官网 批量修改文件名 SiteSuckerhttp://ricks-apps.com/ 站点文件爬取 iTextapp store 图片翻译成文字 magnetapp store 调整应用窗口大小 cakebrewhttps://www.cakebrew.com/ brew安装的软件管理 The Unarchiverapp store 功能强大的解压工具 Kekahttps://www.keka.io/en/ 这款软件 app store 售价为 ￥12，而官网下载是免费的。主要用于压缩，而解压功能远不如 The Unarchiver 强大 macDownhttps://macdown.uranusjr.com/ 简单好用的markdow编辑工具 截图app store 截图功能包括区域截图／窗口截图／全屏截图／倒计时截图／录制屏幕，保存可自定义选择图片和视频质量 ![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w.jpg) ![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w1.jpg) ![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w2.jpg) ![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w3.jpg) ![](//blogimg.jakeyu.top/mac好用的软件整理/314x0w4.jpg) LICEcap官网 LICEcap 是一款屏幕录制工具，支持导出 GIF 动画图片格式，轻量级、使用简单，录制过程中可以随意改变录屏范围。 LICEcap 非常轻量级，安装包不到 500KB。运行后会以窗口的方式显示在桌面，拖动选取一个合适的大小范围，点击 Record 选取保存路径就开始录屏了。LICEcap 在录屏过程中可以随时拖动窗口改变录屏范围，Stop 过后自动保存为 GIF 格式。 pasteapp store 保存复制过的内容 1passwordapp store 保存密码工具，大概每个月28元，但是跟安全相比，很便宜了 Reeder 3app store RSS等订阅工具 appcleanerhttps://freemacsoft.net/appcleaner/ 软件卸载 Siphttps://sipapp.io/ 屏幕取色器 sketchhttps://www.sketchapp.com/ 轻量，易用的矢量设计工具 插件 加速大师app store Mac加速大师是一款功能强大的多合一系统优化App，它可以清理Mac多种类型的垃圾文件，优化启动项目，清理无用的app。适合Mac的日常维护，尤其适合于使用多年的旧Mac，性能提升显著。更重要的是它完全免费，绝对值得拥有。 ![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095457@2x.png) ![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095531@2x.png) ![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095549@2x.png) ![](//blogimg.jakeyu.top/mac好用的软件整理/Jietu20180606-095517@2x.png) handshakerapp store 在mac上管理安卓手机 Irvueapp store 自动换壁纸软件,它自动获取 Unsplash 上的高质量无版权图片作为壁纸。在其菜单栏菜单中的 Update interval（更新时间）中可以设置更新间隔，从每半小时到每月都可以设置，也可以选择手动更新。 Unsplashapp store 作为质量最高的免费无版权图片资源网站之一，Unsplash 一直被众多第三方壁纸应用选为图片来源，而这个高质量的照片网站终于有官方的 Mac 客户端了。Unsplash 的 macOS 客户端设计非常简约，打开应用后它会常驻在菜单栏上，点击图标即可看到当前壁纸缩略图，你可以选择随机更换一张新壁纸、下载原图或在 Unsplash 网站上查看图片。 屏保Aerial项目地址: JohnCoates&#x2F;Aerial: Apple TV Aerial Screensaver for Mac 极简时钟：Fliqlo官网: Fliqlo - The Flip Clock Screensaver 更简约的时钟：Padbury官网：Padbury Clock — A Screen Saver for macOS Watch Screensaver for OSX官网: rasmusnielsen — creative","author":"Jake","categories":[{"name":"mac","slug":"mac","permalink":"https://i.jakeyu.top/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://i.jakeyu.top/tags/mac/"}]},{"title":"swiper内容超出纵向滚动","slug":"swiper内容超出纵向滚动","date":"2018-05-28 22:16:05","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/05/28/swiper内容超出纵向滚动/","link":"","permalink":"https://i.jakeyu.top/2018/05/28/swiper%E5%86%85%E5%AE%B9%E8%B6%85%E5%87%BA%E7%BA%B5%E5%90%91%E6%BB%9A%E5%8A%A8/","excerpt":"","text":"打包报错使用swiper 4.x，webpack打包出错 12js/dist/app.js from UglifyJsUnexpected token: name (Dom7) [./node_modules/dom7/dist/dom7.modular.js:14,0][js/dist/app.js:24688,6] 最后使用swiper 3.4.2解决 超出内容滚动1234567891011121314151617181920212223242526this.swiper = new Swiper(&#x27;#swiper&#x27;, &#123; direction: &#x27;vertical&#x27;&#125;)var startScroll, touchStart, touchCurrent;this.swiper.slides.on(&#x27;touchstart&#x27;, function (e) &#123; startScroll = this.scrollTop; touchStart = e.targetTouches[0].pageY;&#125;, true);this.swiper.slides.on(&#x27;touchmove&#x27;, function (e) &#123; if (startScroll &gt; 0 &amp;&amp; startScroll &lt; this.scrollHeight - this.offsetHeight) &#123; e.stopPropagation(); &#125; touchCurrent = e.targetTouches[0].pageY; var touchesDiff = touchCurrent - touchStart; var slide = this; var onlyScrolling = (slide.scrollHeight &gt; slide.offsetHeight) &amp;&amp; // allow only when slide is scrollable ( (touchesDiff &lt; 0 &amp;&amp; startScroll === 0) || // start from top edge to scroll bottom (touchesDiff &gt; 0 &amp;&amp; startScroll === (slide.scrollHeight - slide.offsetHeight)) || // start from bottom edge to scroll top (startScroll &gt; 0 &amp;&amp; startScroll &lt; (slide.scrollHeight - slide.offsetHeight)) // start from the middle ); if (onlyScrolling) &#123; e.stopPropagation(); &#125;&#125;, true); 答案出处Unexpected token: name (Dom7) 超出内容滚动","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Mac 彻底删除 Atom","slug":"Mac-彻底删除-Atom","date":"2018-05-17 14:59:08","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/05/17/Mac-彻底删除-Atom/","link":"","permalink":"https://i.jakeyu.top/2018/05/17/Mac-%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4-Atom/","excerpt":"![](&#x2F;&#x2F;blogimg.jakeyu.top&#x2F;Mac 彻底删除 Atom&#x2F;1_JSK29tJmY2hyGS9xDOGkzg.png)","text":"![](&#x2F;&#x2F;blogimg.jakeyu.top&#x2F;Mac 彻底删除 Atom&#x2F;1_JSK29tJmY2hyGS9xDOGkzg.png) 自从更新到1.25.0后，经常崩溃，查到原因ISSUES，但是官方还没有解决，所以需要删除Atom，重新安装1.24.1。 删除所有Package1rm -rf ~/.atom/packages 彻底卸载Atom参考: How to Completely Uninstall Atom for Mac? 12345678910rm -rf ~/.atomrm -rf /usr/local/bin/atomrm -rf /usr/local/bin/apmrm -rf /Applications/Atom.apprm -rf ~/Library/Preferences/com.github.atom.plistrm -rf &quot;~/Library/Application Support/com.github.atom.ShipIt&quot;rm -rf &quot;~/Library/Application Support/Atom&quot;rm -rf &quot;~/Library/Saved Application State/com.github.atom.savedState&quot;rm -rf ~/Library/Caches/com.github.atomrm -rf ~/Library/Caches/Atom","author":"Jake","categories":[{"name":"Mac","slug":"Mac","permalink":"https://i.jakeyu.top/categories/Mac/"}],"tags":[]},{"title":"git commit规范 和 Change log","slug":"git-commit规范-和-Change-log","date":"2018-05-10 16:49:26","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/05/10/git-commit规范-和-Change-log/","link":"","permalink":"https://i.jakeyu.top/2018/05/10/git-commit%E8%A7%84%E8%8C%83-%E5%92%8C-Change-log/","excerpt":"","text":"Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。 1git commit -m &quot;hello world&quot; 上面代码的-m参数，就是用来指定 commit mesage 的。 如果一行不够，可以只执行git commit，就会跳出文本编辑器，让你写多行。 1git commit 基本上，你写什么都行（这里，这里和这里）。 但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。 目前，社区有多种 Commit message 的写法规范。本文介绍Angular 规范（见上图），这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。 Commit message 的作用格式化的Commit message，有几个好处。 提供更多的历史信息，方便快速浏览。 比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。 1git log &lt;last tag&gt; HEAD --pretty=format:%s 可以过滤某些commit（比如文档改动），便于快速查找信息。 比如，下面的命令仅仅显示本次发布新增加的功能。 1git log &lt;last release&gt; HEAD --grep feature 可以直接从commit生成Change log。 Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。 Commit message 的格式每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。 12345&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt; 其中，Header 是必需的，Body 和 Footer 可以省略。 不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。 HeaderHeader部分只有一行，包括三个字段：type （必需）、scope （可选）和subject （必需）。 typetype用于说明 commit 的类别，只允许使用下面7个标识。 build：影响构建系统或外部依赖项的更改（示例范围：gulp，broccoli，npm）。如果添加某个依赖 A，那可能是build(npm): add dependenceA ci：我们的CI配置文件和脚本的更改（示例范围：Travis，Circle，BrowserStack，SauceLabs） feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 不影响代码含义的更改（空格，格式，缺少分号等） perf: 代码更改可提高性能 refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。 scopescope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。 subjectsubject是 commit 目的的简短描述，不超过50个字符。 以动词开头，使用第一人称现在时，比如change，而不是changed或changes 第一个字母小写 结尾不加句号（.） BodyBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。 1234567More detailed explanatory text, if necessary. Wrap it toabout 72 characters or so.Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent 有两个注意点。 使用第一人称现在时，比如使用change而不是changed或changes。 应该说明代码变动的动机，以及与以前行为的对比。 FooterFooter 部分只用于两种情况。 不兼容变动如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。 1234567891011121314151617BREAKING CHANGE: isolate scope bindings definition has changed. To migrate the code follow the example below: Before: scope: &#123; myAttr: &#x27;attribute&#x27;, &#125; After: scope: &#123; myAttr: &#x27;@&#x27;, &#125; The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it. 关闭 Issue如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。 1Closes #234 也可以一次关闭多个 issue 。 1Closes #123, #245, #992 Revert还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。 12revert: feat(pencil): add &#x27;graphiteWidth&#x27; optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02. Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。 如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。 commit验证commitlintcommitlint 提供了检测 commit 的功能和一些最基础的规则。使用者需要根据这些规则配置出自己的规范。 首先在项目中安装依赖 1yarn add @commitlint/cli @commitlint/config-conventional --dev 在package.json中添加： 12345678910&quot;commitlint&quot;: &#123; &quot;extends&quot;: [ &quot;@commitlint/config-conventional&quot; ], &quot;rules&quot;: &#123; &quot;subject-case&quot;: [ 0 ] &#125;&#125; 检查commit当然是要在每次执行git commit的时候，所以我们使用husky 1yarn add husky --dev 在package.json中添加： 12345&quot;husky&quot;: &#123; &quot;hooks&quot;: &#123; &quot;commit-msg&quot;: &quot;commitlint -e $GIT_PARAMS&quot; &#125;&#125; validate-commit-msgvalidate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。 它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。 接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。 12345&quot;config&quot;: &#123; &quot;ghooks&quot;: &#123; &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot; &#125; &#125; 然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。 123$ git add -A$ git commit -m &quot;edit markdown&quot;INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown CommitizenCommitizen是一个撰写合格 Commit message 的工具。 安装命令如下。 1npm install -g commitizen 然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。 1commitizen init cz-conventional-changelog --save --save-exact 以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。 生成 Change log如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。 生成的文档包括以下三个部分。 New features Bug fixes Breaking changes. 每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。 conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。 123$ npm install -g conventional-changelog$ cd my-project$ conventional-changelog -p angular -i CHANGELOG.md -w 上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。 如果你想生成所有发布的 Change log，要改为运行下面的命令。 1$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0 为了方便使用，可以将其写入package.json的scripts字段。 12345&#123; &quot;scripts&quot;: &#123; &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot; &#125;&#125; 以后，直接运行下面的命令即可。 1$ npm run changelog 声明 作者： 阮一峰转载自： http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html","author":"Jake","categories":[{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Javascript原生base64编码解码函数btoa(atob)用法","slug":"Javascript原生base64编码解码函数btoa(atob)用法","date":"2018-05-08 17:19:19","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/05/08/Javascript原生base64编码解码函数btoa(atob)用法/","link":"","permalink":"https://i.jakeyu.top/2018/05/08/Javascript%E5%8E%9F%E7%94%9Fbase64%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%E5%87%BD%E6%95%B0btoa(atob)%E7%94%A8%E6%B3%95/","excerpt":"window.btoa和window.atob分别编码与解码base64 ，它们在现代浏览器中受到广泛的支持。","text":"window.btoa和window.atob分别编码与解码base64 ，它们在现代浏览器中受到广泛的支持。 兼容性 编码base64函数btoa提示：函数名中的b表示binary即原始的待编码数据，a表示ASCII，即编码后的结果（base64编码后，就只是纯的ASCII字符），btoa就是将binary的数据转为ASCII字符（串）。 用法： 1console.log(btoa(&#x27;Hello world!&#x27;));//SGVsbG8gd29ybGQh 解码base64函数atob可以将base64字符串还原成二进制格式（通常是原始的字符串，JavaScript中字符串就是一种序列化的二进制数据） 用法： 1console.log(atob(&#x27;SGVsbG8gd29ybGQh&#x27;));//Hello world! 原始数据含非ASCII字符（例如中文）时的处理执行下面的代码： 1btoa(&#x27;我是中文&#x27;); 会有如下的报错信息： 1Uncaught DOMException: Failed to execute ‘btoa’ on ‘Window’: The string to be encoded contains characters outside of the Latin1 range.(…) 说明只能对ASCII字符进行编码，对于中文来说，可以通过下面的方式进行编码： 1console.log(btoa(unescape(encodeURIComponent(&#x27;我是中文&#x27;))));//5oiR5piv5Lit5paH 解码方法： 1console.log(decodeURIComponent(escape(atob(&#x27;5oiR5piv5Lit5paH&#x27;))));//我是中文 作者：lyz810原文：https://blog.lyz810.com/article/2016/07/javascript-base64-encode-and-decode/","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"nodemon热重启","slug":"nodemon热重启","date":"2018-05-01 04:41:10","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/05/01/nodemon热重启/","link":"","permalink":"https://i.jakeyu.top/2018/05/01/nodemon%E7%83%AD%E9%87%8D%E5%90%AF/","excerpt":"","text":"https://github.com/remy/nodemon 本地安装1npm install nodemon --save 创建配置文件 nodemon.json123456789101112131415161718&#123; &quot;restartable&quot;: &quot;rs&quot;, &quot;ignore&quot;: [ &quot;node_modules/&quot;, &quot;public/**/*.*&quot; ], &quot;verbose&quot;: true, &quot;execMap&quot;: &#123; &quot;js&quot;: &quot;node --harmony&quot; &#125;, &quot;watch&quot;: [ ], &quot;env&quot;: &#123; &quot;NODE_ENV&quot;: &quot;development&quot; &#125;, &quot;ext&quot;: &quot;js json&quot;&#125; restartable-设置重启模式 ignore-设置忽略文件 verbose-设置日志输出模式，true 详细模式 execMap-设置运行服务的后缀名与对应的命令123&#123; “js”: “node –harmony”&#125; 表示使用 nodemon 代替 node watch-监听哪些文件的变化，当变化的时候自动重启 ext-监控指定的后缀文件名 运行1nodemon app.js","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/tags/Node/"}]},{"title":"css扩展语言通过变量声明媒体查询","slug":"css扩展语言通过变量声明媒体查询","date":"2018-04-14 01:16:55","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/04/14/css扩展语言通过变量声明媒体查询/","link":"","permalink":"https://i.jakeyu.top/2018/04/14/css%E6%89%A9%E5%B1%95%E8%AF%AD%E8%A8%80%E9%80%9A%E8%BF%87%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"scss123456$mobile: &#x27;only screen and (max-device-width: 720px),only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 720px)&#x27;;@media #&#123;$mobile&#125;&#123; font-size: (100vw/7.5);&#125; Less12345@mobile: ~&quot;only screen and (max-device-width: 720px), only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 720px)&quot;;@media @mobile&#123; font-size: (100vw/7.5);&#125; postcss123456@custom-media --mobile only screen and (max-device-width: 720px), only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 720px);@media (--mobile)&#123; font-size: (100vw/7.5);&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"ngixn反向代理报错解决","slug":"ngixn反向代理报错解决","date":"2018-03-16 15:24:19","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/03/16/ngixn反向代理报错解决/","link":"","permalink":"https://i.jakeyu.top/2018/03/16/ngixn%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/","excerpt":"今天在写七牛图床管理时，使用nginx反向代理，加载文件报错Net::ERR_INCOMPLETE_CHUNKED_ENCODING","text":"今天在写七牛图床管理时，使用nginx反向代理，加载文件报错Net::ERR_INCOMPLETE_CHUNKED_ENCODING 查看nginx日志文件/usr/local/var/log/nginx/error.log发现下面这行： 12018/03/16 15:22:21 [crit] 77033#0: *3361 open() &quot;/usr/local/var/run/nginx/proxy_temp/7/12/0000000127&quot; failed (13: Permission denied) while reading upstream, client: 127.0.0.1, server: dev.jakeyu.top, request: &quot;GET /app.js HTTP/1.1&quot;, upstream: &quot;http://127.0.0.1:8081/app.js&quot;, host: &quot;dev.jakeyu.top:8080&quot;, referrer: &quot;http://dev.jakeyu.top:8080/&quot; 于是切换到proxy_temp所在目录，修改目录用户： 1chown -R jake ./proxy-temp 完美解决","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://i.jakeyu.top/tags/Nginx/"}]},{"title":"移动端fixed和input获取焦点软键盘弹出影响定位的问题","slug":"移动端fixed和input获取焦点软键盘弹出影响定位的问题","date":"2018-03-15 11:31:17","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/03/15/移动端fixed和input获取焦点软键盘弹出影响定位的问题/","link":"","permalink":"https://i.jakeyu.top/2018/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AFfixed%E5%92%8Cinput%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E5%BD%B1%E5%93%8D%E5%AE%9A%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"在移动端使用fixed将按钮定位在底部时，当input获取焦点弹出软键盘时，在安卓系统会奖底部的按钮顶上去。效果图：","text":"在移动端使用fixed将按钮定位在底部时，当input获取焦点弹出软键盘时，在安卓系统会奖底部的按钮顶上去。效果图： 解决办法： 12345678var h = document.body.clientHeight;window.onresize = function()&#123; if (document.body.clientHeight &lt; h) &#123; document.getElementsByClassName(&#x27;footer&#x27;)[0].style.display = &quot;none&quot;; &#125;else&#123; document.getElementsByClassName(&#x27;footer&#x27;)[0].style.display = &quot;block&quot;; &#125;&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"元素旋转90度后居中","slug":"元素旋转90度后居中","date":"2018-03-11 22:56:09","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/03/11/元素旋转90度后居中/","link":"","permalink":"https://i.jakeyu.top/2018/03/11/%E5%85%83%E7%B4%A0%E6%97%8B%E8%BD%AC90%E5%BA%A6%E5%90%8E%E5%B1%85%E4%B8%AD/","excerpt":"123&lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner rotate&quot;&gt;Centered?&lt;/div&gt;&lt;/div&gt; div.outer是一个窄垂直条。 div.inner旋转90度。我想要文本居中？出现在其容器div.outer中心。不确定div.outer的大小。 See the Pen qodqzq by Jake (@JakeLaoyu) on CodePen.","text":"123&lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner rotate&quot;&gt;Centered?&lt;/div&gt;&lt;/div&gt; div.outer是一个窄垂直条。 div.inner旋转90度。我想要文本居中？出现在其容器div.outer中心。不确定div.outer的大小。 See the Pen qodqzq by Jake (@JakeLaoyu) on CodePen. 关键是将顶部和左边的位置设置为50％，然后将transformX和transformY设置为-50％。 123456789.inner &#123; position: absolute; top: 50%; left: 50%;&#125;.rotate &#123; transform: translateX(-50%) translateY(-50%) rotate(-90deg);&#125; 原文地址 https://codeday.me/bug/20171009/83576.html","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"横向视频在手机垂直时全屏播放","slug":"横向视频在手机垂直时全屏播放","date":"2018-03-08 16:02:19","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/03/08/横向视频在手机垂直时全屏播放/","link":"","permalink":"https://i.jakeyu.top/2018/03/08/%E6%A8%AA%E5%90%91%E8%A7%86%E9%A2%91%E5%9C%A8%E6%89%8B%E6%9C%BA%E5%9E%82%E7%9B%B4%E6%97%B6%E5%85%A8%E5%B1%8F%E6%92%AD%E6%94%BE/","excerpt":"通过监听window.orientation，让视频在手机上保持全屏播放","text":"通过监听window.orientation，让视频在手机上保持全屏播放 HTML123456789101112131415&lt;div class=&quot;video-wrap&quot;&gt; &lt;video id=&quot;video&quot; controls=&quot;false&quot; x5-video-player-type=&quot;h5&quot; x5-video-player-fullscreen=&#x27;true&#x27; preload webkit-playsinline=&quot;true&quot; playsinline x5-video-orientation=&quot;landscape&quot; x5-video-player-type=&quot;h5&quot; &gt; &lt;source src=&quot;//img.dxycdn.com/biz/topic_files/biz/lilai-onconnect-h5/dist/video/video.mp4&quot; type=&quot;video/mp4&quot; /&gt; &lt;/video&gt;&lt;/div&gt; CSS123456789101112131415161718.video-wrap &#123; &amp;.vertical &#123; transform: translateX(-50%) translateY(-50%) rotate(90deg); position: absolute; top: 50%; left: 50%; &#125; &amp;.horizontal &#123; width: 100%; height: 100%; &#125;&#125;#video &#123; width: 100%; height: 100%;&#125; JS1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950const $video = $(&#x27;.video-wrap&#x27;)changeVideoDirection(window.orientation)// 监听屏幕旋转window.addEventListener(&#x27;orientationchange&#x27;, function () &#123; setTimeout(function () &#123; changeVideoDirection(window.orientation) &#125;, 300)&#125;, false)/** * 视频自动播放 * @return &#123;[type]&#125; [description] */exports.videoAutoPlay = function () &#123; const video = document.getElementById(&#x27;video&#x27;) video.play() // 兼容微信 document.addEventListener(&#x27;WeixinJSBridgeReady&#x27;, function () &#123; video.play() &#125;, false) video.addEventListener(&#x27;ended&#x27;, function () &#123; location.href = `$&#123;location.origin&#125;/services/onconnect/form` &#125;)&#125;/** * 修改视频播放角度 * @param &#123;[type]&#125; angle 0：竖屏 90：横屏 * @return &#123;[type]&#125; [description] */function changeVideoDirection (angle) &#123; if(angle == 0) &#123; $video.removeClass(&#x27;horizontal&#x27;) $video.addClass(&#x27;vertical&#x27;) let clientW = document.body.clientWidth let clientH = document.body.clientHeight $video.width(Math.max(clientW, clientH)) $video.height(Math.min(clientW, clientH)) &#125;else&#123; $video.removeClass(&#x27;vertical&#x27;) $video.addClass(&#x27;horizontal&#x27;) $video.width(&#x27;100%&#x27;) $video.height(&#x27;100%&#x27;) &#125;&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"ios微信background-attachment失效解决","slug":"ios微信background-attachment失效解决","date":"2018-03-08 15:59:11","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/03/08/ios微信background-attachment失效解决/","link":"","permalink":"https://i.jakeyu.top/2018/03/08/ios%E5%BE%AE%E4%BF%A1background-attachment%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3/","excerpt":"","text":"1234567891011body:before&#123; content: &#x27; &#x27;; position: fixed; z-index: -1; top: 0; right: 0; bottom: 0; left: 0; background: url(&quot;../images/bg.png?ewrfg&quot;) center no-repeat; background-size: 100% 100%;&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"nth-child用法","slug":"nth-child用法","date":"2018-02-22 13:51:35","updated":"2023-03-24 05:08:37","comments":true,"path":"2018/02/22/nth-child用法/","link":"","permalink":"https://i.jakeyu.top/2018/02/22/nth-child%E7%94%A8%E6%B3%95/","excerpt":"nth-child是个神奇的东西，但是总会忘记一些常用的用法。","text":"nth-child是个神奇的东西，但是总会忘记一些常用的用法。 :nth-child(2)选取第几个标签，“2可以是你想要的数字” 1ul li:nth-child(2)&#123;background:#090&#125; :nth-child(n+4)选取大于等于4标签，“n”表示从整数，下同 1ul li:nth-child(n+4)&#123;background:#090&#125; :nth-child(-n+4)选取小于等于4标签 1ul li:nth-child(-n+4)&#123;background:#090&#125; :nth-child(2n)选取偶数标签，2n也可以是even 1ul li:nth-child(2n)&#123;background:#090&#125; :nth-child(2n-1)选取奇数标签，2n-1可以是odd 1ul li:nth-child(2n-1)&#123;background:#090&#125; :nth-child(3n+1)自定义选取标签，3n+1表示“隔二取一” 1ul li:nth-child(3n+1)&#123;background:#090&#125; :last-child选取最后一个标签 1ul li:last-child&#123;background:#090&#125; :nth-last-child(3)选取倒数第几个标签,3表示选取第3个 1ul li:nth-last-child(3)&#123;background:#090&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"canvas多指触控[转]","slug":"canvas多指","date":"2017-09-18 17:03:21","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/09/18/canvas多指/","link":"","permalink":"https://i.jakeyu.top/2017/09/18/canvas%E5%A4%9A%E6%8C%87/","excerpt":"","text":"原文：触摸事件 为了给触摸界面提供有力支持, 触摸事件提供了响应用户对触摸屏或者触摸板上操作的能力. 定义平面对触摸敏感的平面 触摸点平面上的一个接触点. 有可能是手指 (或者 肘部, 耳朵, 鼻子, 或任何东西, 不过大多数情况下是手指) 或者触摸笔. 接口TouchEvent代表当触摸行为在平面上变化的时候发生的事件. Touch代表用户与触摸平面间的一个接触点. TouchList代表一系列的Touch; 一般在用户多个手指同时接触触控平面时使用这个接口. DocumentTouch包含了一些创建Touch对象与TouchList对象的便捷方法. 例子这个例子可跟踪多点同时触控,允许用户用多指触摸的方式在&lt;canvas&gt;元素上画图. 这个例子只会在支持触摸事件的浏览器下生效. 注意: 我们用“手指”表示用户与触摸平面进行交互,除此以外也可以是触摸笔或者其他方式. 创建 canvas1234567&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;600&quot; style=&quot;border:solid black 1px;&quot;&gt; Your browser does not support canvas element.&lt;/canvas&gt;&lt;br&gt;&lt;button onclick=&quot;startup()&quot;&gt;Initialize&lt;/button&gt;&lt;br&gt;Log: &lt;pre id=&quot;log&quot; style=&quot;border: 1px solid #ccc;&quot;&gt;&lt;/pre&gt; 设置事件处理器当页面加载时，下面的startup()函数本应通过我们在&lt;body&gt;元素上设置的onload 属性而被触发，但是由于MND在线案例系统限制，我们在这里通过一个按钮的点击事件触发。 1234567function startup() &#123; var el = document.getElementsByTagName(&quot;canvas&quot;)[0]; el.addEventListener(&quot;touchstart&quot;, handleStart, false); el.addEventListener(&quot;touchend&quot;, handleEnd, false); el.addEventListener(&quot;touchmove&quot;, handleMove, false); log(&quot;initialized.&quot;)&#125; 这里给我们的&lt;canvas&gt;元素设置了所有触摸相关的事件监听器，因此当事件触发时我们就可以处理它们. 跟踪新的触摸行为我们将检测正在进行的触摸事件 1var ongoingTouches = new Array(); 当一个 touchstart 事件被触发, 代表在触摸板上一个发生了一个新的触摸行为,下面的 handleStart()函数会被调用. 12345678910111213function handleStart(evt) &#123; evt.preventDefault(); var el = document.getElementsByTagName(&quot;canvas&quot;)[0]; var ctx = el.getContext(&quot;2d&quot;); var touches = evt.changedTouches; for (var i=0; i&lt;touches.length; i++) &#123; ongoingTouches.push(touches[i]); var color = colorForTouch(touches[i]); ctx.fillStyle = color; ctx.fillRect(touches[i].pageX-2, touches[i].pageY-2, 4, 4); &#125;&#125; event.preventDefault()阻止了浏览器继续处理触摸事件 (这同样也阻止了鼠标事件的传递). 而后我们拿到事件上下文，从事件的TouchEvent.changedTouches 属性中拿到改变中的触摸点列表. 我们遍历上述的点列表Touch 并把这些点压入一个代表当前活动的触摸点组成的数组中，以这些点为起点画矩形; 我们设置线条宽度为四像素，所以最终我们画出来的是一个四乘四的正方形。 当触摸移动时绘制每当一根或者几根手指在触摸平面上移动时, touchmove 事件被触发, 随之handleMove()函数被调用.此例子中，这个函数更新了上面保存过的触摸点信息，之后，从触摸点之前的位置到现在的位置之间绘制直线，且对每个点都进行这样的操作. 123456789101112131415161718192021function handleMove(evt) &#123; evt.preventDefault(); var el = document.getElementsByTagName(&quot;canvas&quot;)[0]; var ctx = el.getContext(&quot;2d&quot;); var touches = evt.changedTouches; ctx.lineWidth = 4; for (var i=0; i&lt;touches.length; i++) &#123; var color = colorForTouch(touches[i]); var idx = ongoingTouchIndexById(touches[i].identifier); ctx.fillStyle = color; ctx.beginPath(); ctx.moveTo(ongoingTouches[idx].pageX, ongoingTouches[idx].pageY); ctx.lineTo(touches[i].pageX, touches[i].pageY); ctx.closePath(); ctx.stroke(); ongoingTouches.splice(idx, 1, touches[i]); // swap in the new touch record &#125;&#125; 这里同样遍历了所有被改变的触摸点,但为了决定每次新触摸要绘制的线段的起点，它也查询了我们先前缓存的触摸信息数组。这是通过查找每个触摸的 Touch.identifier 属性来做到的.这个属性是个整数，每次触摸都不同，在触摸事件期间手指一直接触表面，这个属性保持不变。 这样我们就可以拿到先前每个触摸的坐标点，之后以适当的上下文方法将两点连接起来，并绘制线段。 当这条线绘制完毕后我们调用 Array.splice(),把ongoingTouches数组中之前的触摸点信息用现在的信息来代替. 对触摸行为的结束进行处理当用户从触摸表面抬起手指时，touchend 事件被触发. 类似的当手指移除canvas区域外，我们会得到touchleave 事件. 我们利用相同的方式来处理这两种情况，即调用下面的handleEnd()函数.这个函数的作用是给每个已经结束的触摸绘制最后一段线段，同时把这个触摸点从进行中的触摸列表数组中移除. 12345678910111213141516171819function handleEnd(evt) &#123; evt.preventDefault(); var el = document.getElementsByTagName(&quot;canvas&quot;)[0]; var ctx = el.getContext(&quot;2d&quot;); var touches = evt.changedTouches; ctx.lineWidth = 4; for (var i=0; i&lt;touches.length; i++) &#123; var color = colorForTouch(touches[i]); var idx = ongoingTouchIndexById(touches[i].identifier); ctx.fillStyle = color; ctx.beginPath(); ctx.moveTo(ongoingTouches[i].pageX, ongoingTouches[i].pageY); ctx.lineTo(touches[i].pageX, touches[i].pageY); ongoingTouches.splice(i, 1); // remove it; we&#x27;re done &#125;&#125; 这个函数跟之前的函数很类似，唯一的区别是我们调用Array.splice()时, 在正在进行的触摸列表中，我们仅仅将一个触摸的标识移除，而不再添加这个触摸新的信息。结果就是我们停止跟踪这个触摸点。 处理取消触摸事件如果用户的手指滑出触摸区域，滑入浏览器界面时，或者触摸需要取消时，touchcancel 事件会被传递,下面的 handleCancel() 函数会被触发. 12345678function handleCancel(evt) &#123; evt.preventDefault(); var touches = evt.changedTouches; for (var i=0; i&lt;touches.length; i++) &#123; ongoingTouches.splice(i, 1); // remove it; we&#x27;re done &#125;&#125; 因为我们的目的是立刻结束触摸，所以我们直接从正在进行的触摸列表中删除，不会绘制最后一部分线段。 便捷函数这个例子使用了两个很方便的函数，有必要简单了解下这两个函数，会有助于更加清楚的理解代码剩余的部分。 为每次触摸选择一个颜色为了让每次触摸绘制的内容看起来不相同，colorForTouch()函数用来根据每一次触摸所独有的标识来取颜色 . 这个标识的范围通常是0到所有活动触摸对象的数量-1. 而基本不可能会有人用多于16根手指去使用这个demo,我们直接把这种情况转为灰色。 12345function colorForTouch(touch) &#123; var id = touch.identifier; id = id.toString(16); // make it a hex digit return &quot;#&quot; + id + id + id;&#125; 这个函数返回一个字符串，可以用在 &lt;canvas&gt; 函数中用来设置绘制颜色. 举例来说，若触摸的标识符Touch.identifier为10, 转换后的字符串为 “#aaa”. 查询正在进行的触摸行为下面的ongoingTouchIndexById() 函数通过遍历查找数组 ongoingTouches 来找到与给定标识相匹配的触摸行为，之后返回这个触摸行为在数组中的下标。 12345678910function ongoingTouchIndexById(idToFind) &#123; for (var i=0; i&lt;ongoingTouches.length; i++) &#123; var id = ongoingTouches[i].identifier; if (id == idToFind) &#123; return i; &#125; &#125; return -1; // not found&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"兼容前后端共用模块代码(摘自《深入浅出Node.js》)","slug":"兼容前后端共用模块代码","date":"2017-09-14 23:23:55","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/09/14/兼容前后端共用模块代码/","link":"","permalink":"https://i.jakeyu.top/2017/09/14/%E5%85%BC%E5%AE%B9%E5%89%8D%E5%90%8E%E7%AB%AF%E5%85%B1%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81/","excerpt":"模块的侧重点前后端JavaScript分别搁置在HTTP的两端，它们扮演的角色并不同。浏览器端的JavaScript需要经历从同一个服务器端分发到多个客户端执行，而服务器端JavaScript则是相同的代码需要多次执行。前者的瓶颈在于带宽，后者的瓶颈则在于CPU和内存等资源。前者需要通过网络加载代码，后者从磁盘中加载，两者的加载速度不在一个数量级上。","text":"模块的侧重点前后端JavaScript分别搁置在HTTP的两端，它们扮演的角色并不同。浏览器端的JavaScript需要经历从同一个服务器端分发到多个客户端执行，而服务器端JavaScript则是相同的代码需要多次执行。前者的瓶颈在于带宽，后者的瓶颈则在于CPU和内存等资源。前者需要通过网络加载代码，后者从磁盘中加载，两者的加载速度不在一个数量级上。 纵观Node的模块引入过程，几乎全都是同步的。尽管与Node强调异步的行为有些相反，但它是合理的。但是如果前端模块也采用同步的方式来引入，那将会在用户体验上造成很大的问题。UI在初始化过程中需要花费很多时间来等待脚本加载完成。 鉴于网络的原因，CommonJS为后端JavaScript制定的规范并不完全适合前端的应用场景。经过一段争执之后，AMD规范最终在前端应用场景中胜出。它的全称是Asynchronous Module Definition，即是“异步模块定义”，详见https://github.com/amdjs/amdjs-api/wiki/AMD。除此之外，还有玉伯定义的CMD规范。 AMD规范AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下： 1define(id?, dependencies?, factory); 它的模块id和依赖是可选的，与Node模块相似的地方在于factory的内容就是实际代码的内容。下面的代码定义了一个简单的模块： 1234567define(function() &#123; var exports = &#123;&#125;; exports.sayHello = function() &#123; alert(&#x27;Hello from module: &#x27; + module.id); &#125;; return exports;&#125;); 不同之处在于AMD模块需要用define来明确定义一个模块，而在Node实现中是隐式包装的，它们的目的是进行作用域隔离，仅在需要的时候被引入，避免掉过去那种通过全局变量或者全局命名空间的方式，以免变量污染和不小心被修改。另一个区别则是内容需要通过返回的方式实现导出。 CMD规范CMD规范由国内的玉伯提出，与AMD规范的主要区别在于定义模块和依赖引入的部分。AMD需要在声明模块的时候指定所有的依赖，通过形参传递依赖到模块内容中： 123define([&#x27;dep1&#x27;, &#x27;dep2&#x27;], function (dep1, dep2) &#123; return function () &#123;&#125;;&#125;); 与AMD模块规范相比，CMD模块更接近于Node对CommonJS规范的定义： 1define(factory); 在依赖部分，CMD支持动态引入，示例如下： 123define(function(require, exports, module) &#123; // The module code goes here&#125;); require、exports和module通过形参传递给模块，在需要依赖模块时，随时调用require()引入即可。 兼容多种模块规范为了让同一个模块可以运行在前后端，在写作过程中需要考虑兼容前端也实现了模块规范的环境。为了保持前后端的一致性，类库开发者需要将类库代码包装在一个闭包内。以下代码演示如何将hello()方法定义到不同的运行环境中，它能够兼容Node、AMD、CMD以及常见的浏览器环境中： 1234567891011121314151617181920;(function (name, definition) &#123; // 检测上下文环境是否为AMD或CMD var hasDefine = typeof define === &#x27;function&#x27;, // 检查上下文环境是否为Node hasExports = typeof module !== &#x27;undefined&#x27; &amp;&amp; module.exports; if (hasDefine) &#123; // AMD环境或CMD环境 define(definition); &#125; else if (hasExports) &#123; // 定义为普通Node模块 module.exports = definition(); &#125; else &#123; // 将模块的执行结果挂在window变量中，在浏览器中this指向window对象 this[name] = definition(); &#125;&#125;)(&#x27;hello&#x27;, function () &#123; var hello = function () &#123;&#125;; return hello;&#125;); 摘自《深入浅出Node.js》: 2.7 前后端共用模块","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"express处理views中HTML和ejs共存","slug":"express处理views中HTML和ejs共存","date":"2017-08-11 10:08:27","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/08/11/express处理views中HTML和ejs共存/","link":"","permalink":"https://i.jakeyu.top/2017/08/11/express%E5%A4%84%E7%90%86views%E4%B8%ADHTML%E5%92%8Cejs%E5%85%B1%E5%AD%98/","excerpt":"","text":"配置模版渲染 123app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));app.engine(&#x27;html&#x27;, require(&#x27;ejs&#x27;).renderFile)app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;); 之后可以再html文件中使用ejs语法渲染变量 123res.render(&#x27;index.html&#x27;, &#123; title: &#x27;哦&#x27; &#125;)","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/tags/Node/"}]},{"title":"mysql数据库导入导出","slug":"mysql数据库导入导出","date":"2017-07-12 10:00:44","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/07/12/mysql数据库导入导出/","link":"","permalink":"https://i.jakeyu.top/2017/07/12/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/","excerpt":"","text":"导出所有库系统命令行1mysqldump -u username -p password --all-databases &gt; all.sql 导入所有库mysql命令行1mysql&gt;source all.sql; 导出某些库系统命令行1mysqldump -u username -p password --databases db1 db2 &gt; db1db2.sql 导入某些库mysql命令行1mysql&gt;source db1db2.sql; 导入某个库系统命令行1mysql -u username -p password db1 &lt; db1.sql; mysql命令行1mysql&gt;source db1.sql; 导出某些数据表系统命令行1mysqldump -u username -p password db1 table1 table2 &gt; tb1tb2.sql 导入某些数据表系统命令行1mysql -u username -p password db1 &lt; tb1tb2.sql mysql命令行12mysql&gt;user db1;mysql&gt;source tb1tb2.sql;","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"使用Yeoman定制前端脚手架","slug":"使用Yeoman-Generators制作脚手架","date":"2017-06-28 22:41:33","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/06/28/使用Yeoman-Generators制作脚手架/","link":"","permalink":"https://i.jakeyu.top/2017/06/28/%E4%BD%BF%E7%94%A8Yeoman-Generators%E5%88%B6%E4%BD%9C%E8%84%9A%E6%89%8B%E6%9E%B6/","excerpt":"","text":"首先附上Yeoman官网：http://yeoman.io/ 我制作的前端脚手架：generator-jake-front 以及我在前端同学的分享会上的分享ppt：yeoman.key 如果想快速制作一个脚手架，并且不需要实现特别复杂的定制化，看完这篇文章足够，如果想要实现复杂的功能，需要去查看官方文档。 环境需要安装Nodejs 全局安装需要的工具 12npm install -g yonpm install -g generator-generator 初始化项目执行下面命令，执行之前并不需要自己新建文件夹，yo generator会帮助我们建好文件夹 1yo generator 项目名称自己设置，必须是以generator-开头，协议选择MIT，在设置了一系列问题之后 自动生成如下目录 1234567891011generator-test├── LICENSE├── README.md├── __tests__│ └── app.js├── generators│ └── app│ ├── index.js│ └── templates│ └── dummyfile.txt└── package.json 配置generators/app/templates/是默认存放文件的目录，把所有模版文件放在这个目录下 /generators/app/index.js是Yeoman的配置文件，定义如何生成我们的脚手架 promptingPrompts是generator与用户交互的主要方式。prompt模块由 Inquirer.js提供，你可以参考它的API，在可用的提示选项列表。 prompt方法是异步的并且返回一个 promise。在你运行下一个任务前去完成它，你需要返回 promise。 1234567891011121314151617181920module.exports = class extends Generator &#123; prompting() &#123; // Have Yeoman greet the user. this.log(yosay( &#x27;Welcome to the awe-inspiring &#x27; + chalk.red(&#x27;generator-downloads&#x27;) + &#x27; generator!&#x27; )); const prompts = [&#123; type: &#x27;confirm&#x27;, name: &#x27;someAnswer&#x27;, message: &#x27;Would you like to enable this option?&#x27;, default: true &#125;]; return this.prompt(prompts).then(props =&gt; &#123; // To access props later use this.props.someAnswer; this.props = props; &#125;); &#125;&#125;; 做一些适当的修改，实现更通用的脚手架。可以查阅API this.appname: 获取当前文件夹名称 this.user.git.name(): 获取全局git用户名 this.user.git.email(): 获取全局git邮箱 this.github.username(): 获取github用户名 定义对象中的type，管理交互方式。使用input实现控制台输入。 1234type: &#x27;input&#x27;,name: &#x27;author&#x27;,message: &#x27;author&#x27;,default: this.user.git.name() 这样便实现了让用户输入作者名称，默认为git全局配置的用户名。然后在其他配置中使用this.props.author实现获取用户输入。 writingGenerators在this.fs暴露了所有的文件的方法，这是一个实例，mem-fs editor - 确保为所有可获得的方法选择模块文件。 值得注意的是，通过this.fs暴露commit，你不应该在你的generator去调用它。Yeoman在运行循环的冲突阶段结束后，在内部调用它。 复制一个模板文件例如：./templates/index.html的文件内容是： 12345&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt; &lt;/head&gt;&lt;/html&gt; 然后，我们将使用copyTpl方法去复制作为模板的处理中的文件。copyTpl使用的是ejs 模板引擎。 123456789module.exports = class extends Generator &#123; writing() &#123; this.fs.copy( this.templatePath(&#x27;index.html&#x27;), this.destinationPath(&#x27;index.html&#x27;), &#123; title: &#x27;Templating with Yeoman&#x27; &#125; ); &#125;&#125;; 一旦generator运行成功，index.html将会包含： 12345&lt;html&gt; &lt;head&gt; &lt;title&gt;Templating with Yeoman&lt;/title&gt; &lt;/head&gt;&lt;/html&gt; json也同样适用上面的语法，配置package.json文件可以适应不同的项目。 installinstall方法设置在文件copy完成之后执行的命令，例如 123456789101112module.exports = class extends Generator &#123;install() &#123;this.installDependencies(&#123; bower: true, npm: true, yarn: false, callback: function () &#123; this.log(&#x27;Everything is ready!&#x27;); &#125; &#125;); &#125;&#125;; 测试由于我们在本地开发，并不知道用起来怎么样，所以可以使用npm link命令，相当于在全局安装了此脚手架，然后在新文件夹中执行yo，选择脚手架，便可以测试 发布generator-test/package.json中的name要在https://www.npmjs.com/没被创建过，才可以发布。 发布需要一个npm的账号，如果没有使用npm adduser创建； 如果已有账号，运行npm login登陆。 在项目根目录下，运行npm publish就可以发布了。如果更新后重新发布，注意修改根目录下的package.json文件中的版本号。 使用npm unpublish 包名命令可以撤销发布，只有在发包的24小时内才允许撤销发布的包。","author":"Jake","categories":[{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"node读写Excel","slug":"node读写Excel","date":"2017-06-18 00:57:06","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/06/18/node读写Excel/","link":"","permalink":"https://i.jakeyu.top/2017/06/18/node%E8%AF%BB%E5%86%99Excel/","excerpt":"node 有很多读写excel的模块，这里我只写我所使用的模块。 xlsx:读取excel excel-export: 导出excel","text":"node 有很多读写excel的模块，这里我只写我所使用的模块。 xlsx:读取excel excel-export: 导出excel xlsx读取excel文件库中所提及的一些概念 workbook 对象，指的是整份 Excel 文档。我们在使用 js-xlsx 读取 Excel 文档之后就会获得 workbook 对象。 worksheet 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 worksheet 对象。 cell 对象，指的就是 worksheet 中的单元格，一个单元格就是一个 cell 对象。 它们的关系如下：12345678910111213141516171819202122// workbook&#123; SheetNames: [&#x27;sheet1&#x27;, &#x27;sheet2&#x27;], Sheets: &#123; // worksheet &#x27;sheet1&#x27;: &#123; // cell &#x27;A1&#x27;: &#123; ... &#125;, // cell &#x27;A2&#x27;: &#123; ... &#125;, ... &#125;, // worksheet &#x27;sheet2&#x27;: &#123; // cell &#x27;A1&#x27;: &#123; ... &#125;, // cell &#x27;A2&#x27;: &#123; ... &#125;, ... &#125; &#125;&#125; 用法 用 XLSX.read 读取获取到的 Excel 数据，返回 workbook 用 XLSX.readFile 打开 Excel 文件，返回 workbook 用 workbook.SheetNames 获取表名 用 workbook.Sheets[xxx] 通过表名获取表格 用 worksheet[address]操作单元格 用XLSX.utils.sheet_to_json针对单个表获取表格数据转换为json格式 用XLSX.writeFile(wb, ‘output.xlsx’)生成新的 Excel 文件 读取 Excel 文件 12XLSX.read(data, read_opts) //尝试解析数据XLSX.readFile(filename, read_opts) //尝试读取文件名和解析。 获取excel中的表 1234// 获取 Excel 中所有表名var sheetNames = workbook.SheetNames; // 返回 [&#x27;sheet1&#x27;, &#x27;sheet2&#x27;,……]// 根据表名获取对应某张表var worksheet = workbook.Sheets[sheetNames[0]]; 通过 worksheet[address] 来操作表格，以 ! 开头的 key 是特殊的字段。 123456789// 获取 A1 单元格对象let a1 = worksheet[&#x27;A1&#x27;]; // 返回 &#123; v: &#x27;hello&#x27;, t: &#x27;s&#x27;, ... &#125;// 获取 A1 中的值a1.v // 返回 &#x27;hello&#x27;// 获取表的有效范围worksheet[&#x27;!ref&#x27;] // 返回 &#x27;A1:B20&#x27;worksheet[&#x27;!range&#x27;] // 返回 range 对象，&#123; s: &#123; r: 0, c: 0&#125;, e: &#123; r: 100, c: 2 &#125; &#125;// 获取合并过的单元格worksheet[&#x27;!merges&#x27;] // 返回一个包含 range 对象的列表，[ &#123;s: &#123; r: 0, c: 0 &#125;, c: &#123; r: 2, c: 1 &#125; &#125; ] 获取 Excel 文件中的表转换为json数据 1XLSX.utils.sheet_to_json(worksheet) //针对单个表，返回序列化json数据 excel-export导出excel123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051var excelPort = require(&#x27;excel-export&#x27;);var path = require(&#x27;path&#x27;)exports.write = function(req, res, next) &#123; var datas = req.datas; var conf = &#123;&#125;; var filename = &#x27;filename&#x27;; //只支持字母和数字命名 conf.cols = [&#123; caption: &#x27;学号&#x27;, type: &#x27;string&#x27;, width: 20 &#125;, &#123; caption: &#x27;姓名&#x27;, type: &#x27;string&#x27;, width: 40 &#125;, &#123; caption: &#x27;岗位&#x27;, type: &#x27;string&#x27;, width: 200 &#125;, &#123; caption: &#x27;工时(h)&#x27;, type: &#x27;string&#x27;, width: 200 &#125;]; var array = []; array = [ [13084233, Jake, 图书馆, 20], [13084233, Jake, 图书馆, 20], [13084233, Jake, 图书馆, 20], [13084233, Jake, 图书馆, 20], [13084233, Jake, 图书馆, 20] ]; conf.rows = array; var result = excelPort.execute(conf); var random = Math.floor(Math.random() * 10000 + 0); var uploadDir = path.join(__dirname, &#x27;../&#x27;, &#x27;/public/files/&#x27;) var filePath = uploadDir + filename + random + &quot;.xlsx&quot;; fs.writeFile(filePath, result, &#x27;binary&#x27;, function(err) &#123; if (err) &#123; console.log(err); &#125; &#125;);&#125;","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/tags/Node/"}]},{"title":"杂七杂八","slug":"杂七杂八","date":"2017-06-04 18:40:01","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/06/04/杂七杂八/","link":"","permalink":"https://i.jakeyu.top/2017/06/04/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/","excerpt":"","text":"分解url1234567891011121314151617// 分解URL参数function parseQueryString(url) &#123; var obj = &#123;&#125;, keyvalue = [], key = &quot;&quot;, value = &quot;&quot;; var paraString = url.substring(url.indexOf(&quot;?&quot;) + 1, url.length).split(&quot;&amp;&quot;); for (var i in paraString) &#123; keyvalue = paraString[i].split(&quot;=&quot;); key = keyvalue[0]; value = keyvalue[1]; obj[key] = value; &#125; return obj;&#125; 时间转换123456789101112131415161718192021222324252627282930313233function dateConvert(date, format) &#123; date = parseInt(date); var Udate = new Date(date); var Y = Udate.getFullYear(), M = Udate.getMonth() &lt; 10 ? &quot;0&quot; + (Udate.getMonth() + 1) : (Udate.getMonth() + 1), D = Udate.getDate() &lt; 10 ? &quot;0&quot; + Udate.getDate() : Udate.getDate(), h = Udate.getHours(), m = Udate.getMinutes(), s = Udate.getSeconds(), result; if (!format) &#123; format = &quot;Y/M/D h:m:s&quot;; &#125; if (format.indexOf(&quot;Y&quot;) &gt;= 0) &#123; format = format.replace(&quot;Y&quot;, Y); &#125; if (format.indexOf(&quot;M&quot;) &gt;= 0) &#123; format = format.replace(&quot;M&quot;, M); &#125; if (format.indexOf(&quot;D&quot;) &gt;= 0) &#123; format = format.replace(&quot;D&quot;, D); &#125; if (format.indexOf(&quot;h&quot;) &gt;= 0) &#123; format = format.replace(&quot;h&quot;, h); &#125; if (format.indexOf(&quot;m&quot;) &gt;= 0) &#123; format = format.replace(&quot;m&quot;, m); &#125; if (format.indexOf(&quot;s&quot;) &gt;= 0) &#123; format = format.replace(&quot;s&quot;, s); &#125; return format;&#125;; 返回两个日期之间的日期12345678910111213141516171819202122// Returns an array of dates between the two datesvar getDates = function(startDate, endDate) &#123; var dates = [], currentDate = startDate, addDays = function(days) &#123; var date = new Date(this.valueOf()); date.setDate(date.getDate() + days); return date; &#125;; while (currentDate &lt;= endDate) &#123; dates.push(currentDate); currentDate = addDays.call(currentDate, 1); &#125; return dates;&#125;;// Usagevar dates = getDates(new Date(2013,10,22), new Date(2013,11,25)); dates.forEach(function(date) &#123; console.log(date);&#125;); 获取某年某月的天数12345function getDaysInOneMonth(year, month)&#123; month = parseInt(month, 10); var d= new Date(year, month, 0); return d.getDate(); &#125; 身份证验证123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960function checkID(ID) &#123; if (typeof ID !== &#x27;string&#x27;) return &#x27;非法字符串&#x27;; var city = &#123; 11: &quot;北京&quot;, 12: &quot;天津&quot;, 13: &quot;河北&quot;, 14: &quot;山西&quot;, 15: &quot;内蒙古&quot;, 21: &quot;辽宁&quot;, 22: &quot;吉林&quot;, 23: &quot;黑龙江 &quot;, 31: &quot;上海&quot;, 32: &quot;江苏&quot;, 33: &quot;浙江&quot;, 34: &quot;安徽&quot;, 35: &quot;福建&quot;, 36: &quot;江西&quot;, 37: &quot;山东&quot;, 41: &quot;河南&quot;, 42: &quot;湖北 &quot;, 43: &quot;湖南&quot;, 44: &quot;广东&quot;, 45: &quot;广西&quot;, 46: &quot;海南&quot;, 50: &quot;重庆&quot;, 51: &quot;四川&quot;, 52: &quot;贵州&quot;, 53: &quot;云南&quot;, 54: &quot;西藏 &quot;, 61: &quot;陕西&quot;, 62: &quot;甘肃&quot;, 63: &quot;青海&quot;, 64: &quot;宁夏&quot;, 65: &quot;新疆&quot;, 71: &quot;台湾&quot;, 81: &quot;香港&quot;, 82: &quot;澳门&quot;, 91: &quot;国外&quot; &#125;; var birthday = ID.substr(6, 4) + &#x27;/&#x27; + Number(ID.substr(10, 2)) + &#x27;/&#x27; + Number(ID.substr(12, 2)); var d = new Date(birthday); var newBirthday = d.getFullYear() + &#x27;/&#x27; + Number(d.getMonth() + 1) + &#x27;/&#x27; + Number(d.getDate()); var currentTime = new Date().getTime(); var time = d.getTime(); var arrInt = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]; var arrCh = [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;X&#x27;, &#x27;9&#x27;, &#x27;8&#x27;, &#x27;7&#x27;, &#x27;6&#x27;, &#x27;5&#x27;, &#x27;4&#x27;, &#x27;3&#x27;, &#x27;2&#x27;]; var sum = 0, i, residue; if (!/^\\d&#123;17&#125;(\\d|x)$/i.test(ID)) return &#x27;非法身份证&#x27;; if (city[ID.substr(0, 2)] === undefined) return &quot;非法地区&quot;; if (time &gt;= currentTime || birthday !== newBirthday) return &#x27;非法生日&#x27;; for (i = 0; i &lt; 17; i++) &#123; sum += ID.substr(i, 1) * arrInt[i]; &#125; residue = arrCh[sum % 11]; if (residue !== ID.substr(17, 1)) return &#x27;非法身份证哦&#x27;; return city[ID.substr(0, 2)] + &quot;,&quot; + birthday + &quot;,&quot; + (ID.substr(16, 1) % 2 ? &quot; 男&quot; : &quot;女&quot;)&#125; 判断是移动端和IE812window.isMobile = /mobile/i.test(window.navigator.userAgent);window.isIE8 = /MSIE 8.0/i.test(window.navigator.userAgent); 移动端详细判断 1234567891011121314151617181920var isMobile = &#123; Android: function() &#123; return navigator.userAgent.match(/Android/i); &#125;, BlackBerry: function() &#123; return navigator.userAgent.match(/BlackBerry/i); &#125;, iOS: function() &#123; return navigator.userAgent.match(/iPhone|iPad|iPod/i); &#125;, Opera: function() &#123; return navigator.userAgent.match(/Opera Mini/i); &#125;, Windows: function() &#123; return navigator.userAgent.match(/IEMobile/i); &#125;, any: function() &#123; return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()); &#125; &#125; 让元素进入页面时自动显示在页面可视区域1234567function showElemView(elem) &#123; if ($(window).scrollTop() &lt; elem.offset().top - $(window).height()) &#123; $(window).scrollTop(elem.offset().top - $(window).height() + elem.outerHeight()); &#125; else &#123; // &#125;&#125;; 文本框根据输入内容自适应高度12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/** @param &#123;HTMLElement&#125; 输入框元素* @param &#123;Number&#125; 设置光标与输入框保持的距离(默认0)* @param &#123;Number&#125; 设置最大高度(可选)*/function autoTextarea(elem, extra, maxHeight) &#123; extra = extra || 0; var isFirefox = !!document.getBoxObjectFor || &#x27;mozInnerScreenX&#x27; in window, isOpera = !!window.opera &amp;&amp; !!window.opera.toString().indexOf(&#x27;Opera&#x27;), addEvent = function(type, callback) &#123; elem.addEventListener ? elem.addEventListener(type, callback, false) : elem.attachEvent(&#x27;on&#x27; + type, callback); &#125;, getStyle = elem.currentStyle ? function(name) &#123; var val = elem.currentStyle[name]; if (name === &#x27;height&#x27; &amp;&amp; val.search(/px/i) !== 1) &#123; var rect = elem.getBoundingClientRect(); return rect.bottom - rect.top - parseFloat(getStyle(&#x27;paddingTop&#x27;)) - parseFloat(getStyle(&#x27;paddingBottom&#x27;)) + &#x27;px&#x27;; &#125;; return val; &#125; : function(name) &#123; return getComputedStyle(elem, null)[name]; &#125;, minHeight = parseFloat(getStyle(&#x27;height&#x27;)); elem.style.resize = &#x27;none&#x27;; var change = function() &#123; var scrollTop, height, padding = 0, style = elem.style; if (elem._length === elem.value.length) return; elem._length = elem.value.length; if (!isFirefox &amp;&amp; !isOpera) &#123; padding = parseInt(getStyle(&#x27;paddingTop&#x27;)) + parseInt(getStyle(&#x27;paddingBottom&#x27;)); &#125;; scrollTop = document.body.scrollTop || document.documentElement.scrollTop; elem.style.height = minHeight + &#x27;px&#x27;; if (elem.scrollHeight &gt; minHeight) &#123; if (maxHeight &amp;&amp; elem.scrollHeight &gt; maxHeight) &#123; height = maxHeight - padding; style.overflowY = &#x27;auto&#x27;; &#125; else &#123; height = elem.scrollHeight - padding; style.overflowY = &#x27;hidden&#x27;; &#125;; style.height = height + extra + &#x27;px&#x27;; scrollTop += parseInt(style.height) - elem.currHeight; document.body.scrollTop = scrollTop; document.documentElement.scrollTop = scrollTop; elem.currHeight = parseInt(style.height); &#125;; &#125;; addEvent(&#x27;propertychange&#x27;, change); addEvent(&#x27;input&#x27;, change); addEvent(&#x27;focus&#x27;, change); change();&#125;; 转换日期时间格式123456789101112131415161718192021222324252627282930313233343536function dateConvert(date, format) &#123; date = parseInt(date); var Udate = new Date(date); var Y = Udate.getFullYear(), M = Udate.getMonth() &lt; 10 ? &quot;0&quot; + (Udate.getMonth() + 1) : (Udate.getMonth() + 1), D = Udate.getDate() &lt; 10 ? &quot;0&quot; + Udate.getDate() : Udate.getDate(), h = Udate.getHours(), m = Udate.getMinutes(), s = Udate.getSeconds(), result; if (!format) &#123; format = &quot;Y/M/D h:m:s&quot;; &#125; if (format.indexOf(&quot;Y&quot;) &gt;= 0) &#123; format = format.replace(&quot;Y&quot;, Y); &#125; if (format.indexOf(&quot;M&quot;) &gt;= 0) &#123; format = format.replace(&quot;M&quot;, M); &#125; if (format.indexOf(&quot;D&quot;) &gt;= 0) &#123; format = format.replace(&quot;D&quot;, D); &#125; if (format.indexOf(&quot;h&quot;) &gt;= 0) &#123; format = format.replace(&quot;h&quot;, h); &#125; if (format.indexOf(&quot;m&quot;) &gt;= 0) &#123; format = format.replace(&quot;m&quot;, m); &#125; if (format.indexOf(&quot;s&quot;) &gt;= 0) &#123; format = format.replace(&quot;s&quot;, s); &#125; return format;&#125;; 产生介于两个数之间的随机数取整数取整数，并且包含最小值和最大值 12345function randomNum(minNum,maxNum) &#123; var nums = maxNum - minNum; var num = Math.floor(Math.random() * nums + minNum); return num;&#125; 任意值取两书之间任意值，不包含最小值和最大值 12345function randomNum(minNum,maxNum) &#123; var nums = maxNum - minNum; var num = Math.random() * nums + minNum; return num;&#125; 保留指定小数位数保留digits位小数 12345function randomNum(minNum,maxNum,digits) &#123; var nums = maxNum - minNum; var num = Math.floor(Math.random() * nums + minNum).toFixed(digits); return num;&#125; js下载文件123456function download() &#123; var $form = $(&#x27;&lt;form method=&quot;GET&quot;&gt;&lt;/form&gt;&#x27;); $form.attr(&#x27;action&#x27;, &#x27;/download/papers/1&#x27;); $form.appendTo($(&#x27;body&#x27;)); $form.submit();&#125; iframe 获取内部元素123456789101112131415161718&lt;iframe class=&quot;viewbord&quot; src=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;iframe class=&quot;music&quot; src=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;script&gt; var bord = document.getElementsByClassName(&#x27;viewbord&#x27;)[0]; bord.style.height = document.body.clientHeight + &#x27;px&#x27;; bord.style.width = document.body.clientWidth + &#x27;px&#x27;; bord.addEventListener(&#x27;load&#x27;, function() &#123; document.title = document.getElementsByClassName(&#x27;viewbord&#x27;)[0].contentWindow.document.title; var simUrl = document.getElementsByClassName(&#x27;viewbord&#x27;)[0].contentWindow.document.getElementsByClassName(&#x27;chris-txt-box&#x27;)[0] if (simUrl) &#123; simUrl.onclick = function(e) &#123; window.location.href = simUrl.getAttribute(&#x27;href&#x27;) &#125; &#125; &#125;);&lt;/script&gt; IE8 input不支持placeholder处理办法1&lt;input type=&quot;text&quot; onblur=&quot;if (this.value == &#x27;&#x27;) &#123;this.value = &#x27;省份&#x27;;&#125;&quot; onfocus=&quot;if (this.value == &#x27;省份&#x27;) &#123;this.value = &#x27;&#x27;;&#125;&quot; value=&quot;省份&quot; &gt; 深拷贝123456789101112131415161718//利用递归来实现深拷贝，如果对象属性的值是引用类型（Array,Object），那么对该属性进行深拷贝，直到遍历到属性的值是基本类型为止。 function deepClone(obj) &#123; if(!obj || typeof obj!== &#x27;object&#x27;) &#123; return; &#125; var newObj= obj.constructor === Array ? [] : &#123;&#125;; for(var key in obj)&#123; if(obj.hasOwnProperty(key)) &#123; if(obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123; //递归 newObj[key] = deepClone(obj[key]); &#125;else &#123; newObj[key] = obj[key]; &#125; &#125; &#125; return newObj;&#125; webpack兼容IE812345678910111213141516new webpack.optimize.UglifyJsPlugin(&#123; mangle: &#123; // mangle options, if any &#125;, mangleProperties: &#123; screw_ie8: false, //ignore_quoted: true, // do not mangle quoted properties and object keys &#125;, compress: &#123; screw_ie8: false, //properties: false // optional: don&#x27;t convert foo[&quot;bar&quot;] to foo.bar &#125;, output: &#123; screw_ie8: false &#125;&#125;) H5播放音乐控制1234&lt;audio id=&quot;bgMusic&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot;&gt; &lt;source src=&quot;Venice_Beach.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;/audio&gt;&lt;img class=&quot;bgMusicControl rotate play&quot; src=&quot;//img.dxycdn.com/biz/topic_files/biz/invitation/dist/images/music.png&quot;&gt; 1234567891011121314151617.bgMusicControl &#123; @keyframes rotate &#123; from &#123;&#125; to &#123; transform: rotate(360deg); &#125; &#125; width: .5rem; border-radius: 100%; position: absolute; right: .3rem; top: .2rem; z-index: 1000; &amp;.rotate &#123; animation: rotate 5s linear infinite; &#125;&#125; 自动播放123456var audio = document.getElementById(&quot;bgMusic&quot;);audio.play();// 兼容微信document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function() &#123; audio.play();&#125;, false); 播放、暂停控制123456789101112$(&#x27;.bgMusicControl&#x27;).click(function() &#123; var _ = $(this) if (_.hasClass(&#x27;play&#x27;)) &#123; audio.pause(); _.removeClass(&#x27;play&#x27;).addClass(&#x27;pause&#x27;) _.removeClass(&#x27;rotate&#x27;) &#125; else &#123; audio.play(); _.removeClass(&#x27;pause&#x27;).addClass(&#x27;play&#x27;) _.addClass(&#x27;rotate&#x27;) &#125;&#125;) .gitignore规则不生效解决办法原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交 123git rm -r --cached .git add .git commit -m &#x27;update .gitignore&#x27; 判断是否是iPhoneX1var isIphoneX = /iphone/gi.test(navigator.userAgent) &amp;&amp; (screen.height == 812 &amp;&amp; screen.width == 375) 123@media (device-width: 375px) and (device-height: 812px) and (-webkit-min-device-pixel-ratio : 3) &#123;&#125; 微信点击触发颜色块1-webkit-tap-highlight-color:rgba(0,0,0,0) sleep函数1234567891011async function test() &#123; console.log(&#x27;Hello&#x27;) await sleep(1000) console.log(&#x27;world!&#x27;)&#125;function sleep(ms) &#123; return new Promise(resolve =&gt; setTimeout(resolve, ms))&#125;test() 斐波那契数列第N项循环1234567891011function fibonacci (n) &#123; let n1 = 1 let n2 = 1 let sum = 1 for (let i = 3; i &lt;= n; i++) &#123; sum = n1 + n2 n1 = n2 n2 = sum &#125; return sum&#125; 递归1234567var fibonacci = function (n)&#123; if(n&lt;=2)&#123; return 1; &#125; return fibonacci(n-1) + fibonacci(n-2); &#125;console.log(fibonacci(5)); memoization方案进行优化memoization方案在《JavaScript模式》和《JavaScript设计模式》都有提到。memoization是一种将函数执行结果用变量缓存起来的方法。当函数进行计算之前，先看缓存对象中是否有次计算结果，如果有，就直接从缓存对象中获取结果；如果没有，就进行计算，并将结果保存到缓存对象中。 1234567891011121314let fibonacci = (function () &#123; let memory = &#123;&#125; return function (n) &#123; if (memory[n] !== undefined) &#123; return memory[n] &#125; if (n &lt;= 2) &#123; memory[n] = 1 &#125; else &#123; memory[n] = fibonacci(n - 1) + fibonacci(n - 2) &#125; return memory[n] &#125;&#125;)() ES61234567891011const fibonacci = (n) =&gt; &#123; let a = 0 let b = 1 let i = 1 while (i++ &lt;= n) &#123; [a, b] = [b, a + b] &#125; return a&#125;console.log(fibonacci(6)) postMessage使iframe高度自适应parent1234window.addEventListener(&#x27;message&#x27;,function(e)&#123; var height = e.data; $(&#x27;&#x27;).css(&quot;height&quot;, height);&#125;, false); child12var height = $(document.body).height();window.parent.postMessage(height, &quot;*&quot;); getScript12345678910111213141516171819const getScript = (url, callback) =&gt; &#123; var script = document.createElement(&#x27;script&#x27;) if (typeof (callback) !== &#x27;undefined&#x27;) &#123; if (script.readyState) &#123; script.onreadystatechange = function () &#123; if (script.readyState === &#x27;loaded&#x27; || script.readyState === &#x27;complete&#x27;) &#123; script.onreadystatechange = null callback() &#125; &#125; &#125; else &#123; script.onload = function () &#123; callback() &#125; &#125; &#125; script.src = url document.body.appendChild(script)&#125; 柯里化实现： 1var a = add(2)(3)(4); //9 方法一12345678910111213function add () &#123; let args = [...arguments] let fn = function () &#123; let args1 = [...arguments] return add.apply(null, args.concat(args1)) &#125; fn.toString = fn.valueOf = function () &#123; return args.reduce((res, item) =&gt; res + item) &#125; return fn&#125; 方法二123456789101112function add () &#123; let res = [...arguments][0] let fn = function () &#123; res += [...arguments][0] return fn &#125; fn.toString = fn.valueOf = function () &#123; return res &#125; return fn&#125; 进制转换123456//十进制转其他var x=110;console.log(x);console.log(x.toString(8));console.log(x.toString(32));console.log(x.toString(16)); 12345//其他转十进制var x=&#x27;110&#x27;;console.log(parseInt(x,2));console.log(parseInt(x,8));console.log(parseInt(x,16)); 12//其他转其他//先用parseInt转成十进制再用toString转到目标进制 下载文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546export const getBlob = (url: string) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; const xhr = new XMLHttpRequest() xhr.onload = function() &#123; if (xhr.status === 200) &#123; resolve(xhr.response) &#125; else &#123; reject(&#x27;发生错误&#x27;) &#125; &#125; xhr.onerror = function() &#123; reject(&#x27;发生错误&#x27;) &#125; xhr.open(&#x27;GET&#x27;, url) xhr.responseType = &#x27;blob&#x27; xhr.send() &#125;)&#125;export const saveAs = (blob, filename) =&gt; &#123; const link = document.createElement(&#x27;a&#x27;) const body = document.querySelector(&#x27;body&#x27;) link.href = window.URL.createObjectURL(blob) link.download = filename // fix Firefox link.style.display = &#x27;none&#x27; body &amp;&amp; body.appendChild(link) link.click() body &amp;&amp; body.removeChild(link) window.URL.revokeObjectURL(link.href)&#125;getBlob( // 浏览器有缓存的情况下会导致下载失败，所以需要添加时间戳 args.add(imgUrl, &#123; time: Date.now(), &#125;)) .then((blob) =&gt; &#123; const fileName = `filename.png`; saveAs(blob, fileName); &#125;)","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"linux服务器创建swap[译]","slug":"linux服务器创建swap","date":"2017-04-04 23:58:19","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/04/04/linux服务器创建swap/","link":"","permalink":"https://i.jakeyu.top/2017/04/04/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BAswap/","excerpt":"原文：Add Memory Swap - Ubuntu or Debian 7翻译：Jake 如果你想提高你的服务器的性能,增加交换空间(内存交换)是一个强大的和相对简单的开始。","text":"原文：Add Memory Swap - Ubuntu or Debian 7翻译：Jake 如果你想提高你的服务器的性能,增加交换空间(内存交换)是一个强大的和相对简单的开始。 swap介绍一旦内存快满的时候,交换空间是一个专用的服务器可以在其内存转储的内容的硬盘。要理解的真正好处,您需要熟悉处理器架构,但这里有一个简要的说明: RAM处理器快速提供数据,这使得它非常有价值。 一旦你的内存满是它需要删除或移动数据。 删除内存的数据意味着它必须找到和检索的硬盘(缓慢)下次请求的数据。 通过将数据从内存和交换空间,而不是简单地删除它从RAM,更快找到下一次的数据请求。 从内存到交换空间移动数据消耗处理器资源,这样做实际上不断会降低应用程序的性能(这就是所谓的交换)。为了找到最优交换率,它需要调优。 最后———虽然差异是分钟,为了清楚起见,本文将指导您通过创建一个交换文件——不是一个交换分区。如果你不知道这意味着什么,别担心。 检查当前使用交换空间防止添加交换时有任何问题,首先检查你的系统没有启用已经交换空间。 找到任何交换空间驱动: sudo swapon -s 如果结果是空的,输出类似于下面的例子,你目前没有交换空间启用: Filename Type Size Used Priority 如果您的系统是否已经配置了交换,结果看起来像这个例子: Filename Type Size Used Priority /dev/sda7 partition 123450 100 -1 检查你的可用空间现在,您已经准备好创建一个交换文件,你需要找到你的服务器的硬盘空间。 检查服务器上的可用空间量: df -h 这个命令显示了硬盘上的自由空间。在接下来的例子中,你有40 GB可用。确保有足够的自由空间交换文件。取决于你的需求所需要的空间,但一般来说,相当于系统RAM的二倍。 Filesystem Size Used Avail Use% Mounted on /dev/vda 50G 10G 40G 20% / none 4.0K 0 4.0K 0% /sys/fs/cgroup udev 2.0G 12K 2.0G 1% /dev tmpfs 396M 312K 396M 1% /run none 5.0M 0 5.0M 0% /run/lock none 2.0G 0 2.0G 0% /run/shm none 100M 0 100M 0% /run/user 创建一个交换文件将交换空间添加到系统通过创建一个名为swapfile的文件在你的根目录(&#x2F;)和分配它作为交换。有两个命令,您可以使用它来创建交换文件: fallocate dd 你只需要使用其中的一个。我们建议使用fallocate,但如果它不支持的文件系统上,您可以使用dd。 你可以获得更多的文件空间使用fallocate,fallocate 是一个用于操作文件空间的命令。fallocate命令创建了一个预先分配大小并且没有初始化的文件,与dd命令相比,它需要更长的时间,因为它必须写入0作为虚拟内容。 使用fallocate创建一个交换文件创建用于交换的文件。对于这个示例,我们添加一个4 GB的文件: sudo fallocate -l 4G /swapfile 确认正确的数量的空间被保留: ls -lh /swapfile 这个结果表明,添加文件是使用正确的留出的空间量: -rw------- 1 root root 4.0G Jul 08 10:52 /swapfile 如果你得到一个失败消息说fallocate失败:操作不支持,您的文件系统目前不支持fallocate(例如,ext3)。使用更传统的方式使用dd命令。(这种情况应该很少)。 使用dd创建一个交换文件在这个例子中,我们将添加一个不同大小的交换文件,1 GB,为了适应小型服务器。 添加1 GB交换文件,通过指定一个块大小250MB并且数量为4。 记得要仔细检查你的指令!这个命令有可能破坏数据如果(输出文件)指出错误的位置。 sudo dd if=/dev/zero of=/swapfile bs=250M count=4 几秒钟后,生成的输出是这样的: 4+0 records in 4+0 records out 1048576000 bytes (1.0 GB) copied, 1.47414 s, 711 MB/s 验证文件在服务器上创建: ls -lh /swapfile 如果文件被创建,命令返回类似于: -rw-r--r-- 1 root root 1.0G Jul 08 10:30 swapfile 使交换文件现在创建的文件,格式互换,然后启用它。 锁定交换文件的权限,因此只有root用户可以访问它: sudo chmod 600 /swapfile 当第一次创建时,交换文件是可读的,所以锁权限可以防止用户阅读潜在的敏感信息。 确认文件正确的权限: ls -lh /swapfile 这个命令返回类似于: -rw------- 1 root root 4.0G Jul 08 10:40 /swapfile 这证实了,只有root用户启用了读写权限。 格式文件创建一个交换空间: sudo mkswap /swapfile 如果成功,该命令会返回类似这样: Setting up swapspace version 1, size = 4194300 KiB no label, UUID=e2f1e9cf-c0a9-4ed4-b8ab-714b8a7d6944 挂载&#x2F;启用系统中的交换空间: sudo swapon /swapfile 验证交换空间是通过检查系统报告: sudo swapon -s 这个命令返回类似于: Filename Type Size Used Priority swapfile file 4194300 0 -1 使交换文件永久生效最后一步是将交换文件集成到您的系统的存储分区,通过fstab 。 打开fstab sudo vim /etc/fstab 在fstab文件最后,添加这一行告诉系统自动使用新创建的交换空间: /swapfile none swap sw 0 0 保存并关闭该文件: :wq! 在下次重新启动后,自动交换使用 调整交换文件现在您已经创建了交换文件,你应该进行调优,以确保它给你最佳性能。这不是你可以轻松地一口气就完成的工作，而是你会定期的作为管理员工作。 优化你的交换文件意味着修补的设置,使其执行交换(也就是说,将内容从RAM交换): 虚拟运存控制 缓存压力调优是很重要的,因为一个配置不佳的交换文件会损害应用程序的性能。系统的RAM和交换空间之间的相互作用是时间密集的（在计算规模上），并且尝试交换频率太高（即交换冲突）可能需要更多的时间，而不仅仅是从硬盘中恢复数据。 虚拟运存控制Swappiness只是设置控制频率使用交换文件。 一个0到100之间的比例,swappiness值: 0意味着避免交换过程的物理内存,直到绝对必要的(内存耗尽) 100意味着积极(立刻)移动交换过程的物理内存和交换缓存 你可以改变你的服务器的swapiness在sysctl.conf文件中。 打开/etc/sysctl.conf: sudo vim /etc/sysctl.conf 在文件的最后一行添加: vm.swappiness=10 保存并且退出: :wq! 来优化您的应用程序中,您可以测试更改swappiness值(0到100之间)和运行性能测试。 缓存压力另一个设置是vfs_cache_pressure。 当VFS（虚拟文件系统）缓存对象（称为dentry和inode_cache对象）占用更大量的内存而不是其他数据（如页面缓存和交换）时，更改此设置可能会有所帮助。 因为VFS缓存访问有关文件系统的数据，所以经常被请求并且非常耗资源。 因此，它是您的系统缓存的主要设置。 vfs_cache_pressure的值越高，您的服务器越有可能使用其交换。 你可以改变你的服务器的缓存压力在sysctl.conf。 打开/etc/sysctl.conf: sudo vim /etc/sysctl.conf 在文件最后一行添加: vm.vfs_cache_pressure = 50 保存并关闭文件: :wq! 像swappiness,你可以提高性能通过测试不同的值。 启用交换空间使用以下三个命令检查您的工作： swapon -s命令：sudo swapon -s 输出可能如下所示： Filename Type Size Used Priority /swapfile file 4194300 0 -1 您会看到添加了4 G的交换文件。 有关更详细的报告：free -m 关于交换详细信息的报告：cat /proc/meminfo | grep -i swap 结论交换可以有利于允许您的系统利用比原来可用的更多的内存。 在优化应用程序配置，添加更多RAM或升级服务器之前，这是一个可行的选择。 但是，请务必记住定期调整交换文件，以确保您最充分地使用它。","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"XSS攻击与预防","slug":"XSS攻击与预防","date":"2017-03-31 21:59:15","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/03/31/XSS攻击与预防/","link":"","permalink":"https://i.jakeyu.top/2017/03/31/XSS%E6%94%BB%E5%87%BB%E4%B8%8E%E9%A2%84%E9%98%B2/","excerpt":"","text":"Web安全之模拟XSS攻击跨站脚本（XSS, Cross Site Script）攻击指的是，攻击者可以让某网站执行一段非法脚本。这种情况很常见，比如提交一个表单用于修改用户名，我们可以在文本框中输入一些特殊字符，比如&lt;,&gt;,&#39;,&quot;等，检查一下用户名是否正确修改了。 XSS的攻击方式 反射型 发出请求是,XSS代码出现在URL中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随着响应内容一起传回浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,故叫做反射型XSS。 存储型 存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面是不用再提交XSS代码。 XSS一定是由用户的输入引起的，无论是提交表单、还是点击链接（参数）的方式，只要是对用户的输入不做任何转义就写到数据库，或者写到html，js中，就很有可能出错。 从一个请求发出开始，到浏览器显示内容，与XSS相关的有三个地方URL、HTML、JavaScript。至于后台方面，它分两个功能，一个是将数据写到数据库，这时候也要对数据进行转义，但不是XSS的范畴，它更多是防止数据破坏SQL语句的结构；另一个是从数据库读取数据，直接生成HTML或者以JSON的方式传给前端，这些数据都必须转义后才能显示到浏览器中。 HTML字符HTML本身是一个文本文档，但在浏览器中却可以显现得花样百出，是因为很多字符对于浏览器来说是有特殊含义的，比如在&lt;script&gt;中的内容，浏览器会做一些动画等等。那么对这些特殊字符进行转义，就意味着让浏览器对待它们的时候，就像普通字符一样，比如&amp;lg;script&amp;gt;这段文字在浏览器中就会正常显示为&lt;script&gt;。 简单的用来转义HTML的JavaScript方法12345678function encodeHTML (a) &#123; return String(a) .replace(/&amp;/g, &quot;&amp;amp;&quot;) .replace(/&lt;/g, &quot;&amp;lt;&quot;) .replace(/&gt;/g, &quot;&amp;gt;&quot;) .replace(/&quot;/g, &quot;&amp;quot;&quot;) .replace(/&#x27;/g, &quot;&amp;#39;&quot;);&#125;; 那么有哪些字符需要转义呢？这里列了一些常见的。 &quot; --&gt; &amp;#34;# --&gt; &amp;#35;$ --&gt; &amp;#36;&amp; --&gt; &amp;#38;&#39; --&gt; &amp;#39;( --&gt; &amp;#40;) --&gt; &amp;#41;; --&gt; &amp;#59;&lt; --&gt; &amp;#60;&gt; --&gt; &amp;#62; 在 escapeHTML 方法中，我使用了别名的方式转义，因为它比较容易记一点。无论是别名还是十六进制，它们表示的含义都是一样的，比如&amp;amp;和&amp;#38;都表示&amp;符号。想要看更具体的列表可以参考这个网站 在浏览器收到 HTML 之后，首先会对所有的内容进行解码，它会把所有能识别的编码符号，解码成字面值。比如有 1&lt;p&gt;my name is&amp;#58;&amp;#32;&lt;a href=&quot;https&amp;#58;&amp;#47;&amp;#47;i.jakeyu.top&quot;&gt;名一&lt;/a&gt;&lt;/p&gt; 经过浏览器解码就变成 1&lt;p&gt;my name is: &lt;a href=&quot;https://i.jakeyu.top&quot;&gt;名一&lt;/a&gt;&lt;/p&gt; 这里要说的是，浏览器只会对两个地方解码，一个是标签的内容（即textContent，除了&lt;script&gt;和&lt;style&gt;标签），另一个是标签的属性值。对于属性名是不会解码的。 URL早些时候，服务端还不支持在URL中直接传输Unicode，比如https://i.jakeyu.top/search?q=你好这样的地址，服务端无法识别“你好”这个值，所以必须编码之后进行传输。 那么对于 URL，我们只需要对参数的值进行编码就可以了。比如上面这个链接，编码之后就是https://i.jakeyu.top/find?q=%E4%BD%A0%E5%A5%BD。 如果对整个 URL 编码，那么链接就无效了。 编码的方式很简单，浏览器提供了全局的encodeURI方法，调用之后就可以实现转义了。 有一点很重要encodeURI是不会转义:,/,?,&amp;,=这些在URL中有特殊含义的字符的，那么如果有个参数正好包含了这些字符，就不会转义，比如 123encodeURI(&#x27;https://i.jakeyu.top/login?name=名一&amp;from=http://other.com&#x27;);// -&gt; https://i.jakeyu.top/login?name=%E5%90%8D%E4%B8%80&amp;from=http://other.com from 参数的值并没有转义，这时候，就需要用到另一个方法encodeURIComponent 1234var param = encodeURIComponent(&#x27;http://other.com&#x27;);encodeURI(&#x27;https://i.jakeyu.top/login?name=名一&amp;from=&#x27;) + param;// -&gt; https://i.jakeyu.top/login?name=%E5%90%8D%E4%B8%80&amp;from=http%3A%2F%2Fother.com 所以结论就是，如果要对整个 URL 进行转义，使用 encodeURI，如果对参数的值进行转义，使用 encodeURIComponent。 当动态生成的链接地址需要赋值给href或者src属性时，需要对这些地址进行URL转义。当然，如果服务端支持在URL中包含UTF-8的字符的话，其实不转义也不会错，这就是为什么我们平时不会太注意对表单和URL参数进行转义的原因，因为服务端表现良好。 JavaScript 特殊字符JS 中的转义都是通过反斜杠完成，有三种类型，以&#39;和&quot;为例 直接反斜杠 –&gt; &#39;&quot; 十六进制 –&gt; \\x22\\x27 Unicode –&gt; \\u0022\\u0027 一般情况下可以直接通过反斜杠转义，但有些字符我们不知道怎么输入，很常见的比如 Web Font，在 CSS 中可以看到类似这样的代码 123.glyphicon-home::before &#123; content: &quot;&quot;;&#125; 那个 content 中的值可以通过十六进制或者 Unicode 的方式来代替。 JS 转义一般用于显示用户输入的时候，比如用户输入了反斜杠，需要显示时，就必须alert(&#39;\\\\&#39;);。 解码顺序当浏览器进行绘制时，首先会对 HTML 进行解码，然后是 URL，最后是执行 JS 时对它进行解码。 现在考虑这三种编码同时存在的情况 1&lt;a href=&quot;javascript&amp;#58;&amp;#32;alert(&#x27;\\&lt;https&amp;#58;&amp;#47;&amp;#47;i.jakeyu.top/find?q=%E4%BD%A0%E5%A5%BD\\&gt;&#x27;);&quot;&gt;click&lt;/a&gt; 首先是HTML解码，结果为 1&lt;a href=&quot;javascript: alert(&#x27;\\&lt;https://i.jakeyu.top/find?q=%E4%BD%A0%E5%A5%BD\\&gt;&#x27;);&quot;&gt;click&lt;/a&gt; 然后是URL解码，结果为 1&lt;a href=&quot;javascript: alert(&#x27;\\&lt;https://i.jakeyu.top/find?q=你好\\&gt;&#x27;);&quot;&gt;click&lt;/a&gt; 最后是JS解码，结果为 1&lt;a href=&quot;javascript: alert(&#x27;&lt;https://i.jakeyu.top/find?q=你好&gt;&#x27;);&quot;&gt;click&lt;/a&gt; 单击链接后，应该会出现一个弹窗，内容是&lt;https://i.jakeyu.top/find?q=你好&gt;。 本文更多的是介绍如何防止XSS的发生，而不是它的危害。核心就是用适当的方法对 HTML, JS 进行转义。 来自[Web 安全]了解XSS与防范","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"方案","slug":"方案","permalink":"https://i.jakeyu.top/tags/%E6%96%B9%E6%A1%88/"}]},{"title":"mongoose中使用populate处理嵌套","slug":"mongoose中使用populate处理嵌套","date":"2017-03-21 14:03:01","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/03/21/mongoose中使用populate处理嵌套/","link":"","permalink":"https://i.jakeyu.top/2017/03/21/mongoose%E4%B8%AD%E4%BD%BF%E7%94%A8populate%E5%A4%84%E7%90%86%E5%B5%8C%E5%A5%97/","excerpt":"nodejs在使用mongdb数据库中经常会使用到嵌套，比如一个多级分类等。这里我使用学校--&gt;学院--&gt;学生来展示使用populate处理嵌套。","text":"nodejs在使用mongdb数据库中经常会使用到嵌套，比如一个多级分类等。这里我使用学校--&gt;学院--&gt;学生来展示使用populate处理嵌套。 定义modal在模式中，我们需要使用Schema.ObjectId来表示要指向数据在mongodb数据库中的_id。 学校在学校的Schema中，colleges属性是要包含的学院的_id属性数组。 12345678910111213var SchoolSchema = new Schema(&#123; name: String, colleges: [&#123; type: Schema.ObjectId, ref: &#x27;College&#x27; &#125;], createTime: &#123; type: Date, default: Date.now() &#125;&#125;);var School = mongoose.model(&#x27;School&#x27;, SchoolSchema); 学院12345678910111213var CollegeSchema = new Schema(&#123; name: String, students: [&#123; type: Schema.ObjectId, ref: &#x27;Student&#x27; &#125;], createTime: &#123; type: Date, default: Date.now() &#125;&#125;);var College = mongoose.model(&#x27;College&#x27;, CollegeSchema); 学生1234567891011var StudentSchema = new Schema(&#123; name: String, sex: String, age: Number, createTime: &#123; type: Date, default: Date.now() &#125;&#125;);var Student = mongoose.model(&#x27;Student&#x27;, StudentSchema); 查找直接查找查找学校并找到指向的学院 123456789School .find() .populate(&#x27;colleges&#x27;, [&#x27;_id&#x27;,&#x27;name&#x27;]) .exec((err, schools) =&gt; &#123; if (err) &#123; console.log(err) &#125; console.log(schools) &#125;) populate的第一个参数是学校表中需要指向学院表的属性，即colleges；第二个参数为要在学院中查找的属性。如果不填写第二个参数，则默认全都查出。 这样查找出的结果中，学院的学生属性是该学院包含的学生的_id属性。如果需要都查找出来需要使用嵌套populate。 嵌套12345678910111213141516171819School .find() .populate(&#123; path: &#x27;colleges&#x27;, select: [&#x27;_id&#x27;, &#x27;name&#x27;], // model: &#x27;College&#x27;, populate: &#123; path: &#x27;students&#x27;, select: [&#x27;_id&#x27;, &#x27;name&#x27;] // model: &#x27;Student&#x27; &#125; &#125;) .sort(&#123; createTime: -1 &#125;).exec(function(err, schools) &#123; if (err) &#123; console.log(err) &#125; &#125;);","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"mongoose","slug":"mongoose","permalink":"https://i.jakeyu.top/tags/mongoose/"}]},{"title":"centos使用SS翻墙","slug":"centos使用SS翻墙","date":"2017-03-16 21:40:46","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/03/16/centos使用SS翻墙/","link":"","permalink":"https://i.jakeyu.top/2017/03/16/centos%E4%BD%BF%E7%94%A8SS%E7%BF%BB%E5%A2%99/","excerpt":"","text":"梯子服务商推荐 V2Club，支持全平台，安全、稳定。 socks5 全局代理安装 sslocal123pip install shadowsocks # pip安装ss客户端如果提示 -bash: pip: command not found运行 yum -y install python-pip shadowsocks.json1234567891011121314vim /etc/shadowsocks.json--- shadowsocks.json ---&#123; &quot;server&quot;:&quot;SERVER-IP&quot;, # 你的服务器ip &quot;server_port&quot;:PORT, # 服务器端口 &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;PASSWORD&quot;, # 密码 &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-128-cfb&quot;, # 加密方式 &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125;--- shadowsocks.json --- 运行 sslocal1nohup sslocal -c /etc/shadowsocks.json &amp;&gt;&gt; /var/log/sslocal.log &amp; privoxy篇安装 privoxy1yum -y install privoxy 配置 socks5 全局代理1echo &#x27;forward-socks5 / 127.0.0.1:1080 .&#x27; &gt;&gt; /etc/privoxy/config 设置 http&#x2F;https 代理12export http_proxy=http://127.0.0.1:8118 # privoxy默认监听端口为8118export https_proxy=http://127.0.0.1:8118 运行 privoxyservice privoxy start 测试 socks5 全局代理12345678910curl www.google.com## 如果出现下面这段输出则代理成功！------------------------------------------------------------------------------&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;302 Moved&lt;/H1&gt;The document has moved&lt;A HREF=&quot;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/%3Fgws_rd%3Dcr&amp;amp;ust=1480320257875871&amp;amp;usg=AFQjCNHg9F5zMg83aD2KKHHHf-yecq0nfQ&quot;&gt;here&lt;/A&gt;.&lt;/BODY&gt;&lt;/HTML&gt;------------------------------------------------------------------------------ 简化使用进过上面的步骤我们的确代理成功了。。但是每次都要输入这么多命令太麻烦这时我们可以利用 命令别名 来简化我们的操作 123alias ssinit=&#x27;nohup sslocal -c /etc/shadowsocks.json &amp;&gt;&gt; /var/log/sslocal.log &amp;&#x27;alias sson=&#x27;export http_proxy=http://127.0.0.1:8118 &amp;&amp; export https_proxy=http://127.0.0.1:8118 &amp;&amp; systemctl start privoxy&#x27;alias ssoff=&#x27;unset http_proxy &amp;&amp; unset https_proxy &amp;&amp; systemctl stop privoxy &amp;&amp; pkill sslocal&#x27; 使用方法### 开启ss代理 ssinit sson ## 关闭ss代理 ssoff 推荐 订阅 ChatGPT Plus使用 Depay 和欧易 (OKX) 订阅 ChatGPT Plus 注册ChatGPT注册ChatGPT","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"异步编程之async","slug":"async","date":"2017-03-15 13:49:05","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/03/15/async/","link":"","permalink":"https://i.jakeyu.top/2017/03/15/async/","excerpt":"","text":"async官方DOC 介绍node安装npm install async --save 使用 var async = require(&#39;async&#39;) js文件https://github.com/caolan/async/tree/master/dist async提供了很多函数用于异步流程控制，下面是async核心的几个函数，完整的函数请看async官方DOC 1234567891011121314151617181920212223async.map([&#x27;file1&#x27;,&#x27;file2&#x27;,&#x27;file3&#x27;], fs.stat, function(err, results) &#123; // results is now an array of stats for each file&#125;);async.filter([&#x27;file1&#x27;,&#x27;file2&#x27;,&#x27;file3&#x27;], function(filePath, callback) &#123; fs.access(filePath, function(err) &#123; callback(null, !err) &#125;);&#125;, function(err, results) &#123; // results now equals an array of the existing files&#125;);async.parallel([ function(callback) &#123; ... &#125;, function(callback) &#123; ... &#125;], function(err, results) &#123; // optional callback&#125;);async.series([ function(callback) &#123; ... &#125;, function(callback) &#123; ... &#125;]); series串行series的作用就是按照顺序一次执行。 123456789101112async.series([ function(callback) &#123; setTimeout(function() &#123; callback(null, 1) &#125;, 2000); &#125;, function(callback) &#123; callback(null, 2); &#125;], function(err, results) &#123; console.log(results); &#125;); 输出结果为 [ 1, 2 ] series函数的第一个参数可以是一个数组也可以是一个JSON对象，参数类型不同，影响的是返回数据的格式。 12345678910async.series(&#123; one: function(callback)&#123; callback(null, 1); &#125;, two: function(callback)&#123; callback(null, 2); &#125;&#125;,function(err, results) &#123; console.log(results);&#125;); 输出为 &#123;one: 1, two: 2&#125; waterfall瀑布流waterfall和series函数都是按照顺序执行，不同之处是waterfall每个函数产生的值都可以传递给下一个函数，series不可以。 123456789101112131415161718192021async.waterfall([ function(callback) &#123; callback(null, &#x27;one&#x27;, &#x27;two&#x27;); &#125;, function(arg1, arg2, callback) &#123; // arg1 now equals &#x27;one&#x27; and arg2 now equals &#x27;two&#x27; console.log(&#x27;function 2&#x27;) console.log(&#x27;arg1: &#x27; + arg1) console.log(&#x27;arg2: &#x27; + arg2) callback(null, &#x27;three&#x27;); &#125;, function(arg1, callback) &#123; console.log(&#x27;function 3&#x27;) console.log(&#x27;arg1: &#x27; + arg1) // arg1 now equals &#x27;three&#x27; callback(null, &#x27;done&#x27;); &#125;], function(err, result) &#123; // result now equals &#x27;done&#x27; console.log(result);&#125;); 输出 123456function 2arg1: onearg2: twofunction 3arg1: threedone waterfall第一个参数只能为数组。当中途有函数出错，其err直接传给最终callback，结果被丢弃，后面的函数不再执行。 parallel(tasks, [callback])paraller函数是并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。 1234567891011async.parallel([ function(callback)&#123; callback(null, &#x27;one&#x27;); &#125;, function(callback)&#123; callback(null, &#x27;two&#x27;); &#125;],function(err, results)&#123;&#125;); tasks参数可以是一个数组或是json对象，和series函数一样，tasks参数类型不同，返回的results格式会不一样。 将示例中tasks的回调函数用setTimeout在1000毫秒后调用，然后在parallel的回调函数中输出results，看一看整个过程花费了1s还是2s。 12345678910111213141516var async=require(&quot;async&quot;);async.parallel([ function(callback)&#123; setTimeout(function()&#123; callback(null, &#x27;one&#x27;) &#125;,1000); &#125;, function(callback)&#123; setTimeout(function()&#123; callback(null, &#x27;two&#x27;) &#125;,1000); &#125;],function(err, results)&#123; console.log(results);&#125;); parallelLimit(tasks, limit, [callback])parallelLimit函数和parallel类似，但是它多了一个参数limit。 limit参数限制任务只能同时并发一定数量，而不是无限制并发，示例如下： 123456789101112async.parallelLimit([ function(callback)&#123; callback(null, &#x27;one&#x27;); &#125;, function(callback)&#123; callback(null, &#x27;two&#x27;); &#125;],2,function(err, results)&#123;&#125;); 将示例中tasks的回调函数用setTimeout在1000毫秒后调用，limit参数设置为1，然后在parallelLimit的回调函数中输出results，看一看整个过程花费了1s还是2s。 1234567891011121314151617var async=require(&quot;async&quot;);async.parallelLimit([ function(callback)&#123; setTimeout(function()&#123; callback(null, &#x27;one&#x27;); &#125;, 1000); &#125;, function(callback)&#123; setTimeout(function()&#123; callback(null, &#x27;two&#x27;); &#125;, 1000); &#125;],1,function(err, results)&#123; console.log(results);&#125;); map(coll, iteratee, callbackopt)map函数遍历传入的数组，并执行同样的操作，最终返回结果 cool:数组 iteratee:对数组每一项要执行的函数 callbackopt:回调函数 1234567async.map([1, 2, 3, 4, 5], function(item, callback) &#123; callback(null, item + 5) &#125;, function(err, result) &#123; console.log(result) &#125;) [ 6, 7, 8, 9, 10 ]","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"数组","slug":"数组","date":"2017-03-04 13:02:21","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/03/04/数组/","link":"","permalink":"https://i.jakeyu.top/2017/03/04/%E6%95%B0%E7%BB%84/","excerpt":"","text":"数组和字符串之间相互转换split()split()函数是将字符串转换为数组 12345var sentence = &#x27;the quick brown for jumped over the lazy dog&#x27;var words = sentence.split(&#x27; &#x27;)for (let i = 0; i &lt; words.length; i++) &#123; console.log(&quot;word &quot; + i + &#x27;: &#x27; + words[i])&#125; 输出 123456789word 0: theword 1: quickword 2: brownword 3: forword 4: jumpedword 5: overword 6: theword 7: lazyword 8: dog join()、toString()join() toString()两个方法可以将数组转化为字符串。这两个方法都返回一个包含数组所有元素的字符串，各元素之间默认用逗号分隔开 12345var names = [&#x27;David&#x27;, &#x27;Cynthia&#x27;, &#x27;Raymond&#x27;, &#x27;mike&#x27;]var namestr = names.join()console.log(namestr)var namestr_1 = names.toString()console.log(namestr_1) 输出 12David,Cynthia,Raymond,mikeDavid,Cynthia,Raymond,mike 如果为join()传入参数，则各元素之间使用传入的参数隔开 123var names = [&#x27;David&#x27;, &#x27;Cynthia&#x27;, &#x27;Raymond&#x27;, &#x27;mike&#x27;]var namestr = names.join(&#x27;;&#x27;)console.log(namestr) 输出 1David;Cynthia;Raymond;mike 存取函数indexOf()、lastIndexOf()indexOf()函数是最常用的存取函数之一，用来查找传进来的参数在目标数组中是否存在。如果目标数组包含该参数，就返回该元素在数组中的索引；如果不包含，就返回-1。 123var name = [&#x27;jake&#x27;, &#x27;yu&#x27;, &#x27;lao&#x27;]console.log(&#x27;yu is at: &#x27; + name.indexOf(&#x27;yu&#x27;))console.log(&#x27;aaa is at: &#x27; + name.indexOf(&#x27;aaa&#x27;)) 输出 12yu is at: 1aaa is at: -1 如果数组中包含多个相同的元素，indexOf()函数总是返回第一个与参数相同的元素的索引。lastIndexOf()函数返回相同元素的最后一个元素的索引，如果没有找到相同元素，则返回-1 findIndex()除IE以外的所有浏览器（非边缘）都支持Array.prototype.findIndex。但是Polyfill很好的解决了这个问题 1var indexOfStevie = myArray.findIndex(i =&gt; i.hello === &quot;stevie&quot;); 兼容 1234567891011121314151617181920212223242526272829303132333435363738394041424344// https://tc39.github.io/ecma262/#sec-array.prototype.findIndexif (!Array.prototype.findIndex) &#123; Object.defineProperty(Array.prototype, &#x27;findIndex&#x27;, &#123; value: function(predicate) &#123; // 1. Let O be ? ToObject(this value). if (this == null) &#123; throw new TypeError(&#x27;&quot;this&quot; is null or not defined&#x27;); &#125; var o = Object(this); // 2. Let len be ? ToLength(? Get(O, &quot;length&quot;)). var len = o.length &gt;&gt;&gt; 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception. if (typeof predicate !== &#x27;function&#x27;) &#123; throw new TypeError(&#x27;predicate must be a function&#x27;); &#125; // 4. If thisArg was supplied, let T be thisArg; else let T be undefined. var thisArg = arguments[1]; // 5. Let k be 0. var k = 0; // 6. Repeat, while k &lt; len while (k &lt; len) &#123; // a. Let Pk be ! ToString(k). // b. Let kValue be ? Get(O, Pk). // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)). // d. If testResult is true, return k. var kValue = o[k]; if (predicate.call(thisArg, kValue, k, o)) &#123; return k; &#125; // e. Increase k by 1. k++; &#125; // 7. Return -1. return -1; &#125; &#125;);&#125; 由已知数组创建新数组concat()、splice()concat()和splice()方法允许通过已有的数组创建新数组。concat()方法可以合并多个数组创建一个新数组，splice()方法截取一个数组的子集创建一个新数组。 concat()该方法的发起者是一个数组，参数是另外一个数组或者多个数组。作为参数的数组，其中的所有元素都被连接到调用concat()方法的数组后面。下面的程序展示了concat()方法的工作原理： 1234567var cisDept = [&#x27;jake&#x27;, &#x27;mike&#x27;, &#x27;jenn&#x27;]var dmpDept = [&#x27;bryan&#x27;, &#x27;cynthia&#x27;]var dmpDept_2 = [&#x27;bryan&#x27;, &#x27;cynthia&#x27;]var itDiv = cisDept.concat(dmpDept)console.log(itDiv)var itDiv = cisDept.concat(dmpDept, dmpDept_2)console.log(itDiv) 输出 12[ &#x27;jake&#x27;, &#x27;mike&#x27;, &#x27;jenn&#x27;, &#x27;bryan&#x27;, &#x27;cynthia&#x27; ][ &#x27;jake&#x27;, &#x27;mike&#x27;, &#x27;jenn&#x27;, &#x27;bryan&#x27;, &#x27;cynthia&#x27;, &#x27;bryan&#x27;, &#x27;cynthia&#x27; ] splice()splice()方法从现有数组里截取一个新数组。该方法的第一个参数是截取的起始索引，第二个参数是截取的长度。该方法会改变原来的数组。如果第二个参数传入的是0，则不删除 1234var num = [1, 2, 3, 4, 5, 6]var numSpl = num.splice(1, 3)console.log(numSpl)console.log(num) 输出 12[ 2, 3, 4 ][ 1, 5, 6 ] 添加和删除push()、unshift()push()方法会将一个元素添加到数组末尾： 123var nums = [1, 2, 3, 4, 5]nums.push(6, 7, 8)console.log(nums) 输出 1[ 1, 2, 3, 4, 5, 6, 7, 8 ] unshift()方法会将一个元素添加到数组开头 123var nums = [1, 2, 3, 4, 5]nums.unshift(6, 7, 8)console.log(nums) 输出 1[ 6, 7, 8, 1, 2, 3, 4, 5 ] pop()、shift()pop()方法可以删除数组末尾的元素，并返回该元素 1234var nums = [1, 2, 3, 4, 5]var popNum = nums.pop()console.log(nums) //[ 1, 2, 3, 4 ]console.log(popNum) //5 shift()方法可以删除数组开头的元素，并返回该元素 1234var nums = [1, 2, 3, 4, 5]var popNum = nums.shift()console.log(nums) //[ 2, 3, 4, 5 ]console.log(popNum) //1 splice()使用splice()方法为数组添加元素，需提供如下参数 起始索引 需要删除的元素个数(不删除为0) 想要添加的元素 123var nums = [1, 2, 3, 4, 5]nums.splice(3, 0, 11, 11, 11, 11, 11)console.log(nums) //[ 1, 2, 3, 11, 11, 11, 11, 11, 4, 5 ] 排序reverse()reverse()可以对数组进行翻转 123var nums = [1, 2, 3, 4, 5]nums.reverse()console.log(nums) //[ 5, 4, 3, 2, 1 ] sort()如果数组是字符串类型，那么数组的可变方法sort()就非常好使: 123var name = [&#x27;David&#x27;, &#x27;Mike&#x27;, &#x27;Cynthia&#x27;, &#x27;Clayton&#x27;]name.sort()console.log(name) //[ &#x27;Clayton&#x27;, &#x27;Cynthia&#x27;, &#x27;David&#x27;, &#x27;Mike&#x27; ] 但是如果数组元素是数字类型，sort()方法的排序结果就不能让人满意了 123var nums = [3, 1, 2, 100, 4, 200]nums.sort()console.log(nums) //[ 1, 100, 2, 200, 3, 4 ] sort()方法是按照字典顺序对元素进行排序，因此它假定元素都是字符串类型。为了让sort()方法也能排序数字类型的元素，可以在调用方法是传入一个比较大小的函数。 12345var nums = [3, 1, 2, 100, 4, 200]nums.sort((num1, num2) =&gt; &#123; return num1 - num2&#125;)console.log(nums) //[ 1, 2, 3, 4, 100, 200 ] 迭代器方法这些方法对数组中的每个元素应用一个函数，可以返回一个值、一组值或者一个新数组 forEach()该方法接受一个函数作为参数，对数组中的每个元素使用该函数。 1234var nums = [1, 2, 3, 4, 5, 6, 7, 8]nums.forEach((item, index) =&gt; &#123; console.log(item, item * item)&#125;) 输出 123456781 12 43 94 165 256 367 498 64 every()该方法接受一个返回值为布尔类型的函数，对数组中的每个元素使用该函数。如果对于所有的元素该函数返回值均为true，则该方法返回true。 12345678910111213var nums = [2, 4, 6, 8]isEven = (num) =&gt; &#123; return num % 2 == 0&#125;var even = nums.every(isEven)if (even) &#123; console.log(&#x27;even is true&#x27;)&#125; else &#123; console.log(&#x27;even is false&#x27;)&#125;//even is true 12345678910111213var nums = [1, 2, 4, 6, 8]isEven = (num) =&gt; &#123; return num % 2 == 0&#125;var even = nums.every(isEven)if (even) &#123; console.log(&#x27;even is true&#x27;)&#125; else &#123; console.log(&#x27;even is false&#x27;)&#125;//even is false some()some()方法也接受一个返回值为布尔类型的函数，只有有一个元素使得该函数返回true，该方法就返回true 12345678910111213function isEven(num) &#123; return num % 2 == 0&#125;var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]var someEven = nums.some(isEven)if (someEven) &#123; console.log(&#x27;true&#x27;)&#125; else &#123; console.log(&#x27;false&#x27;)&#125;//true reduce()reduce()方法接受一个函数，返回一个值。该方法会从一个累加值开始，不断对累加值和数组中的后续元素调用该函数，直到数组中的最后一个元素，最后返回得到的累加值。 1234567function add(runningTotal, currentValue) &#123; return runningTotal + currentValue&#125;var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]var sum = nums.reduce(add)console.log(sum) //55 123456789add(1,2) --&gt; 3add(3,3) --&gt; 6add(6,4) --&gt; 10add(10,5) --&gt; 15add(15,6) --&gt; 21add(21,7) --&gt; 28add(28,8) --&gt; 36add(36,9) --&gt; 45add(45,10) --&gt; 55 reduceRight()方法和reduce()方法不同，reduceRight()是从右到左执行 map()map()和forEach()有点儿像，对数组中的每个元素使用某个函数。两者区别是map()返回一个新的数组，该数组的元素是对原有元素应用某个函数得到的结果。 12345678function curve(grade) &#123; return grade += 5&#125;var grades = [77, 65, 81, 92, 83]var newGrades = grades.map(curve)console.log(newGrades) //[ 82, 70, 86, 97, 88 ] filter()filter()和every()类似，传入一个返回值为布尔类型的函数。和every()方法不同的是，当对数组中的所有元素应用该函数，结果均为true时，该方法并不返回true，而是返回一个新数组，该数组包含应用该函数后的结果为true的元素。 123456789101112function isEven(num) &#123; return num % 2 == 0&#125;var nums = []for (let i = 0; i &lt; 20; i++) &#123; nums[i] = i + 1&#125;var events = nums.filter(isEven)console.log(events) //[ 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 ] 一行代码生成数组 作者：SarjuHansaliya原文：仅用一行生成[0, 1, …, N-1]数列 使用下面一行代码，我们就可以生成0…(N-1)数列。 ES51Array.apply(null, &#123;length: N&#125;).map(Function.call, Number); 简要说明: Array.apply(null, {length: N}) 返回一个由undefined填充的长度为N的数组(例如 A &#x3D; [undefined, undefined, …])。 A.map(Function.call, Number) 返回一个长度为N的数组，它的索引为I的元素为Function.call.call(Number, undefined, I, A)的结果。 Function.call.call(Number, undefined, I, A)可转化为Number(I)，正好就是I。 结果为：[0, 1, …, N-1]。 ES6这里用到了Array.from 1Array.from(new Array(N),(val,index)=&gt;index); 简要说明: A &#x3D; new Array(N) 返回一个有N个_小孔_的数组 (例如 A &#x3D; [,,,…], 但是对于x in 0…N-1时A[x] &#x3D; undefined)。 F &#x3D; (val,index)&#x3D;&gt;index 即 function F (val, index) { return index; }。 Array.from(A, F) 返回一个长度为N的数组，它的索引为I的元素为F(A[I], I)的结果，也就是I。 结果为：[0, 1, …, N-1]。 One More Thing如果你需要[1, 2, …, N]序列， 方法1可改为： 123Array.apply(null, &#123;length: N&#125;).map(function(value, index)&#123; return index + 1;&#125;); 方法2可改为： 1Array.from(new Array(N),(val,index)=&gt;index+1);","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"mongoose参考手册","slug":"mongoose参考手册","date":"2017-02-28 10:34:32","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/02/28/mongoose参考手册/","link":"","permalink":"https://i.jakeyu.top/2017/02/28/mongoose%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/","excerpt":"","text":"Mongoose 是什么?一般我们不直接用MongoDB的函数来操作MongoDB数据库 Mongose就是一套操作MongoDB数据库的接口. Schema一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力.可以说是数据属性模型(传统意义的表结构)，又或着是”集合”的模型骨架 123456789/* 定义一个 Schema */var mongoose = require(&quot;mongoose&quot;);var TestSchema = new mongoose.Schema(&#123; name : &#123; type: String &#125;,//属性name,类型为String age : &#123; type: Number, default: 0 &#125;,//属性age,类型为Number,默认为0 time : &#123; type: Date, default: Date.now &#125;, email: &#123; type: String,default: &#x27;&#x27;&#125;&#125;); 上面这个 TestSchema包含4个属性 [name, age, time, email] Model由Schema构造生成的模型，除了Schema定义的数据库骨架以外，还具有数据库操作的行为，类似于管理数据库属性、行为的类 1234var db = mongoose.connect(&quot;mongodb://127.0.0.1:27017/test&quot;);// 创建Modelvar TestModel = db.model(&quot;test1&quot;, TestSchema); test1 数据库中的集合名称, 不存在会创建. Entity由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性 1234567var TestEntity = new TestModel(&#123; name : &quot;Lenka&quot;, age : 36, email: &quot;lenka@qq.com&quot;&#125;);console.log(TestEntity.name); // Lenkaconsole.log(TestEntity.age); // 36 游标MongoDB 使用游标返回find的执行结果.客户端对游标的实现通常能够对最终结果进行有效的控制。可以限制结果的数量，略过部分结果，根据任意键按任意顺序的组合对结果进行各种排序，或者是执行其他一些强的操作。 ObjectId存储在mongodb集合中的每个文档（document）都有一个默认的主键_id，这个主键名称是固定的，它可以是mongodb支持的任何数据类型，默认是ObjectId。 ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，依次代表： 4字节：UNIX时间戳 3字节：表示运行MongoDB的机器 2字节：表示生成此_id的进程 3字节：由一个随机数开始的计数器生成的值 Node.js 中package.json 中加入”mongoose”: “*“ 字段npm install 安装依赖. 12var mongoose = require(&quot;mongoose&quot;);mongoose.connect(&quot;mongodb://localhost:27017/test&quot;); 然后引用 1234mongoose.on(&#x27;error&#x27;,console.error.bind(console,&#x27;连接错误:&#x27;));mongoose.once(&#x27;open&#x27;,function()&#123; //一次打开记录&#125;); db - 数据库操作挂接数据库连接事件,参数1: 也可以是error. 1mongoose.connection.on(&#x27;open&#x27;, callback); Schema - 表结构1.构造函数123var PersonSchema = new mongoose.Schema(&#123; name:String //定义一个属性name，类型为String&#125;); 2.添加属性12345Schema.add(&#123; name: &#x27;String&#x27;, email: &#x27;String&#x27;, age: &#x27;Number&#x27;&#125;) 3.有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法1234Schema.method(&#x27;say&#x27;, function() &#123; console.log(&#x27;hello&#x27;);&#125;)//这样Model和Entity的实例就能使用这个方法了 4.添加静态方法12345678910111213141516171819202122Schema.static(&#x27;say&#x27;, function() &#123; console.log(&#x27;hello&#x27;);&#125;)//静态方法，只限于在Model层就能使用//批量添加Schema.statics = &#123; fetch: function(cb) &#123; return this .find(&#123;&#125;) .sort(&#x27;meta.updateAt&#x27;) .exec(cb) &#125;, findById: function(id, cb) &#123; return this .findOne(&#123; _id: id &#125;) .exec(cb) &#125;&#125; 5.追加方法1234Schema.methods.say = function() &#123; console.log(&#x27;hello&#x27;);&#125;;//静态方法，只限于在Model层就能使用 model - 文档操作1.构造函数, 参数1:集合名称, 参数2:Schema实例1234var PersonModel = mongoose.model(&#x27;Person&#x27;,PersonSchema); //如果该Model已经发布，则可以直接通过名字索引到，如下： //var PersonModel = mongoose.model(&#x27;Person&#x27;); //如果没有发布，上一段代码将会异常 2.查询, 参数1忽略,或为空对象则返回所有集合文档1model.find(&#123;&#125;, callback); 12model.find(&#123;&#125;,field,callback);//过滤查询,参数2: &#123;&#x27;name&#x27;:1, &#x27;age&#x27;:0&#125; 查询文档的返回结果包含name , 不包含age.(_id默认是1) 12model.find(&#123;&#125;,null,&#123;limit:20&#125;,callback);//过滤查询,参数3: 游标操作 limit限制返回结果数量为20个,如不足20个则返回所有. 12model.findOne(&#123;&#125;, callback);//查询找到的第一个文档 12model.findById(&#x27;obj._id&#x27;, callback);//查询找到的第一个文档,同上. 但是只接受 __id 的值查询 3.创建, 在集合中创建一个文档1Model.create(文档数据, callback)) 4.更新,参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器1Model.update(conditions, update, function(error)&#123;&#125;) 5.删除, 参数1:查询条件1Model.remove(conditions,callback); Entity - 文档操作1.构造函数, 其实就是model的实例1new TestModel( &#123; name:&#x27;xueyou&#x27;, age:21 &#125; ); 2.创建, 在集合中创建一个文档.1Entity.save(callback); 更新修改器‘$inc’增减修改器,只对数字有效.下面的实例: 找到 age&#x3D;22的文档,修改文档的age值自增112345678 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$inc&#x27;: &#123; &#x27;age&#x27;: 1 &#125;&#125;);执行后: age=23 ‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型.12345678 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$set&#x27;: &#123; &#x27;age&#x27;: &#x27;haha&#x27; &#125;&#125;);执行后: age=&#x27;haha&#x27; ‘$unset’ 同上取反,删除一个键12345678 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$unset&#x27;: &#123; &#x27;age&#x27;: &#x27;haha&#x27; &#125;&#125;);执行后: age键不存在 数组修改器:‘$push’ 给一个键push一个数组成员,键不存在会创建12345678 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$push&#x27;: &#123; &#x27;array&#x27;: 10 &#125;&#125;);执行后: 增加一个 array 键,类型为数组, 有一个成员 10 ‘$addToSet’ 向数组中添加一个元素,如果存在就不添加12345678 Model.update(&#123; &#x27;age&#x27;: 22 &#125;, &#123; &#x27;$addToSet&#x27;: &#123; &#x27;array&#x27;: 10 &#125; &#125;);执行后: array中有10所以不会添加 ‘$each’ 遍历数组, 和 $push 修改器配合可以插入多个值12345678910 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$push&#x27;: &#123; &#x27;array&#x27;: &#123; &#x27;$each&#x27;: [1, 2, 3, 4, 5] &#125; &#125;&#125;);执行后: array : [10,1,2,3,4,5] ‘$pop’ 向数组中尾部删除一个元素12345678 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$pop&#x27;: &#123; &#x27;array&#x27;: 1 &#125;&#125;);执行后: array : [10,1,2,3,4] tips: 将1改成-1可以删除数组首部元素 ‘$pull’ 向数组中删除指定元素12345678 Model.update(&#123; &#x27;age&#x27;: 22&#125;, &#123; &#x27;$pull&#x27;: &#123; &#x27;array&#x27;: 10 &#125;&#125;);执行后: array : [1,2,3,4] 匹配到array中的10后将其删除 条件查询: “$lt” 小于 “$lte” 小于等于 “$gt” 大于 “$gte” 大于等于 “$ne” 不等于 1234567 Model.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 18, &quot;$lte&quot;: 30 &#125;&#125;);//查询 age 大于等于18并小于等于30的文档 或查询 OR: ‘$in’ 一个键对应多个值 ‘$nin’ 同上取反, 一个键不对应指定值 “$or” 多个条件匹配, 可以嵌套 $in 使用 “$not” 同上取反, 查询与特定模式不匹配的文档 123456Model.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 21, 22.&#x27; haha&#x27;] &#125;&#125;);//查询 age等于20或21或21或&#x27;haha&#x27;的文档 12345678Model.find(&#123; &quot;$or&quot;: [&#123; &quot;age&quot;: 18 &#125;, &#123; &quot;name&quot;: &quot;xueyou&quot; &#125;]&#125;);//查询 age等于18 或 name等于&#x27;xueyou&#x27; 的文档 类型查询:null 能匹配自身和不存在的值, 想要匹配键的值 为null, 就要通过 “$exists” 条件判定键值已经存在“$exists” (表示是否存在的意思) 12345 Model.find(&quot;age&quot;: &#123; &quot;$in&quot;: [null], &quot;exists&quot;: true&#125;);//查询 age值为null的文档 1234567Model.find(&#123; name: &#123; $exists: true &#125;&#125;, function(error, docs) &#123;//查询所有存在name属性的文档&#125;); 1234567Model.find(&#123; telephone: &#123; $exists: false &#125;&#125;, function(error, docs) &#123;//查询所有不存在telephone属性的文档&#125;); 正则表达式:MongoDb 使用 Prel兼容的正则表达式库来匹配正则表达式 1234 find(&#123; &quot;name&quot;: /joe/i&#125;)//查询name为 joe 的文档, 并忽略大小写 1234 find(&#123; &quot;name&quot;: /joe?/i&#125;)//查询匹配各种大小写组合 查询数组:1234Model.find(&#123; &quot;array&quot;: 10&#125;);//查询 array(数组类型)键中有10的文档, array : [1,2,3,4,5,10] 会匹配到 1234 Model.find(&#123; &quot;array[5]&quot;: 10&#125;);//查询 array(数组类型)键中下标5对应的值是10, array : [1,2,3,4,5,10] 会匹配到 ‘$all’ 匹配数组中多个元素1234 Model.find(&#123; &quot;array&quot;: [5, 10]&#125;);//查询 匹配array数组中 既有5又有10的文档 ‘$size’ 匹配数组长度123456 Model.find(&#123; &quot;array&quot;: &#123; &quot;$size&quot;: 3 &#125;&#125;);//查询 匹配array数组长度为3 的文档 ‘$slice’ 查询子集合返回123456 Model.find(&#123; &quot;array&quot;: &#123; &quot;$skice&quot;: 10 &#125;&#125;);//查询 匹配array数组的前10个元素 123456 Model.find(&#123; &quot;array&quot;: &#123; &quot;$skice&quot;: [5, 10] &#125;&#125;);//查询 匹配array数组的第5个到第10个元素 where用它可以执行任意javacript语句作为查询的一部分,如果回调函数返回 true 文档就作为结果的一部分返回 12345678910111213find(&#123; &quot;$where&quot;: function() &#123; for (var x in this) &#123; //这个函数中的 this 就是文档 &#125; if (this.x !== null &amp;&amp; this.y !== null) &#123; return this.x + this.y === 10 ? true : false; &#125; else &#123; return true; &#125; &#125;&#125;) 简化版本 123456find(&#123; &quot;$where&quot;: &quot;this.x + this.y === 10&quot;&#125;)find(&#123; &quot;$where&quot;: &quot; function()&#123; return this.x + this.y ===10; &#125; &quot;&#125;) 游标: limit(3) 限制返回结果的数量, skip(3) 跳过前3个文档,返回其余的 sort( {“username”:1 , “age”:-1 } ) 排序 键对应文档的键名, 值代表排序方向, 1 升序, -1降序 参考 Mongoose 参考手册 Mongoose学习参考文档 汇智网","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"mongoose","slug":"mongoose","permalink":"https://i.jakeyu.top/tags/mongoose/"},{"name":"mongodb","slug":"mongodb","permalink":"https://i.jakeyu.top/tags/mongodb/"}]},{"title":"centos7中firewall防火墙常用命令","slug":"centos7中firewall防火墙常用命令","date":"2017-02-27 20:26:34","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/02/27/centos7中firewall防火墙常用命令/","link":"","permalink":"https://i.jakeyu.top/2017/02/27/centos7%E4%B8%ADfirewall%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"最近在搭建小程序服务端的时候想远程连接服务器mongodb数据库，发现一直出错，原来是这货。 firewall是centos7的一大特性，最大的好处有两个： 支持动态更新 不用重启服务； 开启、关闭firewall启动：systemctl start firewalld 查看状态：systemctl status firewalld 或者 firewall-cmd –state 停止：systemctl disable firewalld 禁用：systemctl stop firewalld 端口操作打开一个端口：firewall-cmd --permanent --add-port=8080/tcp 关闭一个端口：firewall-cmd --permanent --remove-port=8080/tcp 打开某项服务：firewall-cmd --permanent --add-service=http 关闭某项服务：firewall-cmd --permanent --remove-service=http 进行端口转发：firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=192.0.2.55 允许转发到其他地址：firewall-cmd --permanent --add-masquerade 重新加载防火墙：firewall-cmd --reload 配置firewall查看版本：firewall-cmd –version 查看帮助：firewall-cmd –help 查看设置： 显示状态：$ firewall-cmd –state 查看区域信息: $ firewall-cmd –get-active-zones 查看指定接口所属区域：$ firewall-cmd –get-zone-of-interface&#x3D;eth0 拒绝所有包：firewall-cmd –panic-on 取消拒绝状态：firewall-cmd –panic-off 查看是否拒绝：firewall-cmd –query-panic","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"nodejs使用redis数据库缓存数据","slug":"nodejs使用redis数据库缓存数据","date":"2017-02-27 09:34:11","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/02/27/nodejs使用redis数据库缓存数据/","link":"","permalink":"https://i.jakeyu.top/2017/02/27/nodejs%E4%BD%BF%E7%94%A8redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/","excerpt":"","text":"运行redisRedis服务器默认使用6379端口 redis-server 自定义端口 redis-server –port 6390 客户端 redis-cli 指定ip和端口连接 redis-cli -h 127.0.0.1 -p 6390 测试客户端和服务器是否连通 ping Nodejs连接redis通过redis.createClient(port,host,options)来连接redis服务器 12var redis = require(&quot;redis&quot;)var client = redis.createClient(); 123456789/*client.HMSET 保存哈希键值*/client.HMSET(key,val,function(err,result)&#123; if(err)&#123; return callback(&#123;code:0,msg:err&#125;); &#125; callback(&#123;code:1,msg:result&#125;); /*设置过期时间为1天*/ client.EXPIRE(bottleId,86400);&#125;); 123456789101112131415/*随机返回当前数据库的一个键*/client.RANDOMKEY(function(err,key)&#123; if(!key)&#123; return callback(&#123;code:0,msg:&#x27;没有数据&#x27;&#125;); &#125; /*根据key返回哈希对象*/ client.HGETALL(key,function(err,val)&#123; if(err)&#123; return callback(&#123;code:0,msg:err&#125;); &#125; callback(&#123;code:1,msg:val&#125;); /*根据key删除键值*/ client.DEL(key); &#125;);&#125;); Redis常用命令Redis命令参考手册 清空数据库 FLUSHALL 删除key DEL key 检查key是否存在。 EXISTS key &#x2F;&#x2F;字符串HEXISTS key field &#x2F;&#x2F;查看哈希表 key 中，指定的字段是否存在。 返回key所储存的值的类型。 TYPE key 获取key所存储的值字符串 GET key 哈希 HGETALL key &#x2F;&#x2F;获取在哈希表中指定 key 的所有字段和值","author":"Jake","categories":[{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://i.jakeyu.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"表单文件上传","slug":"表单文件上传","date":"2017-01-10 14:14:36","updated":"2023-03-24 05:08:37","comments":true,"path":"2017/01/10/表单文件上传/","link":"","permalink":"https://i.jakeyu.top/2017/01/10/%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","excerpt":"","text":"FormData对象使用一些键值对来模拟一个完整的表单，然后使用ajax发送这个FormData对象，后端便可以拿到表单中上传的文件。 前端处理HTML代码123&lt;form&gt; &lt;input type=&quot;file&quot; id=&quot;uploadFile&quot; name=&quot;file&quot;&gt;&lt;/form&gt; 如果只想上传图片： 1&lt;input id=&quot;uploadFile&quot; type=&quot;file&quot; name=&quot;file&quot; accept=&quot;image/png,image/gif&quot;/&gt; 可配置属性： accept：表示可以选择的文件MIME类型，多个MIME类型用英文逗号分开，常用的MIME类型见下表。 multiple：是否可以选择多个文件，多个文件时其value值为第一个文件的虚拟路径。 常用MIME类型 后缀名 MIME名称 *.3gpp audio&#x2F;3gpp, video&#x2F;3gpp *.ac3 audio&#x2F;ac3 *.asf allpication&#x2F;vnd.ms-asf *.au audio&#x2F;basic *.css text&#x2F;css *.csv text&#x2F;csv *.doc application&#x2F;msword *.dot application&#x2F;msword *.dtd application&#x2F;xml-dtd *.dwg image&#x2F;vnd.dwg *.dxf image&#x2F;vnd.dxf *.gif image&#x2F;gif *.htm text&#x2F;html *.html text&#x2F;html *.jp2 image&#x2F;jp2 *.jpe image&#x2F;jpeg *.jpeg image&#x2F;jpeg *.jpg image&#x2F;jpeg *.js text&#x2F;javascript, application&#x2F;javascript *.json application&#x2F;json *.mp2 audio&#x2F;mpeg, video&#x2F;mpeg *.mp3 audio&#x2F;mpeg *.mp4 audio&#x2F;mp4, video&#x2F;mp4 *.mpeg video&#x2F;mpeg *.mpg video&#x2F;mpeg *.mpp application&#x2F;vnd.ms-project *.ogg application&#x2F;ogg, audio&#x2F;ogg *.pdf application&#x2F;pdf *.png image&#x2F;png *.pot application&#x2F;vnd.ms-powerpoint *.pps application&#x2F;vnd.ms-powerpoint *.ppt application&#x2F;vnd.ms-powerpoint *.pptx application&#x2F;vnd.openxmlformats-officedocument.presentationml.presentation *.rtf application&#x2F;rtf, text&#x2F;rtf *.svf image&#x2F;vnd.svf *.tif image&#x2F;tiff *.tiff image&#x2F;tiff *.txt text&#x2F;plain *.wdb application&#x2F;vnd.ms-works *.wps application&#x2F;vnd.ms-works *.xhtml application&#x2F;xhtml+xml *.xlc application&#x2F;vnd.ms-excel *.xlm application&#x2F;vnd.ms-excel *.xls application&#x2F;vnd.ms-excel *.xlsx application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet *.xlt application&#x2F;vnd.ms-excel *.xlw application&#x2F;vnd.ms-excel *.xml text&#x2F;xml, application&#x2F;xml *.zip aplication&#x2F;zip javascript代码123456789101112131415161718$(&#x27;#uploadFile&#x27;).on(&#x27;change&#x27;,function(e)&#123; var file = this.files[0]; var formData = new FormData(); formData.append(&#x27;file&#x27;,file); $.ajax(&#123; url: &#x27;/webgl/upload/zip&#x27;, type: &#x27;post&#x27;, data: formData, cache: false, contentType: false, processData: false, success: function(res)&#123; // &#125; &#125;)&#125;) 这里我是在文件被选择上传后就会立即触发ajax上传文件事件，而表单中其他字段我没有使用FormData对象，所以&lt;form&gt;标签没有添加enctype=&quot;multipart/form-data&quot;属性。 注： processData设置为false。因为data值是FormData对象，不需要对数据做处理。 cache设置为false，上传文件不需要缓存。 contentType设置为false。 nodejs代码multer模块我使用了multer模块，更多信息。初始化multer模块配置 123456789101112var storageZip = multer.diskStorage(&#123; destination: function(req, file, cb) &#123; cb(null, &#x27;public/uploads/zip&#x27;) //文件存储路径 &#125;, filename: function(req, file, cb) &#123; cb(null, file.fieldname + &#x27;-&#x27; + Date.now() + &#x27;.zip&#x27;) //对文件重新命名，防止文件名冲突 &#125; &#125;) var uploadZip = multer(&#123; storage: storageZip &#125;); 路由配置123app.post(&#x27;/webgl/upload/zip&#x27;, uploadZip.single(&#x27;file&#x27;), function(req, res) &#123; res.json(req.file) &#125;) 这里single()参数名就是使用FormData.append()方法添加时的文件名，这里我用的是file。 上传结束之后，会把file对象返回给前端，file对象会包含文件名等信息。","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"Hexo博客部署到服务器","slug":"Hexo博客搭建到服务器并自动部署","date":"2016-12-06 19:09:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/12/06/Hexo博客搭建到服务器并自动部署/","link":"","permalink":"https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/","excerpt":"","text":"服务器环境配置我使用的是root执行，因为服务器只有我一个人用，不会出什么问题 安装git和nginx请查看CentOS7 + nodejs + nginx + MySQL搭建服务器 配置ssh执行： cat ~/.ssh/id_rsa.pub 把拿到的公钥添加到~/.ssh/authorized_keys中 如果你之前没有生成过公钥，则可能就没有 id_rsa.pub 文件,查看这里 初始化仓库cd /home/jake sudo git init --bare m.git 使用 --bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在。 配置git hooks我们这里要使用的是 post-receive 的 hook，这个 hook 会在整个 git 操作过程完结以后被运行。 在 m.git/hooks 目录下新建一个 post-receive 文件： cd /home/jake/m.git/hooks vim post-receive 在 post-receive 文件中写入如下内容： #!/bin/sh git --work-tree=/home/jake/m --git-dir=/home/jake/m.git checkout -f /home/jake/m 要换成你自己的部署目录。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。 设置这个文件的可执行权限： chmod +x post-receive Nginx配置我用的是lnmp(如果是直接安装的Nginx，配置文件为/etc/nginx/nginx.conf) cd /usr/local/nginx/conf/vhost vim m.conf 输入下面配置 1234567891011121314151617181920212223242526272829server&#123; listen 80; #listen [::]:80; server_name i.jakeyu.top; index index.html index.htm index.php default.html default.htm default.php; #这里要改成网站的根目录 root /home/jake/m; #error_page 404 /404.html; location ~ .*\\.(ico|gif|jpg|jpeg|png|bmp|swf)$ &#123; access_log off; expires 1d; &#125; location ~ .*\\.(js|css|txt|xml)?$ &#123; access_log off; expires 12h; &#125; location / &#123; try_files $uri $uri/ =404; &#125; access_log /home/jake/m.log;&#125; 测试nginx配置是否可以用 nginx -t 如果返回successful，就表示成功了。重启Nginx service nginx restart 本地配置修改博客根目录下_config.yml文件 1234deploy: type: git repo: vps: root@115.159.2.254:/home/jake/m.git 然后执行: hexo new 测试.md hexo d -g 访问刚刚的配置的域名就可以访问自己的网站了","author":"Jake","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://i.jakeyu.top/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://i.jakeyu.top/tags/Hexo/"}]},{"title":"sass用法","slug":"sass用法","date":"2016-12-04 15:10:30","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/12/04/sass用法/","link":"","permalink":"https://i.jakeyu.top/2016/12/04/sass%E7%94%A8%E6%B3%95/","excerpt":"今天改一套模版，要用到sass，之前一直用的是less，索性就大概看看sass语法和编译。","text":"今天改一套模版，要用到sass，之前一直用的是less，索性就大概看看sass语法和编译。 什么是SASSSASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。 本文总结了SASS的主要用法。我的目标是，有了这篇文章，日常的一般使用就不需要去看官方文档了。 安装和使用安装SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。 假定你已经安装好了Ruby，接着在命令行输入下面的命令： gem install sass 使用SASS文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。 下面的命令，可以在屏幕上显示.scss文件转化的css代码。（假设文件名为test。） sass test.scss 如果要将显示结果保存成文件，后面再跟一个.css文件名。 sass test.scss test.css SASS提供四个编译风格的选项： nested：嵌套缩进的css代码，它是默认值。 expanded：没有缩进的、扩展的css代码。 compact：简洁格式的css代码。 compressed：压缩后的css代码。 生产环境当中，一般使用最后一个选项。 sass –style compressed test.sass test.css 你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。 &#x2F;&#x2F; watch a filesass –watch input.scss:output.css&#x2F;&#x2F; watch a directorysass –watch app&#x2F;sass:public&#x2F;stylesheets SASS的官方网站，提供了一个在线转换器。你可以在那里，试运行下面的各种例子。 基本用法变量SASS允许使用变量，所有变量以$开头。 1234$blue : #1875e7; div &#123; color : $blue; &#125; 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。 1234 $side : left; .rounded &#123; border-#&#123;$side&#125;-radius: 5px; &#125; 计算功能SASS允许在代码中使用算式： 12345 body &#123; margin: (14px/2); top: 50px + 100px; right: $var * 10%; &#125; 嵌套SASS允许选择器嵌套。比如，下面的CSS代码： 123div h1 &#123; color : red; &#125; 可以写成： 12345 div &#123; hi &#123; color:red; &#125; &#125; 属性也可以嵌套，比如border-color属性，可以写成： 12345 p &#123; border: &#123; color: red; &#125; &#125; 注意，border后面必须加上冒号。 在嵌套的代码块内，可以使用&amp;引用父元素。比如a:hover伪类，可以写成： 123 a &#123; &amp;:hover &#123; color: #ffb3ff; &#125; &#125; 注释SASS共有两种注释风格。 标准的CSS注释 &#x2F;* comment *&#x2F; ，会保留到编译后的文件。 单行注释 &#x2F;&#x2F; comment，只保留在SASS源文件中，编译后被省略。 在&#x2F;*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。 123 /*! 重要注释！ */ 代码的重用继承SASS允许一个选择器，继承另一个选择器。比如，现有class1： 123 .class1 &#123; border: 1px solid #ddd; &#125; class2要继承class1，就要使用@extend命令： 1234 .class2 &#123; @extend .class1; font-size:120%; &#125; MixinMixin有点像C语言的宏（macro），是可以重用的代码块。 使用@mixin命令，定义一个代码块。 1234 @mixin left &#123; float: left; margin-left: 10px; &#125; 使用@include命令，调用这个mixin。 123 div &#123; @include left; &#125; mixin的强大之处，在于可以指定参数和缺省值。 1234 @mixin left($value: 10px) &#123; float: left; margin-right: $value; &#125; 使用的时候，根据需要加入参数： 123 div &#123; @include left(20px); &#125; 下面是一个mixin的实例，用来生成浏览器前缀。 12345 @mixin rounded($vert, $horz, $radius: 10px) &#123; border-#&#123;$vert&#125;-#&#123;$horz&#125;-radius: $radius; -moz-border-radius-#&#123;$vert&#125;#&#123;$horz&#125;: $radius; -webkit-border-#&#123;$vert&#125;-#&#123;$horz&#125;-radius: $radius; &#125; 使用的时候，可以像下面这样调用： 12 #navbar li &#123; @include rounded(top, left); &#125; #footer &#123; @include rounded(top, left, 5px); &#125; 颜色函数SASS提供了一些内置的颜色函数，以便生成系列颜色。 1234 lighten(#cc3, 10%) // #d6d65c darken(#cc3, 10%) // #a3a329 grayscale(#cc3) // #808080 complement(#cc3) // #33c 插入文件@import命令，用来插入外部文件。 1@import &quot;path/filename.scss&quot;; 如果插入的是.css文件，则等同于css的import命令。 1 @import &quot;foo.css&quot;; 高级用法条件语句@if可以用来判断： 1234 p &#123; @if 1 + 1 == 2 &#123; border: 1px solid; &#125; @if 5 &lt; 3 &#123; border: 2px dotted; &#125; &#125; 配套的还有@else命令： 12345 @if lightness($color) &gt; 30% &#123; background-color: #000; &#125; @else &#123; background-color: #fff; &#125; 循环语句SASS支持for循环： 12345 @for $i from 1 to 10 &#123; .border-#&#123;$i&#125; &#123; border: #&#123;$i&#125;px solid blue; &#125; &#125; 也支持while循环： 12345 $i: 6; @while $i &gt; 0 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125; $i: $i - 2; &#125; each命令，作用与for类似： 12345 @each $member in a, b, c, d &#123; .#&#123;$member&#125; &#123; background-image: url(&quot;/image/#&#123;$member&#125;.jpg&quot;); &#125; &#125; 自定义函数SASS允许用户编写自己的函数。 123456 @function double($n) &#123; @return $n * 2; &#125; #sidebar &#123; width: double(5px); &#125; 作者： 阮一峰日期： 2012年6月19日原文： SASS用法指南","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"sass","slug":"sass","permalink":"https://i.jakeyu.top/tags/sass/"}]},{"title":"前端解决跨域问题的8种方案","slug":"前端解决跨域问题","date":"2016-12-02 21:18:27","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/12/02/前端解决跨域问题/","link":"","permalink":"https://i.jakeyu.top/2016/12/02/%E5%89%8D%E7%AB%AF%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/","excerpt":"","text":"原文 同源策略 URL 说明 是否允许通信 http://www.a.com/a.jshttp://www.a.com/b.js 同一域名下 允许 http://www.a.com/lab/a.jshttp://www.a.com/script/b.js 同一域名下不同文件夹 允许 http://www.a.com:8000/a.jshttp://www.a.com/b.js 同一域名，不同端口 不允许 http://www.a.com/a.jshttps://www.a.com/b.js 同一域名，不同协议 不允许 http://www.a.com/a.jshttp://70.32.92.74/b.js 域名和域名对应ip 不允许 http://www.a.com/a.jshttp://script.a.com/b.js 主域相同，子域不同 不允许 http://www.a.com/a.jshttp://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问） http://www.cnblogs.com/a.jshttp://www.a.com/b.js 不同域名 不允许 特别注意 如果是协议和端口造成的跨域问题“前台”是无能为力的， 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。 “URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。 前端解决跨域问题CORSCORS背后的思想，就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。 IE中对CORS的实现是xdr1234567var xdr = new XDomainRequest();xdr.onload = function()&#123; console.log(xdr.responseText);&#125;xdr.open(&#x27;get&#x27;, &#x27;http://www.baidu.com&#x27;);......xdr.send(null); 其它浏览器中的实现就在xhr中1234567891011var xhr = new XMLHttpRequest();xhr.onreadystatechange = function () &#123; if(xhr.readyState == 4)&#123; if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 304 || xhr.status == 304)&#123; console.log(xhr.responseText); &#125; &#125;&#125;xhr.open(&#x27;get&#x27;, &#x27;http://www.baidu.com&#x27;);......xhr.send(null); 实现跨浏览器的CORS12345678910111213141516171819function createCORS(method, url)&#123; var xhr = new XMLHttpRequest(); if(&#x27;withCredentials&#x27; in xhr)&#123; xhr.open(method, url, true); &#125;else if(typeof XDomainRequest != &#x27;undefined&#x27;)&#123; var xhr = new XDomainRequest(); xhr.open(method, url); &#125;else&#123; xhr = null; &#125; return xhr;&#125;var request = createCORS(&#x27;get&#x27;, &#x27;http://www.baidu.com&#x27;);if(request)&#123; request.onload = function()&#123; ...... &#125;; request.send();&#125; 关于更详细的CORS讲解 跨域资源共享 CORS 详解–阮一峰 前端跨域的整理 document.domain + iframe(只有在主域相同的时候才能使用该方法)在www.a.com/a.html中 12345678910document.domain = &#x27;a.com&#x27;;var ifr = document.createElement(&#x27;iframe&#x27;);ifr.src = &#x27;http://www.script.a.com/b.html&#x27;;ifr.display = none;document.body.appendChild(ifr);ifr.onload = function()&#123; var doc = ifr.contentDocument || ifr.contentWindow.document; //在这里操作doc，也就是b.html ifr.onload = null;&#125;; 在www.script.a.com/b.html中： 1document.domain = &#x27;a.com&#x27;; 动态创建script这个没什么好说的，因为script标签不受同源策略的限制。 12345678910111213141516171819202122function loadScript(url, func) &#123; var head = document.head || document.getElementByTagName(&#x27;head&#x27;)[0]; var script = document.createElement(&#x27;script&#x27;); script.src = url; script.onload = script.onreadystatechange = function()&#123; if(!this.readyState || this.readyState==&#x27;loaded&#x27; || this.readyState==&#x27;complete&#x27;)&#123; func(); script.onload = script.onreadystatechange = null; &#125; &#125;; head.insertBefore(script, 0);&#125;window.baidu = &#123; sug: function(data)&#123; console.log(data); &#125;&#125;loadScript(&#x27;http://suggestion.baidu.com/su?wd=w&#x27;,function()&#123;console.log(&#x27;loaded&#x27;)&#125;);//我们请求的内容在哪里？//我们可以在chorme调试面板的source中看到script引入的内容 location.hash + iframe原理是利用location.hash来进行传值。 假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。 cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面 cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值 注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe 代码如下： 先是a.com下的文件cs1.html文件： 12345678910111213141516function startRequest()&#123; var ifr = document.createElement(&#x27;iframe&#x27;); ifr.style.display = &#x27;none&#x27;; ifr.src = &#x27;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&#x27;; document.body.appendChild(ifr);&#125;function checkHash() &#123; try &#123; var data = location.hash ? location.hash.substring(1) : &#x27;&#x27;; if (console.log) &#123; console.log(&#x27;Now the data is &#x27;+data); &#125; &#125; catch(e) &#123;&#125;;&#125;setInterval(checkHash, 2000); cnblogs.com域名下的cs2.html: 12345678910111213141516171819202122//模拟一个简单的参数处理操作switch(location.hash)&#123; case &#x27;#paramdo&#x27;: callBack(); break; case &#x27;#paramset&#x27;: //do something…… break;&#125;function callBack()&#123; try &#123; parent.location.hash = &#x27;somedata&#x27;; &#125; catch (e) &#123; // ie、chrome的安全机制无法修改parent.location.hash， // 所以要利用一个中间的cnblogs域下的代理iframe var ifrproxy = document.createElement(&#x27;iframe&#x27;); ifrproxy.style.display = &#x27;none&#x27;; ifrproxy.src = &#x27;http://a.com/test/cscript/cs3.html#somedata&#x27;; // 注意该文件在&quot;a.com&quot;域下 document.body.appendChild(ifrproxy); &#125;&#125; a.com下的域名cs3.html 12//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值parent.parent.location.hash = self.location.hash.substring(1); window.name + iframewindow.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。 创建a.com&#x2F;cs1.html 创建a.com&#x2F;proxy.html，并加入如下代码: 12345678910111213141516171819202122232425262728293031323334&lt;head&gt; &lt;script&gt; function proxy(url, func)&#123; var isFirst = true, ifr = document.createElement(&#x27;iframe&#x27;), loadFunc = function()&#123; if(isFirst)&#123; ifr.contentWindow.location = &#x27;http://a.com/cs1.html&#x27;; isFirst = false; &#125;else&#123; func(ifr.contentWindow.name); ifr.contentWindow.close(); document.body.removeChild(ifr); ifr.src = &#x27;&#x27;; ifr = null; &#125; &#125;; ifr.src = url; ifr.style.display = &#x27;none&#x27;; if(ifr.attachEvent) ifr.attachEvent(&#x27;onload&#x27;, loadFunc); else ifr.onload = loadFunc; document.body.appendChild(iframe); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; proxy(&#x27;http://www.baidu.com/&#x27;, function(data)&#123; console.log(data); &#125;); &lt;/script&gt;&lt;/body&gt; 在b.com&#x2F;cs1.html中包含： 123&lt;script&gt; window.name = &#x27;要传送的内容&#x27;;&lt;/script&gt; postMessage（HTML5中的XMLHttpRequest Level 2中的API）a.com&#x2F;index.html中的代码： 123456789&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;&lt;script type=&quot;text/javascript&quot;&gt;window.onload = function() &#123; var ifr = document.getElementById(&#x27;ifr&#x27;); var targetOrigin = &#x27;http://b.com&#x27;; // 若写成&#x27;http://b.com/c/proxy.html&#x27;效果一样 // 若写成&#x27;http://c.com&#x27;就不会执行postMessage了 ifr.contentWindow.postMessage(&#x27;I was there!&#x27;, targetOrigin);&#125;;&lt;/script&gt; b.com&#x2F;index.html中的代码： 12345678910&lt;script type=&quot;text/javascript&quot;&gt; window.addEventListener(&#x27;message&#x27;, function(event)&#123; // 通过origin属性判断消息来源地址 if (event.origin == &#x27;http://a.com&#x27;) &#123; alert(event.data); // 弹出&quot;I was there!&quot; alert(event.source); // 对a.com、index.html中window对象的引用 // 但由于同源策略，这里event.source不可以访问window对象 &#125; &#125;, false);&lt;/script&gt; JSONPJSONP包含两部分：回调函数和数据。 回调函数是当响应到来时要放在当前页面被调用的函数。 数据就是传入回调函数中的json数据，也就是回调函数的参数了。 12345678910111213function handleResponse(response)&#123; console.log(&#x27;The responsed data is: &#x27;+response.data);&#125;var script = document.createElement(&#x27;script&#x27;);script.src = &#x27;http://www.baidu.com/json/?callback=handleResponse&#x27;;document.body.insertBefore(script, document.body.firstChild);/*handleResonse(&#123;&quot;data&quot;: &quot;zhe&quot;&#125;)*///原理如下：//当我们通过script标签请求时//后台就会根据相应的参数(json,handleResponse)//来生成相应的json数据(handleResponse(&#123;&quot;data&quot;: &quot;zhe&quot;&#125;))//最后这个返回的json数据(代码)就会被放在当前js文件中被执行//至此跨域通信完成 jsonp虽然很简单，但是有如下缺点： 安全问题(请求代码中可能存在安全隐患) 要确定jsonp请求是否失败并不容易 web socketsweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用) web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。 只有在支持web socket协议的服务器上才能正常工作。 12345var socket = new WebSockt(&#x27;ws://www.baidu.com&#x27;);//http-&gt;ws; https-&gt;wsssocket.send(&#x27;hello WebSockt&#x27;);socket.onmessage = function(event)&#123; var data = event.data;&#125;","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"方案","slug":"方案","permalink":"https://i.jakeyu.top/tags/%E6%96%B9%E6%A1%88/"}]},{"title":"利用CSS、JavaScript及Ajax实现图片预加载","slug":"图片预加载","date":"2016-11-28 21:13:57","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/11/28/图片预加载/","link":"","permalink":"https://i.jakeyu.top/2016/11/28/%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD/","excerpt":"","text":"原文：3 Ways to Preload Images with CSS, JavaScript, or Ajax 预加载图片是提高用户体验的一个很好方法。图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。本文将分享三个不同的预加载技术，来增强网站的性能与可用性。 用CSS和JavaScript实现预加载单纯的使用css可以将图片加载到页面元素的背景上，这种方法简单、高效： 123#preload-01 &#123; background: url(http://domain.tld/image-01.png) no-repeat -9999px -9999px; &#125;#preload-02 &#123; background: url(http://domain.tld/image-02.png) no-repeat -9999px -9999px; &#125;#preload-03 &#123; background: url(http://domain.tld/image-03.png) no-repeat -9999px -9999px; &#125; 将这三个ID选择器应用到(X)HTML元素中，我们便可通过CSS的background属性将图片预加载到屏幕外的背景上。只要这些图片的路径保持不变，当它们在Web页面的其他地方被调用时，浏览器就会在渲染过程中使用预加载（缓存）的图片。简单、高效，不需要任何JavaScript。 弊端：该方法虽然高效，但仍有改进余地。使用该法加载的图片会同页面的其他内容一起加载，增加了页面的整体加载时间。为了解决这个问题，我们增加了一些JavaScript代码，来推迟预加载的时间，直到页面加载完毕。代码如下： 123456789101112131415161718192021function preloader() &#123; if (document.getElementById) &#123; document.getElementById(&quot;preload-01&quot;).style.background = &quot;url(http://domain.tld/image-01.png) no-repeat -9999px -9999px&quot;; document.getElementById(&quot;preload-02&quot;).style.background = &quot;url(http://domain.tld/image-02.png) no-repeat -9999px -9999px&quot;; document.getElementById(&quot;preload-03&quot;).style.background = &quot;url(http://domain.tld/image-03.png) no-repeat -9999px -9999px&quot;; &#125;&#125;function addLoadEvent(func) &#123; var oldonload = window.onload; if (typeof window.onload != &#x27;function&#x27;) &#123; window.onload = func; &#125; else &#123; window.onload = function() &#123; if (oldonload) &#123; oldonload(); &#125; func(); &#125; &#125;&#125;addLoadEvent(preloader); 在该脚本的第一部分，我们获取使用类选择器的元素，并为其设置了background属性，以预加载不同的图片。 该脚本的第二部分，我们使用addLoadEvent()函数来延迟preloader()函数的加载时间，直到页面加载完毕。 如果JavaScript无法在用户的浏览器中正常运行，会发生什么？很简单，图片不会被预加载，当页面调用图片时，正常显示即可。 使用JavaScript实现上述方法有时确实很高效，但我们逐渐发现它在实际实现过程中会耗费太多时间。相反，我更喜欢使用纯JavaScript来实现图片的预加载。下面将提供两种这样的预加载方法，它们可以很漂亮地工作于所有现代浏览器之上。 方法一只需简单编辑、加载所需要图片的路径与名称即可，很容易实现： 12345678910111213141516&lt;div class=&quot;hidden&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; var images = new Array() function preload() &#123; for (i = 0; i &lt; preload.arguments.length; i++) &#123; images[i] = new Image() images[i].src = preload.arguments[i] &#125; &#125; preload( &quot;http://domain.tld/gallery/image-001.jpg&quot;, &quot;http://domain.tld/gallery/image-002.jpg&quot;, &quot;http://domain.tld/gallery/image-003.jpg&quot; ) &lt;/script&gt;&lt;/div&gt; 该方法尤其适用预加载大量的图片。我的画廊网站使用该技术，预加载图片数量达50多张。将该脚本应用到登录页面，只要用户输入登录帐号，大部分画廊图片将被预加载。 方法二该方法与上面的方法类似，也可以预加载任意数量的图片。将下面的脚本添加入任何Web页中，根据程序指令进行编辑即可。 123456789101112&lt;div class=&quot;hidden&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; if (document.images) &#123; img1 = new Image(); img2 = new Image(); img3 = new Image(); img1.src = &quot;http://domain.tld/path/to/image-001.gif&quot;; img2.src = &quot;http://domain.tld/path/to/image-002.gif&quot;; img3.src = &quot;http://domain.tld/path/to/image-003.gif&quot;; &#125; &lt;/script&gt;&lt;/div&gt; 正如所看见，每加载一个图片都需要创建一个变量，如“img1 &#x3D; new Image();”，及图片源地址声明，如“img3.src &#x3D; “..&#x2F;path&#x2F;to&#x2F;image-003.gif”;”。参考该模式，你可根据需要加载任意多的图片。 我们又对该方法进行了改进。将该脚本封装入一个函数中，并使用 addLoadEvent（），延迟预加载时间，直到页面加载完毕。 123456789101112131415161718192021222324function preloader() &#123; if (document.images) &#123; var img1 = new Image(); var img2 = new Image(); var img3 = new Image(); img1.src = &quot;http://domain.tld/path/to/image-001.gif&quot;; img2.src = &quot;http://domain.tld/path/to/image-002.gif&quot;; img3.src = &quot;http://domain.tld/path/to/image-003.gif&quot;; &#125;&#125;function addLoadEvent(func) &#123; var oldonload = window.onload; if (typeof window.onload != &#x27;function&#x27;) &#123; window.onload = func; &#125; else &#123; window.onload = function() &#123; if (oldonload) &#123; oldonload(); &#125; func(); &#125; &#125;&#125;addLoadEvent(preloader); 使用Ajax上面所给出的方法似乎不够酷，那现在来看一个使用Ajax实现图片预加载的方法。该方法利用DOM，不仅仅预加载图片，还会预加载CSS、JavaScript等相关的东西。使用Ajax，比直接使用JavaScript，优越之处在于JavaScript和CSS的加载不会影响到当前页面。该方法简洁、高效。 12345678910111213window.onload = function() &#123; setTimeout(function() &#123; // XHR to request a JS and a CSS var xhr = new XMLHttpRequest(); xhr.open(&#x27;GET&#x27;, &#x27;http://domain.tld/preload.js&#x27;); xhr.send(&#x27;&#x27;); xhr = new XMLHttpRequest(); xhr.open(&#x27;GET&#x27;, &#x27;http://domain.tld/preload.css&#x27;); xhr.send(&#x27;&#x27;); // preload image new Image().src = &quot;http://domain.tld/preload.png&quot;; &#125;, 1000);&#125;; 上面代码预加载了“preload.js”、“preload.css”和“preload.png”。1000毫秒的超时是为了防止脚本挂起，而导致正常页面出现功能问题。 下面，我们看看如何用JavaScript来实现该加载过程： 12345678910111213141516171819202122232425262728window.onload = function() &#123; setTimeout(function() &#123; // reference to &lt;head&gt; var head = document.getElementsByTagName(&#x27;head&#x27;)[0]; // a new CSS var css = document.createElement(&#x27;link&#x27;); css.type = &quot;text/css&quot;; css.rel = &quot;stylesheet&quot;; css.href = &quot;http://domain.tld/preload.css&quot;; // a new JS var js = document.createElement(&quot;script&quot;); js.type = &quot;text/javascript&quot;; js.src = &quot;http://domain.tld/preload.js&quot;; // preload JS and CSS head.appendChild(css); head.appendChild(js); // preload image new Image().src = &quot;http://domain.tld/preload.png&quot;; &#125;, 1000); &#125;; 这里，我们通过DOM创建三个元素来实现三个文件的预加载。正如上面提到的那样，使用Ajax，加载文件不会应用到加载页面上。从这点上看，Ajax方法优越于JavaScript。","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"方案","slug":"方案","permalink":"https://i.jakeyu.top/tags/%E6%96%B9%E6%A1%88/"}]},{"title":"实现图片懒加载(lazyload)","slug":"实现图片懒加载","date":"2016-11-26 18:46:34","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/11/26/实现图片懒加载/","link":"","permalink":"https://i.jakeyu.top/2016/11/26/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/","excerpt":"对于图片较多的页面，使用懒加载可以大幅提高页面加载速度，提高用户体验。","text":"对于图片较多的页面，使用懒加载可以大幅提高页面加载速度，提高用户体验。 懒加载的意义（为什么要使用懒加载）对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。当页面图片很多时，页面的加载速度缓慢，几S钟内页面没有加载完成，也许会失去很多的用户。 所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。 原理将页面中的img标签src指向一张小图片或者src为空，然后定义data-src（这个属性可以自定义命名，我才用data-src）属性指向真实的图片。src指向一张默认的图片，否则当src为空时也会向服务器发送一次请求。可以指向loading的地址。 注：图片要指定宽高 1&lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; /&gt; 当载入页面时，先把可视区域内的img标签的data-src属性值负给src，然后监听滚动事件，把用户即将看到的图片加载。这样便实现了懒加载。 代码在写代码前，需要了解各种高度。先看这篇文章scrollTop,offsetTop,scrollLeft,offsetLeft 12345678910111213141516171819202122232425262728&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; img &#123; display: block; margin-bottom: 50px; width: 400px; height: 400px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;default.jpg&quot; data-src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot; alt=&quot;&quot;&gt;&lt;/body&gt; JavaScript12345678910111213141516171819202122&lt;script&gt; var num = document.getElementsByTagName(&#x27;img&#x27;).length; var img = document.getElementsByTagName(&quot;img&quot;); var n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历 lazyload(); //页面载入完毕加载可是区域内的图片 window.onscroll = lazyload; function lazyload() &#123; //监听页面滚动事件 var seeHeight = document.documentElement.clientHeight; //可见区域高度 var scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //滚动条距离顶部高度 for (var i = n; i &lt; num; i++) &#123; if (img[i].offsetTop &lt; seeHeight + scrollTop) &#123; if (img[i].getAttribute(&quot;src&quot;) == &quot;default.jpg&quot;) &#123; img[i].src = img[i].getAttribute(&quot;data-src&quot;); &#125; n = i + 1; &#125; &#125; &#125;&lt;/script&gt; jQuery12345678910111213141516171819202122&lt;script&gt; var n = 0, imgNum = $(&quot;img&quot;).length, img = $(&#x27;img&#x27;); lazyload(); $(window).scroll(lazyload); function lazyload(event) &#123; for (var i = n; i &lt; imgNum; i++) &#123; if (img.eq(i).offset().top &lt; parseInt($(window).height()) + parseInt($(window).scrollTop())) &#123; if (img.eq(i).attr(&quot;src&quot;) == &quot;default.jpg&quot;) &#123; var src = img.eq(i).attr(&quot;data-src&quot;); img.eq(i).attr(&quot;src&quot;, src); n = i + 1; &#125; &#125; &#125; &#125;&lt;/script&gt; 使用节流函数进行性能优化如果直接将函数绑定在scroll事件上，当页面滚动时，函数会被高频触发，这非常影响浏览器的性能。 我想实现限制触发频率，来优化性能。 节流函数：只允许一个函数在N秒内执行一次。下面是一个简单的节流函数： 123456789101112131415161718192021222324252627282930313233// 简单的节流函数//fun 要执行的函数//delay 延迟//time 在time时间内必须执行一次function throttle (fun, delay, time) &#123; let timeout let startTime = new Date() return function () &#123; let context = this let args = Array.prototype.slice.call(arguments) let curTime = new Date() clearTimeout(timeout) if (curTime - startTime &gt;= time) &#123; // 如果达到了规定的触发时间间隔，触发 handler fun.apply(context, args) startTime = curTime &#125; else &#123; // 没达到触发间隔，重新设定定时器 timeout = setTimeout(function () &#123; fun.apply(context, args) &#125;, delay) &#125; &#125;&#125;;// 实际想绑定在 scroll 事件上的 handlerfunction lazyload(event) &#123;&#125;// 采用了节流函数window.addEventListener(&#x27;scroll&#x27;,throttle(lazyload,500,1000)); 使用去抖函数进行性能优化去抖相比较节流函数要稍微简单一点，去抖是让函数延迟执行，而节流比去抖多了一个在一定时间内必须要执行一次。 12345678910111213141516171819202122// debounce函数用来包裹我们的事件function debounce (fn, delay) &#123; // 持久化一个定时器 timer let timer = null // 闭包函数可以访问 timer return function () &#123; // 通过 &#x27;this&#x27; 和 &#x27;arguments&#x27; // 获得函数的作用域和参数 let context = this let args = Array.prototype.slice.call(arguments) // 如果事件被触发，清除 timer 并重新开始计时 clearTimeout(timer) timer = setTimeout(function () &#123; fn.apply(context, args) &#125;, delay) &#125;&#125;// 实际想绑定在 scroll 事件上的 handlerfunction lazyload(event) &#123;&#125;// 采用了去抖函数window.addEventListener(&#x27;scroll&#x27;,throttle(lazyload,500));","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"方案","slug":"方案","permalink":"https://i.jakeyu.top/tags/%E6%96%B9%E6%A1%88/"}]},{"title":"img加载图片失败时，使用默认图片","slug":"img加载图片失败时，使用默认图片","date":"2016-11-26 18:07:52","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/11/26/img加载图片失败时，使用默认图片/","link":"","permalink":"https://i.jakeyu.top/2016/11/26/img%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%E6%97%B6%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%9B%BE%E7%89%87/","excerpt":"","text":"onError属性img标签自带onError属性，当图片加载失败时，触发error事件： 1&lt;img src=&quot;image.png&quot; onError=&#x27;this.src=&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;&#x27; /&gt; jQuery的error事件123$(&#x27;img&#x27;).error(function()&#123; $(this).attr(&#x27;src&#x27;,&quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;);&#125;); jQuery的one绑定使用onerror或者jQuery的error事件时，如果默认图片也发生加载失败，则会形成死循环，最好的办法是使用one绑定事件，只执行一次 123$(&quot;img&quot;).one(&quot;error&quot;, function(e)&#123; $(this).attr(&quot;src&quot;, &quot;http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg&quot;);&#125;); 注： 另外error事件，不支持冒泡，jquery.delegate函数捕捉不到error事件。","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"方案","slug":"方案","permalink":"https://i.jakeyu.top/tags/%E6%96%B9%E6%A1%88/"}]},{"title":"理解this","slug":"理解this","date":"2016-11-21 22:15:57","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/11/21/理解this/","link":"","permalink":"https://i.jakeyu.top/2016/11/21/%E7%90%86%E8%A7%A3this/","excerpt":"","text":"JavaScript中this和其它语言中的不同。在下面这些情况中，分别有不同的指向 函数调用12345function foo() &#123; console.log(this); //window&#125;foo(); 这里this指向全局对象，浏览器中的全局对象为window 方法调用1234567var foo = &#123; method: function() &#123; console.log(this); &#125;&#125;foo.method(); //返回foo 假如我们把这个方法负值给一个变量再调用会怎么样，我们试试： 123456789 var foo = &#123; method: function() &#123; console.log(this); &#125;&#125;foo.method(); //返回foovar abc = foo.method;abc(); //window 是不是很神奇，一会我会说一个简便的理解方法。 构造函数1new foo(); 这种形式我们称之为构造函数，这时this指向新创建的对象 主动设置this12345678function foo(name) &#123; console.log(this);&#125;;function obj() &#123;&#125;;foo.call(this, &#x27;jake&#x27;); //windowfoo.call(obj, &#x27;Jake&#x27;); //obj 当时我们使用call或者apply时，传入的第一个参数即位this 简便理解我们可以将函数调用转化为call的形式，call中第一个参数即位调用的函数前面的部分。 直接调用我们可以将 1foo(); 转化为 1foo.call(); 此时foo前面没有对象，没有给call传入this参数，此时默认为全局对象，即window 方法调用方法调用时，我们可以将 1foo.method(); 转化为 1foo.method.call(foo); method前面的对象为foo，则此时前面的this指向foo对象。","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"移动端头部整理","slug":"移动端头部整理","date":"2016-11-03 09:38:47","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/11/03/移动端头部整理/","link":"","permalink":"https://i.jakeyu.top/2016/11/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%A4%B4%E9%83%A8%E6%95%B4%E7%90%86/","excerpt":"移动端的头部标签和meta","text":"移动端的头部标签和meta 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;!-- iOS 设备 begin --&gt;&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;&lt;!--设置屏幕缩放--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;&lt;!-- 设置苹果工具栏颜色 --&gt;&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;&lt;!-- 避免IE使用兼容模式 --&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge, chrome=1&quot;&gt;&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;&lt;!-- 微软的老式浏览器 --&gt;&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;&lt;!-- uc强制竖屏 --&gt;&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;&lt;!-- QQ强制竖屏 --&gt;&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;&lt;!-- UC强制全屏 --&gt;&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;&lt;!-- QQ强制全屏 --&gt;&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;&lt;!-- UC应用模式 --&gt;&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;&lt;!-- QQ应用模式 --&gt;&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;&lt;!-- windows phone 点击无高光 --&gt;&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;&lt;!-- iOS 图标 begin --&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;&lt;!-- iOS 图标 end --&gt;&lt;!-- iOS 启动画面 begin --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;&lt;!-- iOS 启动画面 end --&gt;&lt;!-- iOS 设备 end --&gt;&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;&lt;!-- Windows 8 磁贴颜色 --&gt;&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;&lt;!-- Windows 8 磁贴图标 --&gt;&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot;/&gt;&lt;!-- 添加 RSS 订阅 --&gt;&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot;/&gt;&lt;!-- 添加 favicon icon --&gt;&lt;title&gt;标题&lt;/title&gt;","author":"Jake","categories":[{"name":"移动端","slug":"移动端","permalink":"https://i.jakeyu.top/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://i.jakeyu.top/tags/HTML/"},{"name":"移动端","slug":"移动端","permalink":"https://i.jakeyu.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]},{"title":"6个字符的JavaScript之旅","slug":"6个字符的JavaScript之旅","date":"2016-10-27 14:59:39","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/10/27/6个字符的JavaScript之旅/","link":"","permalink":"https://i.jakeyu.top/2016/10/27/6%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%9A%84JavaScript%E4%B9%8B%E6%97%85/","excerpt":"","text":"探秘JavaScript中的六个字符 本文转载自：众成翻译译者：小青年链接：http://www.zcfy.cc/article/1370原文：http://jazcash.com/a-javascript-journey-with-only-six-characters/ JavaScript 是一个奇怪而有趣的语言，我们可以写一些疯狂却仍然有效的代码。它试图帮助我们把事情转换到基于我们如何对待他们的特定类型。 如果我们添加一个字符串,JavaScript会假定我们希望为文本形式表示,所以将它转换为一个字符串。如果我们添加一个正负前缀符号,JavaScript会假定我们希望为数值形式表示,如果可能的话,对我们来说并将字符串转换为一个数字。如果我们添加一个否定符号，JavaScript会将将字符串转换为一个布尔值。 我们可以使用Javascript中[,],(,),! and +这六个符号写一些神奇的代码。如果你现在不是在手机，你可以打开浏览器的控制台，你可以将任何代码示例粘贴到控制台，并且代码值为true。 让我们从最基本的开始，要记住一些黄金规则: !后面跟的字符会被转换成布尔值 +后面跟的字符会被转换成数值 []后面跟的字符会被转换成字符串 来看下面的例子： 123![] === false+[] === 0[]+[] === &quot;&quot; 另一件事你应该知道的是,它可以从字符串使用方括号检索特定的字母，像这样： 1&quot;hello&quot;[0] === &quot;h&quot; 还记得可以使多个数字号码通过添加字符串表示在一起,然后把整个表达式转换成一个数字： 1+(&quot;1&quot; + &quot;1&quot;) === 11 我们们继续把一些东西结合在一起得到字母a 12345![] === false![]+[] === &quot;false&quot;+!![] === 1------------------------(![]+[])[+!![]] === &quot;a&quot; // same as &quot;false&quot;[1] 举一反三！ 我们可以通过true 和 false得到相似的字母a,e,f,l,r,s,t,u，那么我们可以从其他地方得到的字母吗？ 我们可以通过一些特别的式子如[][[]]得到undefined，利用我们上面讲到的黄金法则得到另外的字母d,i 和 n。 1`[][[]] + [] === &quot;undefined&quot;` 到目前为止，利用我们已经获得的所有字母,我们可以拼fill, filter 和 find。当然也有一些其他的单词，我们也可以拼写，但这些单词最重要的是,他们都是数组的方法。这意味着他们是数组对象的一部分,可以直接调用数组实例，如：[2,1].sort()。 现在，了解JavaScript的另一件重要的特性是一个对象的属性可以通过点符号.或方括号[]访问。上述数组方法是数组对象本身的属性，我们可以使用方括号代替点符号调用这些方法。 所以[2,1][&quot;sort&quot;]() 等效于 [2,1].sort(). 我们继续看看,当我们试图使用一个数组的方法会发生什么,我们可以使用到目前为止我们拼写的但没有调用的字母。 1[][&quot;fill&quot;] 这会得到function fill() &#123; [native code] &#125;，我们可以把这个方法头作为一个字符串再次使用我们的黄金法则： 1[][&quot;fill&quot;]+[] === &quot;function fill() &#123; [native code] &#125;&quot; 所以现在我们又得到其他的字符：c,o,v,(,),&#123;,[,],&#125;。 随着我们新得到的c和o，我们现在可以形成constructor这个单词。构造函数是一个方法,所有JS对象仅返回自己的构造函数。 到目前为止我们已经处理的对象，我们可以得到它用字符串表示的构造器函数： 12345true[&quot;constructor&quot;] + [] === &quot;function Boolean() &#123; [native code] &#125;&quot; 0[&quot;constructor&quot;] + [] === &quot;function Number() &#123; [native code] &#125;&quot; &quot;&quot;[&quot;constructor&quot;] + [] === &quot;function String() &#123; [native code] &#125;&quot;[][&quot;constructor&quot;] + [] === &quot;function Array() &#123; [native code] &#125;&quot;(&#123;&#125;)[&quot;constructor&quot;] + [] === &quot;function Object() &#123; [native code] &#125;&quot; 通过这些式子，我们可以将下面的字符加入到我们的库中：B,N,S,A,O,m,b,g,y,j。 现在我们可以构造一个我们可以使用方括号的函数”toString”&#96;,我们可以这样调用： 1(10)[&quot;toString&quot;]() === &quot;10&quot; 使用我们的黄金法则，我们已经可以将任何我们想要转换成一个字符串，但是上面这个式子怎么用呢？ 好吧，我告诉你，Number类型的toString方法有一个称为radix(“基数”)的秘密的论点。它可以将数值在转换为一个字符串之前先经过基数换算，像这样： 1234(12)[&quot;toString&quot;](10) === &quot;12&quot; // 十进制(12)[&quot;toString&quot;](2) === &quot;1100&quot; // 二进制(12)[&quot;toString&quot;](8) === &quot;14&quot; // 八进制(12)[&quot;toString&quot;](16) === &quot;c&quot; // 十六进制 但是为什么基数只写到16？最大值是36，包括所有的字符0-9 和 a-z，所以现在我们可以得到任何我们想要的字母数字： 12(10)[&quot;toString&quot;](36) === &quot;a&quot;(35)[&quot;toString&quot;](36) === &quot;z&quot; 太棒了!但是其它符号如标点符号和大写字母呢？我们接着深入探索。 这取决于你的JS执行时，它可能会或可能不会访问特定的预定义的对象或数据。如果你在浏览器中运行它,那么你可以访问一些存在的HTML包装器方法。 例如，bold是一个包装在&lt;&gt;标签中的字符串方法。 1&quot;test&quot;[&quot;bold&quot;]() === &quot;&lt;b&gt;test&lt;/b&gt;&quot; 通过这个我们得到&lt;&gt;和/两个字符。 你可能听说过escape方法，它主要将字符串转换为一个URI友好的格式，可以让简单的浏览器解释。如果我们传递一个空格字符，我们得到的”%20”。 这里有一个工具可以自动将每个字符自动转换。工具地址：http://www.jsfuck.com/源代码地址：https://raw.githubusercontent.com/aemkei/jsfuck/master/jsfuck.js 为什么这几个字符有用？它不是易趣网做的一些不好的事情,不久前允许卖家将执行JS在页面中使用只能使用这些字符，但它是一个相当罕见的攻击向量。有些人说混淆，但事实上，有更好的方法混淆。 最后，希望你会喜欢本次探秘之旅。 资源： https://en.wikipedia.org/wiki/JSFuck https://esolangs.org/wiki/JSFuck http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html https://raw.githubusercontent.com/aemkei/jsfuck/master/jsfuck.js","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"CentOS安装mongodb数据库","slug":"CentOS安装mongodb数据库","date":"2016-10-21 18:40:26","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/10/21/CentOS安装mongodb数据库/","link":"","permalink":"https://i.jakeyu.top/2016/10/21/CentOS%E5%AE%89%E8%A3%85mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"mongodb是非关系数据库，存储json格式，所以特别适合使用js操作数据库。","text":"mongodb是非关系数据库，存储json格式，所以特别适合使用js操作数据库。 安装 mongodbyum 仓库配置 vi &#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo 内容为： [mongodb-org-3.2]name&#x3D;MongoDB Repositorybaseurl&#x3D;https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/gpgcheck&#x3D;0enabled&#x3D;1 安装mongodb: yum install -y mongodb-org 使用mongodb:启动: service mongod start 停止: service mongod stop 重启： service mongod restart 客户端: mongo 配置远程连接添加用户执行 mongouse admin 接着我们创建一个用户，Mongodb在3.0版本时候去除了addUser这个方法，我们需要这样来创建用户 123456789db.createUser( &#123; user: &quot;&lt;username&gt;&quot;, pwd: &quot;&lt;password&gt;&quot;, roles: [ &quot;readWrite&quot;, &quot;dbAdmin&quot; ] &#125;)//&lt;username&gt; 用户名//&lt;password&gt; 密码 配置mongodb.conf vim &#x2F;etc&#x2F;mongod.conf 修改下面配置 #bindIp &#x3D; 127.0.0.1 &#x2F;&#x2F;注释此行 重启mongodb service mongod restart 测试连接打开本地命令 mongo 你的服务器ip地址:27017&#x2F;admin -u &lt;用户&gt; -p &lt;密码&gt; 卸载停止服务 service mongod stop 移除包 yum erase $(rpm -qa | grep mongodb-org) 移除数据和日志文件 rm -r &#x2F;var&#x2F;log&#x2F;mongodbrm -r &#x2F;var&#x2F;lib&#x2F;mongo 关于更多mongodb操作，请查看菜鸟教程","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"CentOS7 + nodejs + nginx + MySQL搭建服务器","slug":"centos+nodejs+nginx+mysql搭建服务器","date":"2016-10-17 19:30:42","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/10/17/centos+nodejs+nginx+mysql搭建服务器/","link":"","permalink":"https://i.jakeyu.top/2016/10/17/centos+nodejs+nginx+mysql%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"最近项目要求，需要一台服务器，阿里和腾讯都不错，我选择了腾讯云，系统为CentOS 7（linux）。记录搭建服务器的过程，方便以后再次搭建是借鉴和给第一次搭建服务器的朋友借鉴之用。","text":"最近项目要求，需要一台服务器，阿里和腾讯都不错，我选择了腾讯云，系统为CentOS 7（linux）。记录搭建服务器的过程，方便以后再次搭建是借鉴和给第一次搭建服务器的朋友借鉴之用。 安装git执行： sudo yum install git 安装nodejs使用EPEL安装EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL&#x2F;CentOS提供他们默认不提供的软件包。先安装epel-release包： sudo yum install epel-release 安装完后，就可以使用yum命令安装nodejs了，安装的一般会是较新的版本，并且会将npm作为依赖包一起安装 sudo yum install nodejs 安装完成后，验证是否正确的安装 node -vv6.9.4 源码安装官网查看最新版本 下载先进入&#x2F;usr&#x2F;src文件夹，这个文件夹通常用来存放软件源代码: cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;wget https://nodejs.org/dist/v4.6.0/node-v4.6.0.tar.gz 版本自己替换 解压 tar zxvf node-v4.6.0.tar.gz 编译安装 cd node-v4.6.0&#x2F;.&#x2F;configure &#x2F;&#x2F; 执行 Node.js 安装包自带的脚本，修改相关的系统配置文件 发现报错了，提示系统中没有安装C编译器，接下来先安装C编译器 安装gcc yum install gcc 安装g++ yum install gcc-c++ 安装gfortran yum install gcc-gfortran 重新执行： 123cd node-v4.6.0/./configure // 执行 Node.js 安装包自带的脚本，修改相关的系统配置文件make //编译 C源代码为 可执行的 Linux程序 好慢啊。。。。。。难道是我买的最低配置的原因么。。。。。。 终于跑完了😂，全程大约十几分钟，所以大家要耐心等待哦。。。。。。 123sudo make install // 安装文件node --version //查看安装node的版本npm -v //查看npm的版本 现在已经安装了Node.js, 可以开始部署应用程序, 首先要使用Node.js的模块管理器npm安装Express middleware 和forever（一个用来确保应用程序启动并且在需要时重启的非常有用的模块）,其中g参数是把express安装到NodeJS的lib目录，d参数表示同时安装依赖模块包： 1npm install -gd express-generator forever 建立测试项目并执行在/home文件夹下执行： 1234express testappcd testappnpm installnpm start 上面，第一条命令是创建express框架通用项目，第三条命令是安装依赖包，第四条是执行。执行： 1cat package.json 第四条命令就相当于执行了node ./bin/www。 这样就运行成功了。但是当我们关闭终端之后，进程就将结束，现在刚安装的forever就派上用场了,forever可以让进程在终端关闭之后继续运行： 1forever start ./bin/www 我们可以使用下面命令查看forever运行的程序： 1forever list 现在我们就可以在浏览器中输入：公网IP + :3000，来访问我们的程序。如果要修改3000端口，我们可以修改./bin/www文件中关于监听3000端口的字段。 停止运行： 1forever stop 0 //0代表前面[0],这是当前进程的ID 停止所有: 1forever stopall 安装NginxHTTP请求是80端口，但是在Linux上非root权限是无法使用1024以下端口的，并且因为安全原因，最好不要使用root权限登录服务器，所以无法直接用node.js程序监听80端口。因此我们需要使用Nginx给node.js做反向代理，将80端口指向应用程序监听的端口(如node.js默认的3000端口)。 添加Nginx仓库1yum install epel-release 下载Nginx1yum install nginx 启用nginx服务1service nginx start 添加开机启动1systemctl enable nginx 修改Nginx配置文件1vim /etc/nginx/nginx.conf //使用lnpm意见安装，Nginx 目录: /usr/local/nginx/ 添加： 123456789101112131415161718192021222324252627282930313233343536373839404142server &#123; listen 80; server_name jakexin.top,www.jakexin.top; #绑定的域名 # 开启gzip gzip on; # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩 gzip_min_length 1k; # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明 gzip_comp_level 2; # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。 gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; # 是否在http header中添加Vary: Accept-Encoding，建议开启 gzip_vary on; # 禁用IE 6 gzip gzip_disable &quot;MSIE [1-6]\\.&quot;; #配置缓存 location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ &#123; access_log off; expires 30d; &#125; location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ &#123; access_log off; expires 24h; &#125; location ~* ^.+\\.(html|htm)$ &#123; expires 1h; &#125; location / &#123; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_set_header Connection &quot;&quot;; proxy_http_version 1.1; proxy_pass http://127.0.0.1:3000; #对应该的Nodejs程序端口 &#125; access_log /mnt/log/www/jakexin_access.log; #网站访问日志&#125; 测试配置文件是否能够正确运行1nginx -t 这样就是配置成功 重启nginx1service nginx restart 现在直接在浏览器中输入我们配置的域名就可以访问我们的项目了。 安装MySQL查看可用版本 1yum list | grep mysql 在centOS 7中不能使用yum -y install mysql mysql-server mysql-devel安装，这样会默认安装mysql的分支mariadb。 MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。 正确的安装方法众所周知，Linux系统自带的repo是不会自动更新每个软件的最新版本（基本都是比较靠后的稳定版），所以无法通过yum方式安装MySQL的高级版本。所以我们需要先安装带有当前可用的mysql5系列社区版资源的rpm包。 12rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmyum repolist enabled | grep &quot;mysql.*-community.*&quot; //查看当前可用资源 从上面的列表可以看出， mysql56-community&#x2F;x86_64 和 MySQL 5.6 Community Server 可以使用。 因此，我们就可以直接用yum方式安装了MySQL5.6版本了。 1yum -y install mysql-community-server MySQL基础配置123systemctl enable mysqld //添加到开机启动systemctl start mysqld //启用进程mysql_secure_installation 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MySQL to secure it, we&#x27;ll need the currentpassword for the root user. If you&#x27;ve just installed MySQL, andyou haven&#x27;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MySQLroot user without the proper authorisation.Set root password? [Y/n] y [设置root用户密码]New password: Re-enter new password: Password updated successfully!Reloading privilege tables.. ... Success!By default, a MySQL installation has an anonymous user, allowing anyoneto log into MySQL without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] y [删除匿名用户] ... Success!Normally, root should only be allowed to connect from &#x27;localhost&#x27;. Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] y [禁止root远程登录] ... Success!By default, MySQL comes with a database named &#x27;test&#x27; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y [删除test数据库] - Dropping test database...ERROR 1008 (HY000) at line 1: Can&#x27;t drop database &#x27;test&#x27;; database doesn&#x27;t exist ... Failed! Not critical, keep moving... - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y [刷新权限] ... Success! All done! If you&#x27;ve completed all of the above steps, your MySQLinstallation should now be secure.Thanks for using MySQL! Cleaning up... 操作MySQL配置远程连接1234grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option; ##添加授权的用户 ##root是用户名，%代表任意主机，&#x27;123456&#x27;指定的登录密码（这个和本地的root密码可以设置不同的，互不影响）flush privileges; //刷新数据库 检测是否开启3306端口 netstat -tunlp 看到3306端口被开启之后，我们就可以使用本地客户端远程访问数据库了 数据库备份与还原备份连接数据库 1mysql -u root -p 查看数据库 1show databases; 退出数据库进行备份 1mysqldump -u root -p rap_db &gt; rap.sql 备份完成 还原数据库1mysqldump -u root -p rap_db &lt; rap.sql","author":"Jake","categories":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"JS继承方法","slug":"JS继承方法","date":"2016-09-09 01:19:42","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/09/09/JS继承方法/","link":"","permalink":"https://i.jakeyu.top/2016/09/09/JS%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95/","excerpt":"","text":"组合继承组合继承，指将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后思路使用用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承。这样，即通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。 下面来看一个例子123456789101112131415161718192021222324252627282930313233function SuperType(name) &#123; this.name = name; this.color = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;];&#125;;//SuperType.prototype.sayName = function() &#123; console.log(this.name);&#125;;//function SubType(name, age) &#123; //继承属性 SuperType.call(this, name); // 第二次调用SuperType// this.age = age;&#125;;//继承方法SubType.prototype = new SuperType(); // 第一次调用SuperTypeconsole.log(SubType.prototype.constructor); //输出SuperType函数的源码,即此时SubType.prototype.constructor指向SuperType函数SubType.prototype.constructor = SubType; //将SubType.prototype.constructor指针指回SubType函数SubType.prototype.sayAge = function() &#123; console.log(this.age);&#125;;//var instance1 = new SubType(&#x27;Jake&#x27;, 20)instance1.color.push(&#x27;black&#x27;);console.log(instance1.color); //&#x27;red,blue,green,black&#x27;instance1.sayName(); //&#x27;Jake&#x27;instance1.sayAge(); //20//var instance2 = new SubType(&#x27;Greg&#x27;, 21);console.log(instance2.color); //&#x27;red,blue,green&#x27;instance2.sayName(); //&#x27;Greg&#x27;;instance2.sayAge(); //21 观察输出结果，便可以发现：两个SubType实例（instance1和instance2）既分别有自己的属性，又可以使用相同的方法。 优点组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，所以是JS中最常用的继承模式。而且，instanceof和isPrototypeOf()也能够用于识别基于组合继承创建的对象。 缺点 调用两次SuperType构造函数 在SubType.prototype上创建了不必要的属性 寄生组合继承寄生组合继承 1234567891011121314151617181920212223242526function SuperType (name) &#123; this.name = name this.colors = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;]&#125;SuperType.prototype.sayName = function () &#123; console.log(this.name)&#125;function SubType (name, age) &#123; SuperType.call(this, name) // 通过构造函数继承实例属性 this.age = age&#125;SubType.prototype = Object.create(SuperType.prototype) //继承父类共享方法SubType.prototype.constructor = SubType //将SubType.prototype.constructor指针指回SubType函数SubType.prototype.sayAge = function () &#123; console.log(this.age)&#125;let obj = new SubType(&#x27;jake&#x27;, 22)obj.sayName() // jakeobj.sayAge() // 22console.log(obj instanceof SubType) // trueconsole.log(obj instanceof SuperType) // true 优点 寄生组合继承只调用了一次SuperType，所以更高效 避免了在SubType.prototype上创建了不必要的属性 下面说说原型链和构造函数的缺点原型链缺点：当原型链中包含引用类型值时，原型属性会被所有实例共享； 下面看一个例子1234567891011121314function SuperType() &#123; this.color = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;];&#125;//function SubType() &#123;&#125;;//SubType.prototype = new SuperType(); //继承了SuperType//var instance1 = new SubType();instance1.color.push(&#x27;black&#x27;);console.log(instance1.color); //&#x27;red,blue,green,black&#x27;//var instance2 = new SubType();console.log(instance2.color); //&#x27;red,blue,green,black&#x27; 借用构造函数缺点：如果仅仅使用构造函数，方法都在构造函数中定义，因此函数就无法实现复用了。而且，在超类型的原型中定义的方法，对于子类型而言也是不可见的。","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"scrollTop等元素距离","slug":"scrollTop-offsetTop-scrollLeft-offsetLeft","date":"2016-09-04 21:31:41","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/09/04/scrollTop-offsetTop-scrollLeft-offsetLeft/","link":"","permalink":"https://i.jakeyu.top/2016/09/04/scrollTop-offsetTop-scrollLeft-offsetLeft/","excerpt":"关于scrollTop,offsetTop,scrollLeft,offsetLeft用法介绍","text":"关于scrollTop,offsetTop,scrollLeft,offsetLeft用法介绍 12345678910111213页可见区域宽： document.body.clientWidth;网页可见区域高： document.body.clientHeight;网页可见区域宽： document.body.offsetWidth (包括边线的宽);网页可见区域高： document.body.offsetHeight (包括边线的宽);网页正文全文宽： document.body.scrollWidth;网页正文全文高： document.body.scrollHeight;网页被卷去的高： document.body.scrollTop;网页被卷去的左： document.body.scrollLeft;网页正文部分上： window.screenTop;网页正文部分左： window.screenLeft;屏幕分辨率的高： window.screen.height;屏幕分辨率的宽： window.screen.width;屏幕可用工作区高度： window.screen.availHeight; &amp;nbsp;&amp;nbsp;offsetTop, offsetLeft：只读属性。要确定的这两个属性的值，首先得确定元素的offsetParent。offsetParent指的是距该元素最近的position不为static的祖先元素，如果没有则指向body元素。确定了offsetParent，offsetLeft指的是元素左侧偏移offsetParent的距离，同理offsetTop指的是上侧偏移的距离。&amp;nbsp;&amp;nbsp;offsetHeight, offsetWidth：只读属性。这两个属性返回的是元素的高度或宽度，包括元素的边框、内边距和滚动条。返回值是一个经过四舍五入的整数。如下图： &amp;nbsp;&amp;nbsp;scrollHeight, scrollWidth：只读属性。返回元素内容的整体尺寸，包括元素看不见的部分（需要滚动才能看见的）。返回值包括padding，但不包括margin和border。如下图： &amp;nbsp;&amp;nbsp;scrollTop, scrollLeft：图中已经表示的很明白了。如果元素不能被滚动，则为0。 &amp;nbsp;&amp;nbsp;window.innerWidth, window.innerHeight：只读。视口（viewport）的尺寸，包含滚动条 &amp;nbsp;&amp;nbsp;clientHeight, clientWidth：包括padding，但不包括border, margin和滚动条。如下图 &amp;nbsp;&amp;nbsp;Element.getBoundingClientRect()：只读，返回浮点值。这个方法非常有用，常用于确定元素相对于视口的位置。该方法会返回一个DOMRect对象，包含left, top, width, height, bottom, right六个属性： &amp;nbsp;&amp;nbsp;left, right, top, bottom：都是元素（不包括margin）相对于视口的原点（视口的上边界和左边界）的距离。 &amp;nbsp;&amp;nbsp;height, width：元素的整体尺寸，包括被滚动隐藏的部分；padding和border参与计算。另外，heigth&#x3D;bottom-top, width&#x3D;right-left。 jQuery常用监听页面滚动当前滚动的地方的窗口顶端到整个页面顶端的距离：1var winPos = $(window).scrollTop(); 获取指定元素的页面位置1$(val).offset().top; 对页面滚动条滚动的监听：要放在页面加载的时候1$(window).scroll(function(event)&#123;&#125;); 设置滚动条到指定位置1$(window).scrollTop(offset)","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"mockjs让前端开发独立于后端","slug":"mockjs让前端开发不依赖后端","date":"2016-08-19 10:36:21","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/08/19/mockjs让前端开发不依赖后端/","link":"","permalink":"https://i.jakeyu.top/2016/08/19/mockjs%E8%AE%A9%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%8D%E4%BE%9D%E8%B5%96%E5%90%8E%E7%AB%AF/","excerpt":"mock.js 可以模拟ajax数据，拦截ajax请求，返回模拟数据，无需后端返回就可以测试前端程序 mockjs官网","text":"mock.js 可以模拟ajax数据，拦截ajax请求，返回模拟数据，无需后端返回就可以测试前端程序 mockjs官网 首先要感谢凯伦Kieran大神的帮助 话不多说直接进入主题 引入文件首先在head头中引入我们需要的mockjs文件 1&lt;script src=&quot;http://mockjs.com/dist/mock.js&quot;&gt;&lt;/script&gt; 定义数据在ajax请求之前，用mack定义返回数据 1234Mock.mock(&#x27;http://laoyu&#x27;, &#123; &quot;errorcode&quot;: 0,//0表示成功，1表示错误 &quot;message&quot;: &quot;xx信息不完整&quot;, //弹出错误信息&#125;); 创建请求在ajax中,open()的url要与mock中的相同，比如我这里是http://laoyu,那么 1XHR.open（&quot;post/get&quot;,&quot;http://laoyu&quot;,true/false） 测试好了，说到这里，我们进行测试一下 12345678910111213141516171819202122232425&lt;script&gt;//调用mock方法模拟数据Mock.mock(&#x27;http://laoyu&#x27;, &#123; &quot;errorcode&quot;: 0,//0表示成功，1表示错误 &quot;message&quot;: &quot;xx信息不完整&quot;, //弹出错误信息&#125;);//使用ajax进行测试var xhr = new XMLHttpRequest();xhr.open(&quot;post&quot;,&quot;http://laoyu&quot;,true);xhr.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);xhr.send(null);xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4)&#123; if((xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) || xhr.status== 304)&#123; var data = JSON.parse(xhr.responseText); //因为reponseText返回的是字符串，将字符串转换成我们想要的JSON数据，这样就可以调用了 console.log(data); //在控制台中打印出返回的内容 &#125;else&#123; alert(&quot;Request was unsuccessful: &quot; + xhr.status); &#125; &#125;&#125;&lt;/script&gt; 看到没，返回了我们使用mock模拟的数据，这样就可以无需后台，直接进行自己的测试了 xhr.readyState的五种状态0 － （未初始化）还没有调用open()方法 1 － （服务器连接已经建立）已调用open()方法，正在发送请求 2 － （请求已接收）send()方法执行完成，已经接收到全部响应内容 3 － （请求处理中）正在解析响应内容 4 － （请求已完成）响应内容解析完成，可以在客户端调用了","author":"Jake","categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"理解JavaScript闭包","slug":"理解JavaScript闭包","date":"2016-07-07 01:09:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/07/07/理解JavaScript闭包/","link":"","permalink":"https://i.jakeyu.top/2016/07/07/%E7%90%86%E8%A7%A3JavaScript%E9%97%AD%E5%8C%85/","excerpt":"理解JavaScript闭包","text":"理解JavaScript闭包 变量的作用域要理解闭包，必须先理解JavaScript特殊变量的作用域 变量的作用域无非就是两种：全局变量、局部变量。 JavaScript语言的特殊之处，就在于函数内部可以直接读取全局变量。 12345var n = 10;function f1()&#123; alert(n);&#125;;f1(); //10 在函数的外部无法读取函数内部的局部变量 12345function f1()&#123; var n = 10;&#125;;f1();alert(n); //error:n is not defined 注意：在函数内部声明变量的时候，一定要用var。如果不用的话，会声明一个全局变量 12345function f1()&#123; n = 10;&#125;;f1();alert(n); //10 如何从外部读取局部变量？有时候，我们需要得到函数内部的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现，那就是在函数内部定义一个函数 123456function f1()&#123; var n = 10; function f2()&#123; alert(n); //10 &#125;&#125; 在上面的代码中，函数f2就被包括在函数f1内部，这是f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是JavaScript语言特有的“链式作用域”结构，子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。 既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量 123456789function f1()&#123; var n = 10; function f2()&#123; alert(n); &#125; return f2;&#125;var result = f1();result(); //10 闭包的概念上面所讲的f2函数，就是闭包 闭包就是能够读取其它函数内部局部变量的函数。 由于在JavaScript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。 所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。 闭包的用途闭包可以用在许多地方。它的最大用处有两个：一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保存在内存中 什么意思呢？请看下面的例子 12345678910111213function f1()&#123; var n = 10; add = function()&#123;n+=1;&#125; function f2()&#123; alert(n); &#125; return f2;&#125; var result = f1();result(); //10add();result(); //11 这段代码中，result实际上就是闭包f2函数。它一共运行两次，第一次值是10，第二次值是11。这说明函数f1中的局部变量n并没有在f1被调用后被删除，说明n一直保存在内存中 原因就在于f1是f2的父函数，而f2被赋予了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制回收。 这段代码中另一个值得注意的地方，就是“nAdd&#x3D;function(){n+&#x3D;1}”这一行，首先在nAdd前面没有使用var关键字，因此 nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 for循环中的闭包1234567for (var i = 1; i &lt;= 5; i++) &#123; (function(i) &#123; setTimeout( function timer() &#123; console.log(j); &#125;,i*1000 ); //这一行将i*1000改为j*1000也行，并不影响 &#125;)(i);&#125; 或者下面写法 123456for (var i = 1; i &lt;= 5; i++) &#123; let j = i; setTimeout(function timer() &#123; console.log(j); &#125;,j*1000);&#125; 如果你能理解下面代码的运行结果，应该就理解闭包的运行机制了1234567891011var name = &quot;Jake&quot;;obj = &#123; name:&quot;laoyu&quot;, getName: function()&#123; alert(this.name); return function()&#123; alert(this.name); &#125; &#125;&#125;obj.getName()(); //laoyu jake","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"JavaScript实现继承的几种方式","slug":"JavaScript实现继承的几种方式","date":"2016-06-20 16:26:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/06/20/JavaScript实现继承的几种方式/","link":"","permalink":"https://i.jakeyu.top/2016/06/20/JavaScript%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"原型链继承：123456789101112var Base = function() &#123; this.level = 1; this.name = &quot;base&quot;; this.toString = function() &#123; return &quot;base&quot;; &#125;; &#125;; Base.CONSTANT = &quot;constant&quot;; var Sub = function() &#123;&#125;;Sub.prototype = new Base(); Sub.prototype.name = &quot;sub&quot;; 优点：从instanceof关键字来看，实例既是父类的实例，又是子类的实例，看起来似乎是最纯粹的继承。缺点：子类区别于父类的属性和方法，必须在Sub.prototype = new Base()这样的语句之后分别执行，无法被包装到Sub这个构造器里面去。例如：Sub.prototype.name = &quot;sub&quot;无法实现多重继承。 构造继承：12345678910111213var Base = function() &#123; this.level = 1; this.name = &quot;base&quot;; this.toString = function() &#123; return &quot;base&quot;; &#125;; &#125;; Base.CONSTANT = &quot;constant&quot;; var Sub = function() &#123; Base.call(this); this.name = &quot;sub&quot;; &#125;; 优点：可以实现多重继承，可以把子类特有的属性设置放在构造器内部。缺点：使用instanceof发现，对象不是父类的实例。 实例继承：1234567891011121314var Base = function() &#123; this.level = 1; this.name = &quot;base&quot;; this.toString = function() &#123; return &quot;base&quot;; &#125;; &#125;; Base.CONSTANT = &quot;constant&quot;; var Sub = function() &#123; var instance = new Base(); instance.name = &quot;sub&quot;; return instance; &#125;; 优点：是父类的对象，并且使用new构造对象和不使用new构造对象，都可以获得相同的效果。缺点：生成的对象实质仅仅是父类的实例，并非子类的对象；不支持多继承。 拷贝继承：123456789101112131415var Base = function() &#123; this.level = 1; this.name = &quot;base&quot;; this.toString = function() &#123; return &quot;base&quot;; &#125;; &#125;; Base.CONSTANT = &quot;constant&quot;; var Sub = function() &#123; var base = new Base(); for(var i in base) Sub.prototype[i] = base[i]; Sub.prototype[&quot;name&quot;] = &quot;sub&quot;; &#125;; 优点：支持多继承。缺点：效率较低；无法获取父类不可枚举的方法。 1234567891011121314151617181920 var Scope = function() &#123; this.$clone = function() &#123; var f = function() &#123;&#125;; //创建一个新的构造函数 f.prototype = this; //将它的原型指向 当前的这个Scope 实例 return new f(); //返回 新创建的这个对象的实例 &#125;&#125;;var scopeA = new Scope();scopeA.title = &#x27;My title&#x27;;var scopeB = scopeA.$clone();//实例有$clone方法用创建一个对象克隆，表现如下console.log(scopeB.title === &#x27;My title&#x27;); //输出truescopeA.title = &#x27;Home title&#x27;;console.log(scopeB.title === &#x27;Home title&#x27;); //输出true//但是一旦scopeB主动修改它的属性，scopeA并不受影响scopeB.title = &#x27;scopeB title&#x27;;console.log(scopeA.title === &#x27;Home title&#x27;) //输出trueconsole.log(scopeB.title) //输出 scopeB title 这几种形式各有特点，仅就我提供的代码而言，满足下面的表格： instanceof父类 instanceof子类 子类constructor 不可枚举方法的继承 多继承可实现 原型链继承 TRUE TRUE FALSE TRUE FALSE 构造继承 FALSE TRUE TRUE TRUE TRUE 实例继承 TRUE FALSE FALSE TRUE FALSE 拷贝继承 FALSE TRUE TRUE FALSE TRUE 补充，如果我们不需要类继承，只需要对象继承，对于支持 ECMAScript 5 的浏览器来说，还可以用Object.create方法来实现：1234567891011var Base = function() &#123; this.level = 1; this.name = &quot;base&quot;; this.toString = function() &#123; return &quot;base&quot;; &#125;; &#125;; Base.CONSTANT = &quot;constant&quot;; var sub = Object.create(new Base()); sub.name = &quot;sub&quot;; 转载自：http://raychase.iteye.com/blog/1337415","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"多行文本溢出显示省略号","slug":"多行文本溢出显示省略号","date":"2016-05-27 12:50:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/27/多行文本溢出显示省略号/","link":"","permalink":"https://i.jakeyu.top/2016/05/27/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/","excerpt":"大家都知道text-overflow:ellipses属性用来实现单行文本的溢出显示省略号(…)。当然部分浏览器还需要加width属性 123overflow: hidden;text-overflow: ellipsis;white-space: nowrap; 但这个属性并不支持多行文本溢出显示省略号，下面根据应用场景介绍几个方法来实现多行溢出显示省略号的效果","text":"大家都知道text-overflow:ellipses属性用来实现单行文本的溢出显示省略号(…)。当然部分浏览器还需要加width属性 123overflow: hidden;text-overflow: ellipsis;white-space: nowrap; 但这个属性并不支持多行文本溢出显示省略号，下面根据应用场景介绍几个方法来实现多行溢出显示省略号的效果 WebKit浏览器或移动端的页面在WebKit浏览器或移动端(绝大部分是WebKit内核的浏览器)的页面实现比较简单，可以直接使用WebKit的CSS扩展属性(Webkit是私有属性)-webkit-line-clamp;注意：这是一个不规范属性(unsupport WebKit property)，它没有出现在CSS规范草案中。-webkit-line-clamp用来限制在一个块元素显示文本的行数。为了实现该效果，它需要组合其他的Webkit属性。常见结合属性：1、display:-webkit-box必须结合的属性，将对象作为弹性伸缩盒子模型显示。2、-webkit-box-orient必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式。3、text-overflow:ellipsis，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 12345overflow : hidden;text-overflow: ellipsis;display: -webkit-box;-webkit-line-clamp: 2;-webkit-box-orient: vertical; 遇到 autoprefixer 之后 -webkit-box-orient 消失的情况，可以使用: 123/*! autoprefixer: off */-webkit-box-orient: vertical;/* autoprefixer: on */ 这个属性比较合适WebKit浏览器或移动端(绝大部分是WebKit内核的)。 具体例子可以查看http://www.css88.com/webkit/-webkit-line-clamp/ 跨浏览器兼容的方案比较靠谱简单的做法就是设置相对定位的容器高度，用包含省略号(…)的元素模拟实现； 例如： 12345678910111213141516p &#123; position:relative; line-height:1.4em; /* 3 times the line-height to show 3 lines */ height:4.2em; overflow:hidden;&#125;p::after &#123; content:&quot;...&quot;; font-weight:bold; position:absolute; bottom:0; right:0; padding:0 20px 1px 45px; background:url(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;&#125; 看demo： See the Pen 多行文本溢出省略号demo by Jake (@JakeLaoyu) on CodePen. 这里注意几点： 1、height 高度正好是line-height的3倍； 2、结束的省略号用了半透明的png做了减淡的效果，或者设置背景颜色 3、IE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用&lt;span class=&quot;line-clamp&quot;&gt;...&lt;/span&gt;去模拟； 4、要支持IE8，需要将::after替换成:after JavaScript方案用js也可以根据上面的思路气模拟，实现也很简单，推荐几个做类似工作的成熟小工具： Clamp.js下载及文档地址：Clamp.js 使用也非常简单： 12var module = document.getElementById(&quot;clamp-this-module&quot;);$clamp(module, &#123;clamp: 3&#125;); DEMO: See the Pen 多行文本溢出省略号demo-1 by Jake (@JakeLaoyu) on CodePen. jQuery插件-jQuery.dotdotdot这个使用起来也很方便： 12345$(document).ready(function() &#123; $(&quot;#wrapper&quot;).dotdotdot(&#123; // configuration goes here &#125;);&#125;); 下载及详细文档地址： jQuery.dotdotdot dotdotdot 参考： line-clamp_for_non_webkit-based_browsers line-clampin","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"},{"name":"HTML","slug":"HTML","permalink":"https://i.jakeyu.top/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"一些常用时间处理方法","slug":"一些常用时间处理方法","date":"2016-05-24 10:07:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/24/一些常用时间处理方法/","link":"","permalink":"https://i.jakeyu.top/2016/05/24/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/","excerpt":"常用时间处理方法","text":"常用时间处理方法 var date &#x3D; new Date(); &#x2F;&#x2F;获取当前时间 关于当前日期的一些操作1234567891011date.getMonth() + 1; //月份date.getDate(); //日date.getHours(); //小时date.getMinutes(); //分date.getSeconds();//秒Math.floor((date.getMonth() + 3) / 3); //季度date.getMilliseconds(); //毫秒date.getFullYear(); //获取完整的年份(4位,1970-????)date.getDay(); //获取当前星期(0-6,0代表星期天)date.toLocaleDateString(); //获取当前日期 (y/M/d)date.toLocaleString(); //获取日期与时间 时间戳转换将时间戳转换成日期1var date = new Date(时间戳); //获取一个时间对象 将日期转换为时间戳1234567891011var time = &#x27;2018-07-13 18:14:44:123&#x27;;var date = new Date(time);// 精确到毫秒var timeParse = +date;// 精确到毫秒var timeParse = date.getTime();// 精确到毫秒var timeParse = date.valueOf();// 精确到秒var timeParse = Date.parse(date); 若要显示:当前日期加时间(如:2009-06-12 12:00)12345678910111213141516171819202122232425262728function CurentTime() &#123; var now = new Date(); //获取当前时间 var year = now.getFullYear(); //年 var month = now.getMonth() + 1; //月 var day = now.getDate(); //日 var hh = now.getHours(); //时 var mm = now.getMinutes(); //分 var clock = year + &quot;-&quot;; if(month &lt; 10) clock += &quot;0&quot;; clock += month + &quot;-&quot;; if(day &lt; 10) clock += &quot;0&quot;; clock += day + &quot; &quot;; if(hh &lt; 10) clock += &quot;0&quot;; clock += hh + &quot;:&quot;; if (mm &lt; 10) clock += &#x27;0&#x27;; clock += mm; return(clock);&#125; 一个通用转换时间格式的函数1234567891011121314151617181920212223242526272829303132333435function dateConvert(date, format) &#123; date = parseInt(date); var Udate = new Date(date); var Y = Udate.getFullYear(), M = (Udate.getMonth() + 1) &lt; 10 ? &quot;0&quot; + (Udate.getMonth() + 1) : (Udate.getMonth() + 1), D = Udate.getDate() &lt; 10 ? &quot;0&quot; + Udate.getDate() : Udate.getDate(), h = Udate.getHours(), m = Udate.getMinutes(), s = Udate.getSeconds(); if (!format) &#123; format = &quot;Y/M/D h:m:s&quot;; &#125; if (format.indexOf(&quot;Y&quot;) &gt;= 0) &#123; format = format.replace(&quot;Y&quot;, Y); &#125; if (format.indexOf(&quot;M&quot;) &gt;= 0) &#123; format = format.replace(&quot;M&quot;, M); &#125; if (format.indexOf(&quot;D&quot;) &gt;= 0) &#123; format = format.replace(&quot;D&quot;, D); &#125; if (format.indexOf(&quot;h&quot;) &gt;= 0) &#123; format = format.replace(&quot;h&quot;, h); &#125; if (format.indexOf(&quot;m&quot;) &gt;= 0) &#123; format = format.replace(&quot;m&quot;, m); &#125; if (format.indexOf(&quot;s&quot;) &gt;= 0) &#123; format = format.replace(&quot;s&quot;, s); &#125; return format;&#125;;","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"css实现三角形","slug":"css实现三角形","date":"2016-05-19 13:43:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/19/css实现三角形/","link":"","permalink":"https://i.jakeyu.top/2016/05/19/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/","excerpt":"css实现三角形","text":"css实现三角形 创建一个&lt;div&gt;标签12&lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt;//把div的width，height都设置为0，然后使用border属性 下面是针对这个div创建的css向上的箭头1234567.triangle&#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red;&#125; 向下的箭头1234567.triangle&#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid red;&#125; 向左的箭头1234567.triangle&#123; width: 0; height: 0; border-top: 50px solid transparent; border-bottom: 50px solid transparent; border-right: 100px solid red;&#125; 向右的箭头1234567.triangle&#123; width: 0; height: 0; border-top: 50px solid transparent; border-bottom: 50px solid transparent; border-left: 100px solid red;&#125; 平分一个正方形12345678.triangle&#123; width: 0; height: 0; border-right: 50px solid blue; border-left: 50px solid yellow; border-top: 50px solid green; border-bottom: 50px solid red;&#125;","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"JavaScript产生随机数","slug":"JavaScript产生随机数","date":"2016-05-18 21:53:29","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/18/JavaScript产生随机数/","link":"","permalink":"https://i.jakeyu.top/2016/05/18/JavaScript%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/","excerpt":"JS产生随机数","text":"JS产生随机数 123456789101112131415161.Math.random(); 结果为0-1间的一个随机数(包括0,不包括1)2.Math.floor(num); 参数num为一个数值，函数结果为num的整数部分。3.Math.round(num); 参数num为一个数值，函数结果为num四舍五入后的整数。Math：数学对象，提供对数据的数学计算。Math.random(); 返回0和1间(包括0,不包括1)的一个随机数。Math.ceil(n); 返回大于等于n的最小整数。用Math.ceil(Math.random()*10);时，主要获取1到10的随机整数，取0的几率极小。Math.round(n); 返回n四舍五入后整数的值。用Math.round(Math.random());可均衡获取0到1的随机整数。用Math.round(Math.random()*10);时，可基本均衡获取0到10的随机整数，其中获取最小值0和最大值10 的几率少一半。Math.floor(n); 返回小于等于n的最大整数。用Math.floor(Math.random()*10);时，可均衡获取0到9的随机整数。 示例：12345678 function GetRandomNum(Min,Max)&#123; var Range = Max - Min; var Rand = Math.random(); return(Min + Math.round(Rand * Range)); &#125; var num = GetRandomNum(10,100); alert(num);","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"设置居中的几种方式","slug":"设置居中的几种方式","date":"2016-05-18 21:41:08","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/18/设置居中的几种方式/","link":"","permalink":"https://i.jakeyu.top/2016/05/18/%E8%AE%BE%E7%BD%AE%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"设置居中的几种方式","text":"设置居中的几种方式 普通水平居中1234div&#123; width:200px; margin:0 auto; &#125; 使用尾类垂直居中12345&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;/div&gt;&lt;/div&gt; 12345678910111213141516171819.wrap &#123; height: 500px; background: red;&#125; .content &#123; width: 100px; height: 100px; background: blue; display: inline-block; vertical-align: middle;&#125; .wrap:after &#123; content: &#x27;&#x27;; display: inline-block; height: 100%; vertical-align: middle;&#125; 使用translate居中这种方式父元素一定要有宽度和高度，top继承自父元素。 如果只想设置水平居中或者垂直居中，可以单独设置translateX&#x2F;translateY。 12345678910div&#123; width: 100px; height: 100px; background: red; //方便查看效果 position: relateive; top: 50%; left: 50%; transform: translate(-50%,-50%);&#125; 浮动元素居中 确定容器的宽高 宽500 高 300 的层 设置层的外边距 12345678.div &#123; width:500px ; height:300px;//高度可以不设 margin: -150px 0 0 -250px; position:relative; //相对定位 background-color:pink; //方便看效果 left:50%; top:50%;&#125; 绝对定位div居中123456789101112div&#123; position: absolute; width: 100px; height: 100px; margin: auto; top: 0; left: 0; bottom: 0; right: 0; background: red;&#125; 字体图标在div中居中123&lt;div&gt; &lt;i class=&quot;fa fa-plus fa-5x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/div&gt; 12345678910div&#123; width:200px; height:200px; line-height:200px; text-align:center;&#125;i&#123; vertical-align: middle;&#125;","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"微信页面监听摇一摇事件，并伴有音效","slug":"微信页面监听摇一摇事件，并伴有音效","date":"2016-05-07 15:41:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/07/微信页面监听摇一摇事件，并伴有音效/","link":"","permalink":"https://i.jakeyu.top/2016/05/07/%E5%BE%AE%E4%BF%A1%E9%A1%B5%E9%9D%A2%E7%9B%91%E5%90%AC%E6%91%87%E4%B8%80%E6%91%87%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%BC%B4%E6%9C%89%E9%9F%B3%E6%95%88/","excerpt":"最近要写一个微信网页，需要监听手机摇动事件，并且伴随有声音 在HTML5，devicemotion事件deviceorientation特性的运动传感器的封装时间装置，你可以通过改变运动时间获取设备的状态，加速和其他数据（有另一个角度deviceorientation事件提供设备，定位等信息）。","text":"最近要写一个微信网页，需要监听手机摇动事件，并且伴随有声音 在HTML5，devicemotion事件deviceorientation特性的运动传感器的封装时间装置，你可以通过改变运动时间获取设备的状态，加速和其他数据（有另一个角度deviceorientation事件提供设备，定位等信息）。 而通过DeviceMotion对设备运动状态的判断，则可以帮助我们在网页上就实现“摇一摇”的交互效果。 把监听事件绑定给 deviceMotionHandler 123456789101112131415if (window.DeviceMotionEvent) &#123; window.addEventListener(&#x27;devicemotion&#x27;, deviceMotionHandler, false);&#125; else &#123; alert(&#x27;本设备不支持devicemotion事件&#x27;);&#125;获取设备加速度信息 accelerationIncludingGravityfunction deviceMotionHandler(eventData) &#123; var acceleration = eventData.accelerationIncludingGravity, x, y, z; x = acceleration.x; y = acceleration.y; z = acceleration.z; document.getElementById(&quot;status&quot;).innerHTML = &quot;x:&quot;+x+&quot;&lt;br /&gt;y:&quot;+y+&quot;&lt;br /&gt;z:&quot;+z;&#125; “摇一摇”的动作既“一定时间内设备了一定距离”，因此通过监听上一步获取到的x, y, z 值在一定时间范围内 的变化率，即可进行设备是否有进行晃动的判断。而为了防止正常移动的误判，需要给该变化率设置一个合适的临界 值。 12345678910111213141516171819202122232425262728293031var SHAKE_THRESHOLD = 800;var last_update = 0;var x = y = z = last_x = last_y = last_z = 0;if (window.DeviceMotionEvent) &#123; window.addEventListener(&#x27;devicemotion&#x27;, deviceMotionHandler, false);&#125; else &#123;alert(&#x27;本设备不支持devicemotion事件&#x27;);&#125;function deviceMotionHandler(eventData) &#123; var acceleration = eventData.accelerationIncludingGravity; var curTime = new Date().getTime(); if ((curTime - last_update) &gt; 100) &#123; var diffTime = curTime - last_update; last_update = curTime; x = acceleration.x; y = acceleration.y; z = acceleration.z; var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000; var status = document.getElementById(&quot;status&quot;); if (speed &gt; SHAKE_THRESHOLD) &#123; doResult(); &#125; last_x = x; last_y = y; last_z = z; &#125;&#125; 100毫秒进行一次位置判断，若前后x, y, z间的差值的绝对值和时间比率超过了预设的阈值，则判断设备进行 了摇晃操作。 下面是我改写的代码1&lt;audio style=&quot;display: none;&quot; src=&quot;http://xunlei.sc.chinaz.com/files/download/sound1/201410/5018.mp3&quot; id=&quot;musicBox&quot; preload=&quot;preload&quot; controls&gt;&lt;/audio&gt; 12345678910111213141516171819202122232425262728293031323334353637&lt;script&gt; var SHAKE_THRESHOLD = 3000; var last_update = 0; var x=y=z=last_x=last_y=last_z=0; var media;media= document.getElementById(&quot;musicBox&quot;);function init()&#123; last_update=new Date().getTime(); if (window.DeviceMotionEvent) &#123; window.addEventListener(&#x27;devicemotion&#x27;,deviceMotionHandler, false); &#125; else&#123;alert(&#x27;not support mobile event&#x27;);&#125;&#125; function deviceMotionHandler(eventData) &#123; var acceleration =eventData.accelerationIncludingGravity; var curTime = new Date().getTime(); if ((curTime - last_update)&gt; 100) &#123; var diffTime = curTime -last_update; last_update = curTime; x = acceleration.x; y = acceleration.y; z = acceleration.z; var speed = Math.abs(x +y + z - last_x - last_y - last_z) / diffTime * 10000; if (speed &gt; SHAKE_THRESHOLD) &#123; media.play(); &#125; last_x = x; last_y = y; last_z = z; &#125; &#125; window.onload = function()&#123; init(); &#125;&lt;/script&gt;","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"移动端","slug":"移动端","permalink":"https://i.jakeyu.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]},{"title":"jQuery中animate动画效果","slug":"jQuery中animate动画效果","date":"2016-05-06 17:01:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/05/06/jQuery中animate动画效果/","link":"","permalink":"https://i.jakeyu.top/2016/05/06/jQuery%E4%B8%ADanimate%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/","excerpt":"参考:http://www.w3school.com.cn/jquery/effect_animate.asp","text":"参考:http://www.w3school.com.cn/jquery/effect_animate.asp 定义和用法animate() 方法执行 CSS 属性集的自定义动画。 该方法通过CSS样式将元素从一个状态改变为另一个状态。CSS属性值是逐渐改变的，这样就可以创建动画效果。 只有数字值可创建动画（比如 “margin:30px”）。字符串值无法创建动画（比如 “background-color:red”）。 注释：使用 “+&#x3D;” 或 “-&#x3D;” 来创建相对动画（relative animations）。 语法 1 $(selector).animate(styles,speed,easing,callback) 参数 描述styles必需。规定产生动画效果的 CSS 样式和值。 可能的 CSS 样式值（提供实例）：1234567891011121314151617181920212223242526272829303132333435backgroundPositionborderWidthborderBottomWidthborderLeftWidthborderRightWidthborderTopWidthborderSpacingmarginmarginBottommarginLeftmarginRightmarginTopoutlineWidthpaddingpaddingBottompaddingLeftpaddingRightpaddingTopheightwidthmaxHeightmaxWidthminHeightminWidthfontfontSizebottomleftrighttopletterSpacingwordSpacinglineHeighttextIndent注释：CSS 样式使用 DOM 名称（比如 &quot;fontSize&quot;）来设置，而非 CSS 名称（比如 &quot;font-size&quot;）。 speed123456可选。规定动画的速度。默认是 &quot;normal&quot;。可能的值：毫秒 （比如 1500）&quot;slow&quot;&quot;normal&quot;&quot;fast&quot; easing12345可选。规定在不同的动画点中设置动画速度的 easing 函数。内置的 easing 函数：swinglinear扩展插件中提供更多 easing 函数。 callback12可选。animate 函数执行完之后，要执行的函数。如需学习更多有关 callback 的内容，请访问我们的 jQuery Callback 这一章。 语法 21$(selector).animate(styles,options) 参数 描述styles 必需。规定产生动画效果的 CSS 样式和值（同上）。options可选。规定动画的额外选项。可能的值： 123456speed - 设置动画的速度easing - 规定要使用的 easing 函数callback - 规定动画完成之后要执行的函数step - 规定动画的每一步完成之后要执行的函数queue - 布尔值。指示是否在效果队列中放置动画。如果为 false，则动画将立即开始specialEasing - 来自 styles 参数的一个或多个 CSS 属性的映射，以及它们的对应 easing 函数 示例：12345678910111213141516171819202122&lt;html&gt;&lt;head&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;.btn1&quot;).click(function()&#123; $(&quot;p&quot;).animate(&#123;top:&quot;100px&quot;&#125;); &#125;); $(&quot;.btn2&quot;).click(function()&#123; $(&quot;p&quot;).animate(&#123;top:&quot;0px&quot;&#125;); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button class=&quot;btn1&quot;&gt;Animate&lt;/button&gt; &lt;button class=&quot;btn2&quot;&gt;Reset&lt;/button&gt; &lt;div style=&quot;position:relative&quot;&gt; &lt;p style=&quot;background-color:yellow;width:100px;position:absolute&quot;&gt;This is a paragraph.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"分别使用text-stroke和text-shadow为文本描边","slug":"分别使用text-stroke和text-shadow为文本描边","date":"2016-04-26 21:03:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/04/26/分别使用text-stroke和text-shadow为文本描边/","link":"","permalink":"https://i.jakeyu.top/2016/04/26/%E5%88%86%E5%88%AB%E4%BD%BF%E7%94%A8text-stroke%E5%92%8Ctext-shadow%E4%B8%BA%E6%96%87%E6%9C%AC%E6%8F%8F%E8%BE%B9/","excerpt":"文本描边","text":"文本描边 使用text-stroke属性目前text-stroke仅支持webkit内核的浏览器，所以格式为 12-webkit-text-stroke:1px black; //描边宽度 描边颜色-webkit-text-fill-color:white; //为文本填充颜色 代码： 1234567&lt;h1&gt;测试text-stroke属性&lt;/h1&gt;&lt;style type=&quot;text/css&quot;&gt; h1&#123; -webkit-text-stroke: 1px black; -webkit-text-fill-color: white; &#125;&lt;/style&gt; 结果 使用text-shadow属性代码： 12345678910&lt;h1&gt;测试text-stroke属性&lt;/h1&gt;&lt;style type=&quot;text/css&quot;&gt; h1&#123; color:white; text-shadow:-2px -2px 1px black, 2px -2px 1px black, -2px 2px 1px black, 2px 2px 1px black; &#125;&lt;/style&gt;","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"}]},{"title":"所有浏览器都适用的创建XMLHttpRequest对象的方法","slug":"所有浏览器都适用的创建XMLHttpRequest对象的方法","date":"2016-04-18 21:57:54","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/04/18/所有浏览器都适用的创建XMLHttpRequest对象的方法/","link":"","permalink":"https://i.jakeyu.top/2016/04/18/%E6%89%80%E6%9C%89%E6%B5%8F%E8%A7%88%E5%99%A8%E9%83%BD%E9%80%82%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BAXMLHttpRequest%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"由于IE7之前的版本不支持使用var xhr ＝ XMLHttpRequest();方法创建ajax对象，所以如果需要支持所有浏览器需要使用下面的方法","text":"由于IE7之前的版本不支持使用var xhr ＝ XMLHttpRequest();方法创建ajax对象，所以如果需要支持所有浏览器需要使用下面的方法 12345678910111213141516171819202122 function createXHR()&#123; if(typeof XMLHttpRequest != &quot;undefined&quot;)&#123; return new XMLHttpRequest(); &#125;else if(typeof ActiveXObject != &quot;undefined&quot;)&#123; if(typeof arguments.callee.activeXString != &quot;string&quot;)&#123; var versions = [&quot;MSXML2.XMLHttp.6.0&quot;,&quot;MSXML2.XMLHttp. 3.0&quot;,&quot;MSXML2.XMLHttp&quot;],i,len; for(i = 0,len=versions.length;i&lt;len;i++)&#123; try&#123; new ActiveXObject(versions[i]); arguments.callee.activeXString = versions[i]; break; &#125;catch(ex)&#123; //跳过 &#125; &#125; &#125; return new ActiveXObject(arguments.callee.activeXString); &#125;else&#123; throw new Error(&quot;No XHR object available.&quot;); &#125;&#125;var xhr = createXHR(); 请求ajax12345678910111213var xhr = createXHR();xhr.open(&quot;post&quot;,&quot;check.php&quot;,true);xhr.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);xhr.send(null);xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4)&#123; if((xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) || xhr.status== 304)&#123; alert(xhr.responseText); &#125;else&#123; alert(&quot;Request was unsuccessful: &quot; + xhr.status); &#125; &#125;&#125; xhr.readyState的五种状态123450 － （未初始化）还没有调用open()方法 1 － （服务器连接已经建立）已调用open()方法，正在发送请求 2 － （请求已接收）send()方法执行完成，已经接收到全部响应内容 3 － （请求处理中）正在解析响应内容 4 － （请求已完成）响应内容解析完成，可以在客户端调用了","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"}]},{"title":"如何让页面适配各种机型","slug":"如何让页面适配各种机型","date":"2016-04-18 00:05:00","updated":"2023-03-24 05:08:37","comments":true,"path":"2016/04/18/如何让页面适配各种机型/","link":"","permalink":"https://i.jakeyu.top/2016/04/18/%E5%A6%82%E4%BD%95%E8%AE%A9%E9%A1%B5%E9%9D%A2%E9%80%82%E9%85%8D%E5%90%84%E7%A7%8D%E6%9C%BA%E5%9E%8B/","excerpt":"大杀器rem","text":"大杀器rem 我们可以知道，页面主体中规中矩，分为两部分：上半部分是介绍页面，下半部分是主体界面，有一个点击按钮来负责全部用户交互，为了适配iphone4到6plus以及众多安卓，我们对整个页面的架构可以有如下几种方案： 高度百分比高度百分比方案——整个屏幕的主要高度高度都用百分比定位，比如介绍部分占高度的百分之30，点击抢红包部分占剩下的百分之70。 优点——易于理解好上手缺点——由于行内样式，行间样式和它们的父子元素具有复杂的宽高关系，因此内部，比如介绍部分的内部的诸多元素想必还要用到px，em等定位方式，因此不那么和谐和有保障，容易小屏溢出或者大屏留白。在这个页面表现为倒计时文字部分和帮谁谁谁砍价的部分难以控制。 flex按列布局flex布局是一个很不错的方式：对于这个页面，我们可以有如下构想：对于介绍部分，用px或者em定位和布局，而对于剩下的部分则用flex让他填充好下边的空间，再用绝对定位让砍价按钮水平垂直都居中，简直丝滑。 优点——丝滑。缺点——要硬说有什么缺点的话，那么下端宽度不好控制算一个吧，试想这样构建出来的页面可能会在iphone4中下端一个按钮几乎占满，而在6普拉斯中则会有大量留白。 大杀器rem我们知道在rem出来之前，em有着定位根为父元素的天然缺陷，比如在这样的页面中。html&gt;body&gt;div.parent&gt;div.son有这样的css: 123456789.html&#123; font-size:10px; .parent&#123; font-size:2em; .son&#123; font-size:1em; &#125; &#125;&#125; 注意以上css写法用了sass。html也简写了。 然后你猜son的字体是多少px？是20，没错。因为他的参照元素是.parent元素，而不是根，这样的话嵌套多了谁敢用em。 幸好rem的横空出现解决了这种问题：rem的参照物就是根元素的font-size，这让我们对于不同的页面有了设置全局标准的可能，大屏幕，我可以设置大的字体单位，小屏幕设置小的。一举解决了百分比定位和flex布局的遗留问题。 怎样确定字体单位呢？有两种方法，第一种比较优雅：媒体查询，我们可以用媒体查询看看浏览设备的宽高，然后设置一个合适的字体单位，另一种方法比较精确，那就是用js去算。 body宽度document.body.clientWidth body高度document.body.clientHeight document.documentElement.clientWidth ==&gt; 可见区域宽度 document.documentElement.clientHeight ==&gt; 可见区域高度 计算方法是这样的，对于这个页面来说: 假设：设计稿高度1500px，设计稿中介绍部分高度300px，倒计时字体大小40px，屏幕高度1000px。 第一步：计算单位：html的font-size &#x3D; 屏幕高度 &#x2F; 100 –&gt;10px; 第二步：介绍部分设置成高度30rem。 第三步：字体大小设置成4rem。 啊哈，发现他的优点了嘛，没错，全局等比放大的适应。这就意味着，你在6plus里面能看的页面，在iphone4里面同样能看，而且不会因为屏幕小而发生元素交叠的情况，也不会因为屏幕大而出现留白的情况，是我目前最喜欢的一种表达方式。 优点：做到了完美适配。 缺点：只是等比放大，小屏下字体小，大屏下字体大（不过从经验来讲，字体的大小并不明显，因为屏幕在那呢，看着也舒服）。 缺点反驳：我觉得只有一套设计稿，大小屏幕都兼顾完美是不可能的，因为你不知道什么时候该让一个字占用绝对20像素还是绝对是屏幕宽度的百分之五。如果要做到兼顾，也是可以的：用多套设计稿+css媒体查询为不同宽度的页面写好不同的css样式。 对于多屏页面。1.在reset.css页面加入媒体查询来根据不同的宽度定好字体单位。 2.大杀器rem 使用方法同上，不过上面是根据高度来确定字体单位，这里可以用宽度来确定字体单位。 123var html = document.getElementsByTagName(&quot;html&quot;);html[0].style.fontSize = document.documentElement.clientWidth/10+&quot;px&quot;; 让页面在都完美显示算是我实习期间的研究之一，经过了比较，我还是用大杀器rem觉得比较方便一些，当然还有诸多方法值得尝试，比如rem+flex等等，如果有不当之处，还请各位前辈抨击，批评，丢石头给我，感谢前辈和同行的指点！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344document.body.clientWidth ==&gt; BODY对象宽度document.body.clientHeight ==&gt; BODY对象高度document.documentElement.clientWidth ==&gt; 可见区域宽度document.documentElement.clientHeight ==&gt; 可见区域高度网页可见区域宽： document.body.clientWidth网页可见区域高： document.body.clientHeight网页可见区域宽： document.body.offsetWidth (包括边线的宽)网页可见区域高： document.body.offsetHeight (包括边线的高)网页正文全文宽： document.body.scrollWidth网页正文全文高： document.body.scrollHeight网页被卷去的高： document.body.scrollTop网页被卷去的左： document.body.scrollLeft网页正文部分上： window.screenTop网页正文部分左： window.screenLeft屏幕分辨率的高： window.screen.height屏幕分辨率的宽： window.screen.width屏幕可用工作区高度： window.screen.availHeight屏幕可用工作区宽度： window.screen.availWidth// 部分jQuery函数$(window).height() //浏览器时下窗口可视区域高度 $(document).height() //浏览器时下窗口文档的高度 $(document.body).height() //浏览器时下窗口文档body的高度 $(document.body).outerHeight(true) //浏览器时下窗口文档body的总高度 包括 border padding margin $(window).width() //浏览器时下窗口可视区域宽度 $(document).width()//浏览器时下窗口文档对于象宽度 $(document.body).width() //浏览器时下窗口文档body的高度 $(document.body).outerWidth(true) //浏览器时下窗口文档body的总宽度 包括 border paddingHTML精确定位:scrollLeft,scrollWidth,clientWidth,offsetWidth scrollHeight: 获取对象的滚动高度。 scrollLeft:设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离 scrollTop:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离 scrollWidth:获取对象的滚动宽度 offsetHeight:获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度 offsetLeft:获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 offsetTop:获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置 event.clientX 相对文档的水平座标 event.clientY 相对文档的垂直座标 event.offsetX 相对容器的水平坐标 event.offsetY 相对容器的垂直坐标 document.documentElement.scrollTop 垂直方向滚动的值 event.clientX+document.documentElement.scrollTop 相对文档的水平座标+垂直方 向滚动的量","author":null,"categories":[{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"移动端","slug":"移动端","permalink":"https://i.jakeyu.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]}],"categories":[{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://i.jakeyu.top/categories/ChatGPT/"},{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"服务器","slug":"前端/服务器","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"CI/CD","slug":"前端/服务器/CI-CD","permalink":"https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/CI-CD/"},{"name":"vscode","slug":"vscode","permalink":"https://i.jakeyu.top/categories/vscode/"},{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"小程序","slug":"小程序","permalink":"https://i.jakeyu.top/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"随心","slug":"随心","permalink":"https://i.jakeyu.top/categories/%E9%9A%8F%E5%BF%83/"},{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Hexo","slug":"Hexo","permalink":"https://i.jakeyu.top/categories/Hexo/"},{"name":"mac","slug":"mac","permalink":"https://i.jakeyu.top/categories/mac/"},{"name":"Mac","slug":"Mac","permalink":"https://i.jakeyu.top/categories/Mac/"},{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/categories/Node/"},{"name":"移动端","slug":"移动端","permalink":"https://i.jakeyu.top/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"tags":[{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://i.jakeyu.top/tags/ChatGPT/"},{"name":"服务器","slug":"服务器","permalink":"https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"前端","slug":"前端","permalink":"https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://i.jakeyu.top/tags/CI-CD/"},{"name":"vscode","slug":"vscode","permalink":"https://i.jakeyu.top/tags/vscode/"},{"name":"JS","slug":"JS","permalink":"https://i.jakeyu.top/tags/JS/"},{"name":"CSS","slug":"CSS","permalink":"https://i.jakeyu.top/tags/CSS/"},{"name":"小程序","slug":"小程序","permalink":"https://i.jakeyu.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"VUE","slug":"VUE","permalink":"https://i.jakeyu.top/tags/VUE/"},{"name":"HTML","slug":"HTML","permalink":"https://i.jakeyu.top/tags/HTML/"},{"name":"ES6","slug":"ES6","permalink":"https://i.jakeyu.top/tags/ES6/"},{"name":"video","slug":"video","permalink":"https://i.jakeyu.top/tags/video/"},{"name":"工具","slug":"工具","permalink":"https://i.jakeyu.top/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Hexo","slug":"Hexo","permalink":"https://i.jakeyu.top/tags/Hexo/"},{"name":"mac","slug":"mac","permalink":"https://i.jakeyu.top/tags/mac/"},{"name":"Node","slug":"Node","permalink":"https://i.jakeyu.top/tags/Node/"},{"name":"Nginx","slug":"Nginx","permalink":"https://i.jakeyu.top/tags/Nginx/"},{"name":"方案","slug":"方案","permalink":"https://i.jakeyu.top/tags/%E6%96%B9%E6%A1%88/"},{"name":"mongoose","slug":"mongoose","permalink":"https://i.jakeyu.top/tags/mongoose/"},{"name":"mongodb","slug":"mongodb","permalink":"https://i.jakeyu.top/tags/mongodb/"},{"name":"数据库","slug":"数据库","permalink":"https://i.jakeyu.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"sass","slug":"sass","permalink":"https://i.jakeyu.top/tags/sass/"},{"name":"移动端","slug":"移动端","permalink":"https://i.jakeyu.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]}