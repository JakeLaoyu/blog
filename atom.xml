<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jake</title>
  
  <subtitle>闲看四季，静候花开。</subtitle>
  <link href="https://i.jakeyu.top/atom.xml" rel="self"/>
  
  <link href="https://i.jakeyu.top/"/>
  <updated>2023-02-07T12:59:04.224Z</updated>
  <id>https://i.jakeyu.top/</id>
  
  <author>
    <name>Jake</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 github action 自动部署博客和同步备份</title>
    <link href="https://i.jakeyu.top/2023/02/04/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/"/>
    <id>https://i.jakeyu.top/2023/02/04/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/</id>
    <published>2023-02-04T00:14:33.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/44036562.png"></p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 github action 自动化可以让我们发布博客更加简单，只需要把代码提交到 github 仓库即可。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>关于如何使用 git 上传博客到自己的服务器可以查看我之前写的<a href="/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/">Hexo博客部署到服务器</a>。</p><h2 id="部署到-github-page"><a href="#部署到-github-page" class="headerlink" title="部署到 github page"></a>部署到 github page</h2><h3 id="action-配置"><a href="#action-配置" class="headerlink" title="action 配置"></a>action 配置</h3><p>在项目根目录下创建 <code>.github/workflows</code> 文件夹，然后在该文件夹下创建 <code>deploy-gh-page.yml</code> 文件，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际情况调整分支</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy-gh-page:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">pnpm/action-setup@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">7</span></span><br><span class="line">          <span class="attr">run_install:</span> <span class="literal">false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16&quot;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&quot;pnpm&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pnpm</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-page</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># github 自带变量，无需配置</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><h3 id="SSH-key"><a href="#SSH-key" class="headerlink" title="SSH key"></a>SSH key</h3><p>添加 SSH Private Key 到 <code>github repo -&gt; settings -&gt; Secrets and variables -&gt; Actions</code>。</p><p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/SCR-20230204-mh.png"></p><h3 id="action-配置-1"><a href="#action-配置-1" class="headerlink" title="action 配置"></a>action 配置</h3><p>在<a href="#action-%E9%85%8D%E7%BD%AE">上文的配置</a>基础上，增加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy-to-server:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">  <span class="comment"># 依赖 deploy-gh-page job</span></span><br><span class="line">  <span class="attr">needs:</span> [<span class="string">deploy-gh-page</span>]</span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">wei/git-sync@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">source_repo:</span> <span class="string">JakeLaoyu/blog</span></span><br><span class="line">        <span class="attr">source_branch:</span> <span class="string">refs/remotes/source/gh-pages</span></span><br><span class="line">        <span class="attr">destination_repo:</span> <span class="string">root@110.40.198.64:/www/wwwroot/blog.git</span></span><br><span class="line">        <span class="attr">destination_branch:</span> <span class="string">refs/heads/master</span></span><br><span class="line">        <span class="attr">destination_ssh_private_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/SCR-20230204-s2.png"></p><h2 id="同步至-gitee-等"><a href="#同步至-gitee-等" class="headerlink" title="同步至 gitee 等"></a>同步至 gitee 等</h2><p>依赖 <a href="https://github.com/wearerequired/git-mirror-action">wearerequired&#x2F;git-mirror-action</a> 我们可以很方便实现。</p><p>在项目根目录下创建 <code>.github/workflows</code> 文件夹，然后在该文件夹下创建 <code>sync-to-gitee.yml</code> 文件，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 需要事先在 gitee 上创建 ssh key 并添加到仓库</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">git@github.com:JakeLaoyu/blog.git</span></span><br><span class="line">          <span class="comment"># Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">git@gitee.com:jakelaoyu/HexoBlogBackup.git</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8-github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%92%8C%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/44036562.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="服务器" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="CI/CD" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/CI-CD/"/>
    
    
    <category term="服务器" scheme="https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="前端" scheme="https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CI/CD" scheme="https://i.jakeyu.top/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>注册ChatGPT详细指南</title>
    <link href="https://i.jakeyu.top/2022/12/09/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/"/>
    <id>https://i.jakeyu.top/2022/12/09/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/</id>
    <published>2022-12-09T13:46:15.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/cbsn-fusion-promise-fear-of-artificial-intelligence-bot-chatgpt-thumbnail-1528537-640x360.jpeg"></p><span id="more"></span><p>最近ChatGPT真受欢迎，但是有些人注册时会经常面临不服务它们的地区问题，现在我们给你详细问题解决。</p><p>作者 <a href="https://twitter.com/BoxMrChen">twitter</a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>代理。要求是韩国，日本，印度，新加坡，美国这些国家的地址都合适。对其他的我们还不太清楚，反正香港或中国的代理肯定不行。<a href="https://join.v2club.cc/#/register?code=C5EnE7vC">推荐机场</a></li><li>找一个国外手机号码，如果你没有用过接码平台也行，有些接码平台是无法接的，所以我们推荐一个就是 <a href="https://sms-activate.org/?ref=2862835">sms-activate.org</a></li><li>准备一个浏览器</li></ol><h1 id="开始一步一步注册"><a href="#开始一步一步注册" class="headerlink" title="开始一步一步注册"></a>开始一步一步注册</h1><h2 id="第一步是接验证码"><a href="#第一步是接验证码" class="headerlink" title="第一步是接验证码"></a>第一步是接验证码</h2><p>打开接码平台 <a href="https://sms-activate.org/?ref=2862835">sms-activate.org</a>，注册一个账号</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/pasted%20image%200.png"></p><p>然后要充值余额</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image.png"></p><p>一次接码OpenAi的验证码费用是大概11卢布，人民币来看差不多是1块钱，不过只能充美金，就先充直个1美金钱。可以选择对你任何方便方式。支付宝也有</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image%20(1).png"></p><p>充值完成可能需要等一会，就先放着，直接进行下一步。</p><h2 id="第二部是注册一个OpenAI账号"><a href="#第二部是注册一个OpenAI账号" class="headerlink" title="第二部是注册一个OpenAI账号"></a>第二部是注册一个OpenAI账号</h2><p>首先打开<a href="https://beta.openai.com/signup">ChatGPT的账户注册页面</a>。谷歌注册或者邮箱注册都可以，无所谓，我们这里用邮箱注册作为例子。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled.png"></p><p>用邮箱注册后你要验证邮件。进去邮箱，查看email里的链接。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image-2.png"></p><p>这里你需要输入需要的信息。</p><p>当然，有一些人会在这里遇到一个问题，会出现说不能在当前国家服务的提示。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image-3.png"></p><p>不用怕，这个这文章就帮助你解决这个问题。</p><p>这方面那，给你一招。一般你出现这种问题，就是因为你的代理没有全局，或者位置不对。香港或中国的的代理是100%无法通过的。</p><p>这个问题是非常神奇的，只要你出现了这个提示，那么你接下来怎么切换代理，都是没用的。现在提供给你你一招解决。</p><h2 id="解决地区问题"><a href="#解决地区问题" class="headerlink" title="解决地区问题"></a>解决地区问题</h2><p>先，你要把你的代理切换到任何合适的地区，我们这里选择了韩国。</p><p>然后，先复制下面这段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>).<span class="title function_">find</span>(<span class="function"><span class="params">i</span>=&gt;</span>i.<span class="title function_">startsWith</span>(<span class="string">&#x27;@@auth0spajs&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>接着在地址栏里输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">javascript</span>:</span><br></pre></td></tr></table></figure><p>请注意，这里一定要输入，因为你复制的话是粘贴不了的。</p><p>然后再粘贴我们第一段复制的内容：</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled-1.png"></p><p>然后按下回车键，刷新页面。如果你的代理没问题，就可以看到正常工作的注册页面了。</p><h2 id="输入手机号码"><a href="#输入手机号码" class="headerlink" title="输入手机号码"></a>输入手机号码</h2><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled-2.png"></p><p>这里选的是韩国，这是因为我们使用韩国的代理，但是我们最好选择印度。然后到我们的接码网站上去。在左侧搜索OpenAi，然后点击印度。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/sdfdskfjdls.png"></p><p>点击”小黄车”。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/pasted%20image%200-2.png"></p><p>然后我们复制这个号码，粘贴过去。然后我们点击发送验证码就完成了。</p><p>等一会网站会提示验证码，我们复制粘贴。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/image-4.png"></p><p>这里你要选择你打算如何使用OpenAI。随便选择吧。</p><h2 id="使用ChatGPT"><a href="#使用ChatGPT" class="headerlink" title="使用ChatGPT"></a>使用ChatGPT</h2><p>注册完后，打开<a href="https://chat.openai.com/auth/login">ChatGPT网站</a>去登陆。</p><p><img data-src="//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/Untitled-5.png"></p><p>在下面这个地方就可以开始写你的任何巧妙的句子了。取乐吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/cbsn-fusion-promise-fear-of-artificial-intelligence-bot-chatgpt-thumbnail-1528537-640x360.jpeg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://i.jakeyu.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://i.jakeyu.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vscode 插件之代码补全提示</title>
    <link href="https://i.jakeyu.top/2021/12/04/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/"/>
    <id>https://i.jakeyu.top/2021/12/04/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/</id>
    <published>2021-12-04T16:23:58.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/v2-30670b252d59bcc15c040f783d79f5e9_720w.png"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vscode 插件提供了很强大个能力，借助插件可以帮助我们提升开发效率。</p><p>在写 node 项目时经常需要相对路径寻找引用 Service 文件等，写一个插件帮我们自动补全。</p><p>借助 <a href="https://code.visualstudio.com/api/references/vscode-api"><code>vscode.languages.registerCompletionItemProvider</code></a> 方法，我们可以注册相关补全提示。</p><h1 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line">  context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">    vscode.<span class="property">languages</span>.<span class="title function_">registerCompletionItemProvider</span>(<span class="string">&quot;typescript&quot;</span>, &#123;</span><br><span class="line">      provideCompletionItems,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="provideCompletionItems"><a href="#provideCompletionItems" class="headerlink" title="provideCompletionItems"></a>provideCompletionItems</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">provideCompletionItems</span> = <span class="keyword">async</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="variable language_">document</span>: vscode.TextDocument,</span></span><br><span class="line"><span class="params">  position: vscode.Position</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> serviceFiles = <span class="keyword">await</span> vscode.<span class="property">workspace</span>.<span class="title function_">findFiles</span>(<span class="string">&quot;app/services/**/*.ts&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!serviceFiles.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> serviceFiles.<span class="title function_">map</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生成相对当前编辑文件的相对路径</span></span><br><span class="line">    <span class="keyword">const</span> relativePath = path.<span class="title function_">relative</span>(</span><br><span class="line">      path.<span class="title function_">dirname</span>(<span class="variable language_">document</span>.<span class="property">uri</span>.<span class="property">path</span>),</span><br><span class="line">      path.<span class="title function_">dirname</span>(file.<span class="property">path</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> basename = path.<span class="title function_">basename</span>(file.<span class="property">path</span>);</span><br><span class="line">    <span class="keyword">const</span> extname = path.<span class="title function_">extname</span>(file.<span class="property">path</span>);</span><br><span class="line">    <span class="keyword">const</span> filename = basename.<span class="title function_">replace</span>(extname, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> insertText = <span class="string">`import <span class="subst">$&#123;filename&#125;</span> from &#x27;<span class="subst">$&#123;relativePath&#125;</span>/<span class="subst">$&#123;filename&#125;</span>&#x27;;\n<span class="subst">$&#123;filename&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> completionItem = <span class="keyword">new</span> vscode.<span class="title class_">CompletionItem</span>(</span><br><span class="line">      filename,</span><br><span class="line">      vscode.<span class="property">CompletionItemKind</span>.<span class="property">Class</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    completionItem.<span class="property">detail</span> = basename;</span><br><span class="line">    completionItem.<span class="property">insertText</span> = insertText;</span><br><span class="line">    completionItem.<span class="property">documentation</span> = <span class="string">`<span class="subst">$&#123;insertText&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> completionItem;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>同时我们需要在 package.json 中添加相应配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;onLanguage:typescript&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://code.visualstudio.com/api/references/vscode-api">VS Code API</a></li><li><a href="https://github.com/Liiked/VS-Code-Extension-Doc-ZH">VS-Code-Extension-Doc-ZH</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/vscode-%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA/v2-30670b252d59bcc15c040f783d79f5e9_720w.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="vscode" scheme="https://i.jakeyu.top/categories/vscode/"/>
    
    
    <category term="前端" scheme="https://i.jakeyu.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vscode" scheme="https://i.jakeyu.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>centos 使用 Clash 梯子</title>
    <link href="https://i.jakeyu.top/2021/11/27/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/"/>
    <id>https://i.jakeyu.top/2021/11/27/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/</id>
    <published>2021-11-27T21:56:23.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>服务器访问 npm、github 等真让人捉急，折腾一下配个 clash。</p><p><img data-src="//blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/logo.png"></p><span id="more"></span><h1 id="下载-clash"><a href="#下载-clash" class="headerlink" title="下载 clash"></a>下载 clash</h1><p>去 <a href="https://github.com/Dreamacro/clash/releases">github</a> 下载最新 linux 版本，一般使用 <code>linux-amd64</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gunzip clash-linux-amd64-v1.8.0.gz</span><br><span class="line">mv clash-linux-amd64-v1.8.0 ~/clash</span><br><span class="line">chmod +x ~/clash</span><br><span class="line">./clash</span><br></pre></td></tr></table></figure><p>一套执行完后会生成默认配置文件 <code>~/.config/clash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l ~/.config/clash</span><br><span class="line">-rw-r--r-- 1 root root 190K 11月 24 16:38 config.yaml</span><br><span class="line">-rw-r--r-- 1 root root 5.7M 11月 24 16:02 Country.mmdb</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>我是用的是 <a href="https://join.v2fly.club/#/register?code=C5EnE7vC">V2Club</a>。</p><h2 id="复制订阅地址"><a href="#复制订阅地址" class="headerlink" title="复制订阅地址"></a>复制订阅地址</h2><p><img data-src="http://blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/iShot2021-11-27%2023.29.16.png"></p><p>这个配置我们不能直接使用，需要使用 <a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/</a> 服务生成订阅地址，然后打开订阅地址就可以看到明文配置。</p><p>使用这份配置覆盖 <code>~/.config/clash/config.yaml</code>。</p><h2 id="启动代理"><a href="#启动代理" class="headerlink" title="启动代理"></a>启动代理</h2><p>然后启动 clash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash</span><br></pre></td></tr></table></figure><p>设置终端使用 clash 代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure><p>可以使用 <code>curl</code> 测试是否连接成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://www.google.com</span><br></pre></td></tr></table></figure><h1 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h1><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/clash/config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span></span><br><span class="line"><span class="comment"># 一定要配置 secret，用来远程访问安全</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><p>重启 clash 服务。</p><p>打开官方 <a href="http://clash.razord.top/">http://clash.razord.top/</a>，在设置中填写相应的端口，secret 配置。配置完成就即可远程管理</p><p><img data-src="http://blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/iShot2021-11-27%2023.50.06.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;服务器访问 npm、github 等真让人捉急，折腾一下配个 clash。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/centos-%E4%BD%BF%E7%94%A8-Clash-%E6%A2%AF%E5%AD%90/logo.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="服务器" scheme="https://i.jakeyu.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="服务器" scheme="https://i.jakeyu.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>跨域名存取localStorage</title>
    <link href="https://i.jakeyu.top/2020/09/20/%E8%B7%A8%E5%9F%9F%E5%90%8D%E5%AD%98%E5%8F%96localStorage/"/>
    <id>https://i.jakeyu.top/2020/09/20/%E8%B7%A8%E5%9F%9F%E5%90%8D%E5%AD%98%E5%8F%96localStorage/</id>
    <published>2020-09-20T19:15:11.000Z</published>
    <updated>2023-02-07T12:59:04.228Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E8%B7%A8%E5%9F%9F%E5%90%8D%E8%AF%BB%E5%8F%96localStorage/de1cd54ffb.png"></p><span id="more"></span><blockquote><p>无论数据存储在 localStorage 还是 sessionStorage ，<strong>它们都特定于页面的协议。</strong></p></blockquote><p>由于<code>localStorage</code>是基于当前访问源(origin)的本地存储空间，所以当我们在 <code>a.jakeyu.top</code> 中存储一段数据，并想要在 <code>b.jakeyu.top</code> 中读取数据的时候是无法取到的。</p><p>最近遇到这样的需求，考虑过 cookie 方案，但是可能存储大量的数据，cookie 不可行。最终我们使用<code>iframe</code>来实现，我觉得这是一个很有趣的方法。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><code>a.jakeyu.top</code> 和 <code>b.jakeyu.top</code> 通过 <code>iframe</code> 加载同一个域名的页面，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">postMessage</a> 和 <code>iframe</code> 中的页面进行通信，这样就可以实现跨域名存取 localStorage。</p><p>缺点是 <code>postMessage</code>  是基于回调的，所以所有 api 都是异步的。不过我们有 <code>promise</code>，可以让使用方式优雅一些。</p><p><img data-src="//blogimg.jakeyu.top/%E8%B7%A8%E5%9F%9F%E5%90%8D%E8%AF%BB%E5%8F%96localStorage/%E5%9B%BE%E5%83%8F2020-10-5.jpeg"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="父级页面"><a href="#父级页面" class="headerlink" title="父级页面"></a>父级页面</h2><h3 id="创建-iframe"><a href="#创建-iframe" class="headerlink" title="创建 iframe"></a>创建 iframe</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIframe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> iframeInBody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#iframe&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (iframeInBody) &#123;</span><br><span class="line">    <span class="keyword">return</span> iframeInBody;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">  iframe.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;#iframe&#x27;</span>);</span><br><span class="line">  iframe.<span class="property">src</span> = <span class="string">&#x27;https://jakeyu.top/localstorage&#x27;</span>;</span><br><span class="line">  iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertAdjacentElement</span>(<span class="string">&#x27;beforeend&#x27;</span>, iframe);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心-Class"><a href="#核心-Class" class="headerlink" title="核心 Class"></a>核心 Class</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">localStorage</span> &#123;</span><br><span class="line">  <span class="attr">iframe</span>: <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iframe 是否加载完成</span></span><br><span class="line">  <span class="attr">isReady</span>: <span class="title class_">Boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同时调用方法时，需要在 iframe 回调之后执行 reslove</span></span><br><span class="line">  <span class="attr">waitMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Function</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 iframe ready之前调用方法，需要保存一下，ready后执行</span></span><br><span class="line">  <span class="attr">beforeReady</span>: [<span class="title class_">Function</span>?];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">listenMessage</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isReady</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">beforeReady</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">iframe</span> = <span class="title function_">createIframe</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">waitMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">key</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">value</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">setItem</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventType = <span class="string">&#x27;set&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> randomKey = <span class="variable language_">this</span>.<span class="title function_">getRandomString</span>(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">set</span>(randomKey, resolve);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">        eventType,</span><br><span class="line">        key,</span><br><span class="line">        value,</span><br><span class="line">        randomKey</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 监听消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">listenMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 接收 iframe 消息</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="variable language_">this</span>.<span class="property">receiveMessage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理接收消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">event</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">receiveMessage</span>(<span class="params">event: MessageEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data = &#123;&#125; &#125; = event;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; eventType, randomKey, value &#125; = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventType === <span class="string">&#x27;return&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> handler = <span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">get</span>(randomKey);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">        <span class="title function_">handler</span>(value);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">delete</span>(randomKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType === <span class="string">&#x27;ready&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isReady</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">beforeReady</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fun = <span class="variable language_">this</span>.<span class="property">beforeReady</span>.<span class="title function_">shift</span>() <span class="keyword">as</span> <span class="title class_">Function</span>;</span><br><span class="line">        <span class="title function_">fun</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取随机字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">eventKey</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getRandomString</span>(<span class="params">eventKey: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> randomString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> eventKeyRandom = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      randomString = <span class="title function_">makeRandomString</span>(<span class="number">5</span>);</span><br><span class="line">      eventKeyRandom = <span class="string">`<span class="subst">$&#123;eventKey&#125;</span>_<span class="subst">$&#123;randomString&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">waitMap</span>.<span class="title function_">has</span>(eventKeyRandom));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventKeyRandom;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 向iframe中发送消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">params</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">postMessage</span>(<span class="params">params: Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isReady</span>) &#123;</span><br><span class="line">      (<span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">contentWindow</span> <span class="keyword">as</span> <span class="title class_">Window</span>).<span class="title function_">postMessage</span>(params, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">beforeReady</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        (<span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">contentWindow</span> <span class="keyword">as</span> <span class="title class_">Window</span>).<span class="title function_">postMessage</span>(params, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iframe-页面"><a href="#iframe-页面" class="headerlink" title="iframe 页面"></a>iframe 页面</h2><p>iframe 页面只需要通过 postMessage 和父级页面进行通信，所以并不需要 ui。</p><h3 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h3><p>页面加载完成时，需要通知父页面，并执行 before 栈中的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">eventType</span>: <span class="string">&#x27;ready&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;*&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">receiveMessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 用来标记当前事件是 读/取 或者其他</span></span><br><span class="line">  <span class="keyword">const</span> eventType = <span class="title function_">get</span>(event, <span class="string">&#x27;data.eventType&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 数据 key</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">get</span>(event, <span class="string">&#x27;data.key&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 数据</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">get</span>(event, <span class="string">&#x27;data.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 当前事件标识，用于父级页面区分当前消息来自哪次调用</span></span><br><span class="line">  <span class="keyword">const</span> randomKey = <span class="title function_">get</span>(event, <span class="string">&#x27;data.randomKey&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只以存数据为例</span></span><br><span class="line">  <span class="keyword">if</span>(eventType === <span class="string">&#x27;set&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知父级页面存储成功</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">eventType</span>: <span class="string">&#x27;return&#x27;</span>,</span><br><span class="line">        value,</span><br><span class="line">        randomKey,</span><br><span class="line">        error,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, receiveMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在 <code>a.jekeyu.top</code> 中存储数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">localStorage</span>().<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jake&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 <code>b.jekeyu.top</code> 中存储数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title function_">localStorage</span>().<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/%E8%B7%A8%E5%9F%9F%E5%90%8D%E8%AF%BB%E5%8F%96localStorage/de1cd54ffb.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>使用docker部署Hexo博客</title>
    <link href="https://i.jakeyu.top/2020/03/18/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://i.jakeyu.top/2020/03/18/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-03-18T00:25:47.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>经常迁移博客是件头疼的事，每次都要折腾一堆文件，所以折腾了一下，使用docker部署博客。</p><p><img data-src="//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/vertical-logo-monochromatic-1.png"></p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>创建 <code>DockerFile</code></p><blockquote><p>配置中的路径根据自己实际路径调整</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:6</span><br><span class="line">ENV container docker</span><br><span class="line"></span><br><span class="line"># 添加环境</span><br><span class="line">RUN yum -y update &amp;&amp;\</span><br><span class="line">    yum -y install epel-release &amp;&amp;\</span><br><span class="line">    yum -y install nginx &amp;&amp;\</span><br><span class="line">    yum -y install vim &amp;&amp;\</span><br><span class="line">    yum install passwd openssl openssh-server openssh-clients -y &amp;&amp;\</span><br><span class="line">    yum install initscripts -y</span><br><span class="line"></span><br><span class="line"># 更新源，用于安装 git 2.x，修复 --work-tree 不能和 --git-dir 同名问题</span><br><span class="line">RUN yum -y install wget &amp;&amp;\</span><br><span class="line">    wget http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm &amp;&amp;\</span><br><span class="line">    rpm -ivh wandisco-git-release-6-1.noarch.rpm &amp;&amp;\</span><br><span class="line">    yum -y install git</span><br><span class="line"></span><br><span class="line"># 安装zsh</span><br><span class="line">RUN yum install -y zsh &amp;&amp;\</span><br><span class="line">    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">RUN mkdir -p /home/blog</span><br><span class="line">WORKDIR /home</span><br><span class="line"></span><br><span class="line"># 添加 blog git钩子</span><br><span class="line">RUN git init --bare blog.git</span><br><span class="line">RUN echo -e &#x27;#!/bin/bash\ngit --work-tree=/home/blog --git-dir=/home/blog.git checkout -f&#x27; &gt;&gt; blog.git/hooks/post-receive</span><br><span class="line">RUN chmod +x blog.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line"># 创建日志文件</span><br><span class="line">RUN mkdir -p /home/log</span><br><span class="line">WORKDIR /home/log</span><br><span class="line">RUN touch blog.log</span><br><span class="line"></span><br><span class="line"># 配置 nginx</span><br><span class="line">WORKDIR /etc/nginx</span><br><span class="line">COPY ./nginx ./conf.d</span><br><span class="line"># 解决执行 nginx 报错</span><br><span class="line">RUN nginx -c /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"># 导入自动执行脚本</span><br><span class="line">COPY ./start.sh /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># 切换工作目录</span><br><span class="line">WORKDIR /home</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">CMD /root/start.sh</span><br><span class="line"></span><br><span class="line"># 端口，使用81 端口避免和 nginx默认端口冲突</span><br><span class="line"># 22 端口为 ssh 所用</span><br><span class="line">EXPOSE 9022:22 9081:81</span><br></pre></td></tr></table></figure><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 81;</span><br><span class="line">    server_name i.jakeyu.top;</span><br><span class="line">    # 处理 nginx 自动 301 加斜杠以及端口问题</span><br><span class="line">    server_name_in_redirect on;</span><br><span class="line">    port_in_redirect off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/blog;</span><br><span class="line">        error_page   404 https://i.jakeyu.top/404.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log  /home/log/blog.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 sshd 服务</span></span><br><span class="line">service sshd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止容器退出</span></span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>在 <code>DockerFile</code> 所在目录执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t blog:v1 .</span><br></pre></td></tr></table></figure><h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d -p 9081:81 -p 9022:22 blog:v1</span><br></pre></td></tr></table></figure><h1 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h1><p>查看所有容器，找到想要配置的 <code>container id</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti [container <span class="built_in">id</span>] /bin/zsh</span><br></pre></td></tr></table></figure><p>把宿主机的 <code>~/.ssh/id_rsa.pub</code> 文件 copy 到容器 <code>~/.ssh/authorized_keys</code> 中</p><p>重启ssh服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改 Hexo 博客的配置文件 <code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    ssh: ssh://root@ip:port/home/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>把 <code>ip</code> 和 <code>port</code> 换成和自己相对应的，比如在这里 <code>port</code> 就是 <code>9022</code>。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>使用 <code>curl</code> 测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:81</span><br></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><h2 id="批量删除容器"><a href="#批量删除容器" class="headerlink" title="批量删除容器"></a>批量删除容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">rm</span> $(docker container <span class="built_in">ls</span> -a -q)</span><br></pre></td></tr></table></figure><h2 id="批量删除镜像"><a href="#批量删除镜像" class="headerlink" title="批量删除镜像"></a>批量删除镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> $(docker  image  <span class="built_in">ls</span>   -a  -q)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/">Hexo博客部署到服务器</a></li><li><a href="https://blog.52itstyle.vip/archives/2402/">Docker学习之SSH连接docker容器</a></li><li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;经常迁移博客是件头疼的事，每次都要折腾一堆文件，所以折腾了一下，使用docker部署博客。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/vertical-logo-monochromatic-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>拖拽文件夹上传文件</title>
    <link href="https://i.jakeyu.top/2019/02/25/%E6%8B%96%E6%8B%BD%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://i.jakeyu.top/2019/02/25/%E6%8B%96%E6%8B%BD%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</id>
    <published>2019-02-25T17:07:10.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/javascript-illustration.png"></p><span id="more"></span><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traverseFileTree</span>(<span class="params">item, path</span>) &#123;</span><br><span class="line">  path = path || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">isFile</span>) &#123;</span><br><span class="line">    <span class="comment">// Get file</span></span><br><span class="line">    item.<span class="title function_">file</span>(<span class="keyword">function</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File:&quot;</span>, path + file.<span class="property">name</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">isDirectory</span>) &#123;</span><br><span class="line">    <span class="comment">// Get folder contents</span></span><br><span class="line">    <span class="keyword">var</span> dirReader = item.<span class="title function_">createReader</span>();</span><br><span class="line">    <span class="title function_">readerEntries</span>(dirReader, path, item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readEntries 每次最多返回100个，需要重复调用</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries</span></span><br><span class="line">functoin readerEntries (dirReader, path, item) &#123;</span><br><span class="line">  dirReader.<span class="title function_">readEntries</span>(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; entries.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">traverseFileTree</span>(entries[i], path + item.<span class="property">name</span> + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (entries.<span class="property">length</span>) <span class="title function_">readerEntries</span>(dirReader, path, item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">dropArea.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> items = event.<span class="property">dataTransfer</span>.<span class="property">items</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// webkitGetAsEntry is where the magic happens</span></span><br><span class="line">    <span class="keyword">var</span> item = items[i].<span class="title function_">webkitGetAsEntry</span>();</span><br><span class="line">    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">      <span class="title function_">traverseFileTree</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><a class="btn" href="https://caniuse.com/?search=mdn-api_datatransferitem_webkitgetasentry"><i class="fa fa-signal fa-fw fa-solid"></i>CanIUse</a><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries">FileSystemDirectoryReader - MDN</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/javascript-illustration.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Semver(npm 语义化版本号)</title>
    <link href="https://i.jakeyu.top/2019/01/10/Semver-npm-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://i.jakeyu.top/2019/01/10/Semver-npm-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7/</id>
    <published>2019-01-10T09:58:01.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/semver/3649824190-5ad41542bc553_articlex.png"></p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的包越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p><p>在依赖高的系统中发布新版本包可能很快会成为噩梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个依赖包改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本依赖被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p><p>因此，Github 起草了一个具有指导意义的，统一的版本号表示规则，称为 Semantic Versioning(语义化版本表示)。该规则规定了版本号如何表示，如何增加，如何进行比较，不同的版本号意味着什么。</p><h1 id="版本格式"><a href="#版本格式" class="headerlink" title="版本格式"></a>版本格式</h1><p>版本格式：<code>主版本号.次版本号.修订号</code>，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ol><p>先行版本号及版本编译元数据可以加到<code>主版本号.次版本号.修订号</code>的后面，作为延伸。</p><h1 id="先行版本"><a href="#先行版本" class="headerlink" title="先行版本"></a>先行版本</h1><p>当要发布<strong>大版本</strong>或者<strong>核心的 Feature</strong> 时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和 RC 版本。Semver规范中使用alpha、beta、rc (以前叫做gama)来修饰即将要发布的版本。它们的含义是：</p><ul><li>alpha: 内部版本</li><li>beta: 公测版本</li><li>rc: 即Release candiate，正式版本的候选版本</li></ul><p>比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc 后需要带上次数信息。</p><h1 id="版本发布准则"><a href="#版本发布准则" class="headerlink" title="版本发布准则"></a>版本发布准则</h1><p>列举出比较实用的一些规则：</p><ul><li>标准的版本号必须采用XYZ的格式，并且X、Y 和 Z 为非负的整数，禁止在数字前方补零，版本发布需要严格递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li><li>某个软件版本发行后，任何修改都必须以新版本发行。</li><li>1.0.0 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的API时，就可以发布 1.0.0 版本了。</li><li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较。</li></ul><h1 id="npm包依赖"><a href="#npm包依赖" class="headerlink" title="npm包依赖"></a>npm包依赖</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>项目对包的依赖可以使用下面的 3 种方法来表示(假设当前版本号是 16.2.0):</p><ul><li>兼容模块新发布的补丁版本：~16.2.0、16.2.x、16.2</li><li>兼容模块新发布的小版本、补丁版本：^16.2.0、16.x、16</li><li>兼容模块新发布的大版本、小版本、补丁版本：*、x</li></ul><h2 id=""><a href="#" class="headerlink" title="^"></a>^</h2><blockquote><p>允许在不修改 [major, minor, patch] 中最左非零数字的更改（匹配大于 X、Y、Z 的更新 Y、Z 的版本号）</p></blockquote><p>在 X.Y.Z 结构的版本号中，X、Y、Z 都是非负的整数，上面定义的意思就是说从左向右，遇到第一个非零数字是不可修改的，下一个数字可以更改，比如:</p><ul><li>X、Y、Z 都不为 0，<code>^15.6.1</code>,最左的非零数字是15，所以 X 是不允许更新的，也就是说主版本号不会超过15，表示的就是版本号<code>&gt;=15.6.1 &amp;&amp; &lt;16.0.0</code></li><li>如果 X 为 0，那么第一个非零数字就是 Y，就只能对 z 做出修改，<code>^0.1.2</code>表示版本号<code>&gt;=0.1.2 &amp;&amp; &lt; 0.2.0</code></li><li>如果 X、Y 的数字都是 0 的话，第一个非零数字就是 Z，表示的就是版本号不允许更新；<code>^0.0.2</code>，主版本号和次版本号都是 0，修订号为非零，表示的就是版本号<code>&gt;=0.0.2 &amp;&amp; &lt; 0.0.3</code></li></ul><h2 id="-1"><a href="#-1" class="headerlink" title="~"></a>~</h2><blockquote><p>匹配大于 <code>X.Y.Z</code> 的更新 <code>Z</code> 的版本号</p></blockquote><ul><li>X、Y、Z 都不为 0，<code>~1.2.3</code> 表示版本号 <code>&gt;=1.2.3 &amp;&amp; &lt; 1.3.0</code></li><li>X 为 0，<code>~0.2.3</code> 表示版本号 <code>&gt;=0.2.3 &amp;&amp; &lt; 0.3.0</code>，这种情况下，~ 等价于 ^</li><li>X、Y 为0，<code>0.0.3</code> 表示版本号 <code>&gt;=0.0.3 &amp;&amp; &lt; 0.1.0</code></li></ul><h2 id="x"><a href="#x" class="headerlink" title="x"></a>x</h2><blockquote><p>可以替代 X、Y、Z 中任意一个，表示该位置可更新</p></blockquote><ul><li><strong>1.2.x</strong>: <code>&gt;=1.2.0 &amp;&amp; &lt; 1.3.0</code></li><li><strong>1.x</strong>: <code>&gt;=1.0.0 &amp;&amp; &lt; 2.0.0</code></li><li><strong>*</strong>: 任意版本都可以</li></ul><p>上面的 <code>x</code> 可以用 <code>*</code> 代替，其实，用 <code>x</code> 或 <code>*</code> 的地方可以省略不写，比如 <code>1.2.x</code> 和 <code>1.2</code> 表示的意思是一样的</p><h1 id="npm包发布"><a href="#npm包发布" class="headerlink" title="npm包发布"></a>npm包发布</h1><p>通常我们发布一个包到 npm 仓库时，我们的做法是先修改 <code>package.json</code> 为某个版本，然后执行 <code>npm publish</code> 命令。手动修改版本号的做法建立在你对 Semver 规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从 Semver 规范：</p><ul><li>升级补丁版本号：npm version patch</li><li>升级小版本号：npm version minor</li><li>升级大版本号：npm version major</li></ul><p>当执行 <code>npm publish</code> 时，会首先将当前版本发布到 <code>npm registry</code>，然后更新 <code>dist-tags.latest</code> 的值为新版本。<br>当执行 <code>npm publish --tag=next</code> 时，会首先将当前版本发布到 <code>npm registry</code>，并且更新 <code>dist-tags.next</code> 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://semver.org/lang/zh-CN/">https://semver.org/lang/zh-CN/</a></li><li><a href="https://juejin.im/post/5ad413ba6fb9a028b5485866">Semver(语义化版本号)扫盲 - 腾讯IVWEB团队</a></li><li><a href="https://juejin.im/post/5a1ad2166fb9a044fd117874">语义化版本控制模块-Semver</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/semver/3649824190-5ad41542bc553_articlex.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>antd upload组件不能显示参数图片缩略图</title>
    <link href="https://i.jakeyu.top/2018/12/13/antd-upload%E7%BB%84%E4%BB%B6%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%8F%82%E6%95%B0%E5%9B%BE%E7%89%87%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>https://i.jakeyu.top/2018/12/13/antd-upload%E7%BB%84%E4%BB%B6%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%8F%82%E6%95%B0%E5%9B%BE%E7%89%87%E7%BC%A9%E7%95%A5%E5%9B%BE/</id>
    <published>2018-12-13T19:43:05.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>在使用<a href="https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn/">ant-design-vue</a>的upload组件时，无法显示加密图片，经过测试，凡是带参数的图片地址都无法显示缩略图。</p><span id="more"></span><h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><p>这个组件是基于<a href="https://github.com/ant-design/ant-design">ant-design</a>改写的，在issues中发现了解决办法 <a href="https://github.com/ant-design/ant-design/issues/10102#issuecomment-382748024">#10102</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  将图片转换成base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url 图片地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> base64Url = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">    reader.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      self.<span class="title function_">postMessage</span>(reader.<span class="property">result</span>) <span class="comment">//web worker 通信</span></span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(xhr.<span class="property">response</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>ajax</code>获取图片，并将图片转为<code>base64</code>。</p><h1 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h1><p>但是由于我开发的业务页面中有大量图片，如果每个图片都这样操作，页面会有些卡顿。所以需要进行优化。</p><p>我选择使用<code>Web Worker</code>，关于<code>Web Worker</code>可以查看阮一峰老师的文章： </p><ul><li><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">Web Worker 使用教程</a></li></ul><p>创建一个生成<code>Web Worker</code>的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建web worker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; f 要在worker中执行的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Strint</span>&#125; args 函数参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createWorker</span> = (<span class="params">f, args</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;(&#x27;</span> + f.<span class="title function_">toString</span>() + <span class="string">&#x27;)(&quot;&#x27;</span> + args + <span class="string">&#x27;&quot;)&#x27;</span>])</span><br><span class="line">  <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  <span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(url)</span><br><span class="line">  <span class="keyword">return</span> worker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myWorker = <span class="title function_">createWorker</span>(base64Url, url)</span><br><span class="line"><span class="comment">// 监听message事件</span></span><br><span class="line">myWorker.<span class="property">onmessage</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">data</span>)  <span class="comment">//打印转换后的base64</span></span><br><span class="line">  myWorker.<span class="title function_">terminate</span>()  <span class="comment">//销毁 web worker</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用&lt;a href=&quot;https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn/&quot;&gt;ant-design-vue&lt;/a&gt;的upload组件时，无法显示加密图片，经过测试，凡是带参数的图片地址都无法显示缩略图。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Object 方法</title>
    <link href="https://i.jakeyu.top/2018/12/10/Object-preventExtensions-Object-seal-Object-freeze/"/>
    <id>https://i.jakeyu.top/2018/12/10/Object-preventExtensions-Object-seal-Object-freeze/</id>
    <published>2018-12-10T09:51:48.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">方法</th><th align="left">描述</th><th>详情</th></tr></thead><tbody><tr><td align="left">Object.preventExtensions()</td><td align="left">让一个对象变的不可扩展，也就是永远不能再添加新的属性。</td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">MDN</a></td></tr><tr><td align="left">Object.isExtensible()</td><td align="left">判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible">MDN</a></td></tr><tr><td align="left">Object.seal()</td><td align="left">封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">MDN</a></td></tr><tr><td align="left">Object.isSealed()</td><td align="left">判断一个对象是否被密封。</td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed">MDN</a></td></tr><tr><td align="left">Object.freeze()</td><td align="left">冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">MDN</a></td></tr><tr><td align="left">Object.isFrozen()</td><td align="left">判断一个对象是否被冻结。</td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen">MDN</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;方法&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;th&gt;详情&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Object.preven</summary>
      
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>flex的各种值</title>
    <link href="https://i.jakeyu.top/2018/12/08/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/"/>
    <id>https://i.jakeyu.top/2018/12/08/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/</id>
    <published>2018-12-08T17:51:26.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/bg2015071002.png"></p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p></blockquote><p>关于详细<code>flex</code>使用，可以查看<a href="http://www.ruanyifeng.com/">阮一峰</a>的两篇文章:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool">Flex 布局教程：语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先明确一点是， <code>flex</code> 是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的缩写。故其取值可以考虑以下情况：</p><p><code>flex</code> 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 <code>flex</code> 的默认值是 <code>0 1 auto</code>。同理，如下是等同的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2333</span> <span class="number">3222</span> <span class="number">234px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2333</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">3222</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">234px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为 <code>none</code>，则计算值为 <code>0 0 auto</code>，如下是等同的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为 <code>auto</code>，则计算值为 <code>1 1 auto</code>，如下是等同的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: auto;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为一个非负数字，则该数字为 <code>flex-grow</code> 值，<code>flex-shrink</code> 取 1，<code>flex-basis</code> 取 0%，如下是等同的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为一个长度或百分比，则视为 <code>flex-basis</code> 值，<code>flex-grow</code> 取 1，<code>flex-shrink</code> 取 1，有如下等同情况（注意 <code>0%</code> 是一个百分比而不是一个非负数字）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;<span class="attribute">flex</span>: <span class="number">0%</span>;&#125;</span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;<span class="attribute">flex</span>: <span class="number">24px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为两个非负数字，则分别视为 <code>flex-grow</code> 和 <code>flex-shrink</code> 的值，<code>flex-basis</code> 取 0%，如下是等同的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2</span> <span class="number">3</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>flex</code> 取值为一个非负数字和一个长度或百分比，则分别视为 <code>flex-grow</code> 和 <code>flex-basis</code> 的值，<code>flex-shrink</code> 取 1，如下是等同的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">2333</span> <span class="number">3222px</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2333</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">3222px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex-basis</code> 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。<code>flex-basis</code> 规定的范围取决于 <code>box-sizing</code>。这里主要讨论以下 <code>flex-basis</code> 的取值情况：</p><ul><li><strong>auto</strong>：首先检索该子元素的主尺寸，如果主尺寸不为 <code>auto</code>，则使用值采取主尺寸之值；如果也是 <code>auto</code>，则使用值为 <code>content</code>。</li><li><strong>content</strong>：指根据该子元素的内容自动布局。有的用户代理没有实现取 <code>content</code> 值，等效的替代方案是 <code>flex-basis</code> 和主尺寸都取 <code>auto</code>。</li><li><strong>百分比</strong>：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 <code>auto</code> 一样。</li></ul><p>举一个不同的值之间的区别：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: darkblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe height='265' scrolling='no' title='flex 不同的值' src='//codepen.io/JakeLaoyu/embed/OrLrZP/?height=265&theme-id=light&default-tab=css,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/JakeLaoyu/pen/OrLrZP/'>flex 不同的值</a> by Jake (<a href='https://codepen.io/JakeLaoyu'>@JakeLaoyu</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><ul><li>主轴上父容器总尺寸为 600px</li><li>子元素的总基准值是：0% + auto + 200px &#x3D; 300px，其中<ul><li>0% 即 0 宽度</li><li>auto 对应取主尺寸即 100px</li></ul></li><li>故剩余空间为 600px - 300px &#x3D; 300px</li><li>伸缩放大系数之和为： 2 + 2 + 1 &#x3D; 5</li><li>剩余空间分配如下：<ul><li>item-1 和 item-2 各分配 2&#x2F;5，各得 120px</li><li>item-3 分配 1&#x2F;5，得 60px</li></ul></li><li>各项目最终宽度为：<ul><li>item-1 &#x3D; 0% + 120px &#x3D; 120px</li><li>item-2 &#x3D; auto + 120px &#x3D; 220px</li><li>item-3 &#x3D; 200px + 60px &#x3D; 260px</li></ul></li><li>当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设</li><li>而 item-2 基准值取 <code>auto</code> 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://segmentfault.com/q/1010000004080910/a-1020000004121373">https://segmentfault.com/q/1010000004080910/a-1020000004121373</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/flex%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC/bg2015071002.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>层叠顺序（stacking level）与堆栈上下文（stacking context）</title>
    <link href="https://i.jakeyu.top/2018/12/01/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%EF%BC%88stacking-level%EF%BC%89%E4%B8%8E%E5%A0%86%E6%A0%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89/"/>
    <id>https://i.jakeyu.top/2018/12/01/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%EF%BC%88stacking-level%EF%BC%89%E4%B8%8E%E5%A0%86%E6%A0%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89/</id>
    <published>2018-12-01T18:04:35.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><code>z-index</code> 看上去其实很简单，根据 <code>z-index</code> 的高低决定层叠的优先级，实则深入进去，会发现内有乾坤。</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>看看下面这题，定义两个 <code>div</code> A 和 B，被包括在同一个父 <code>div</code> 标签下。HTML结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span>#divA display:inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span> #divB float:left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:deeppink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>:yellowgreen;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概描述起来，意思就是拥有共同父容器的两个 <code>DIV</code> 重叠在一起，是 <code>display:inline-block</code> 叠在上面，还是 <code>float:left</code> 叠在上面？</p><p>注意这里 DOM 的顺序，是先生成 display:inline-block ，再生成 float:left 。当然也可以把两个的 DOM 顺序调转如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span> #divB float:left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span>#divA display:inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会发现，无论顺序如何，始终是 display:inline-block 的 div 叠在上方。</p><p><a href="https://codepen.io/Chokcoco/pen/gwLYNy">DEMO戳我</a></p><p>这里其实是涉及了所谓的层叠水平（stacking level)，有一张图可以很好的诠释：</p><p><img data-src="//blogimg.jakeyu.top/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%EF%BC%88stacking-level%EF%BC%89%E4%B8%8E%E5%A0%86%E6%A0%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89/687474703a2f2f696d616765732e636e626c6f67732e636f6d2f636e626c6f67735f636f6d2f636f636f31732f3838313631342f6f5f737461636b696e676c6576656c2e706e67.png"></p><p>运用上图的逻辑，上面的题目就迎刃而解，<code>inline-blcok</code> 的 <code>stacking level</code> 比之 <code>float</code> 要高，所以无论 DOM 的先后顺序都堆叠在上面。</p><p>不过上面图示的说法有一些不准确，按照 <a href="https://www.w3.org/TR/CSS2/visuren.html#propdef-z-index">W3官方</a> 的说法，准确的 7 层为：</p><ol><li>the background and borders of the element forming the stacking context.</li><li>the child stacking contexts with negative stack levels (most negative first).</li><li>the in-flow, non-inline-level, non-positioned descendants.</li><li>the non-positioned floats.</li><li>the in-flow, inline-level, non-positioned descendants, including inline tables and inline blocks.</li><li>the child stacking contexts with stack level 0 and the positioned descendants with stack level 0.</li><li>the child stacking contexts with positive stack levels (least positive first).</li></ol><p>稍微翻译一下：</p><ol><li>形成堆叠上下文环境的元素的背景与边框</li><li>拥有负 <code>z-index</code> 的子堆叠上下文元素 （负的越高越堆叠层级越低）</li><li>正常流式布局，非 <code>inline-block</code>，无 <code>position</code> 定位（static除外）的子元素</li><li>无 <code>position</code> 定位（static除外）的 float 浮动元素</li><li>正常流式布局， <code>inline-block</code>元素，无 <code>position</code> 定位（static除外）的子元素（包括 display:table 和 display:inline ）</li><li>拥有 <code>z-index:0</code> 的子堆叠上下文元素</li><li>拥有正 <code>z-index:</code> 的子堆叠上下文元素（正的越低越堆叠层级越低）</li></ol><p>所以我们的两个 <code>div</code> 的比较是基于上面所列出来的 4 和 5 。5 的 <code>stacking level</code> 更高，所以叠得更高。</p><p>不过！不过！不过！重点来了，请注意，上面的比较是基于两个 div 都没有形成 堆叠上下文 这个为基础的。下面我们修改一下题目，给两个 <code>div</code> ，增加一个 <code>opacity</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.9</span>; // 注意这里，增加一个 <span class="attribute">opacity</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:deeppink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>:yellowgreen;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/Chokcoco/pen/qaqdqA">DEMO戳我</a></p><p>会看到，<code>inline-block</code> 的 <code>div</code> 不再一定叠在 <code>float</code> 的 <code>div</code> 之上，而是和 <code>HTML</code> 代码中 <code>DOM</code> 的堆放顺序有关，后添加的 <code>div</code> 会 叠在先添加的 <code>div</code> 之上。</p><p>这里的关键点在于，添加的 <code>opacity:0.9</code> 这个让两个 <code>div</code> 都生成了 <code>stacking context（堆叠上下文）</code> 的概念。此时，要对两者进行层叠排列，就需要 <code>z-index</code> ，<code>z-index</code> 越高的层叠层级越高。</p><p>堆叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向（电脑屏幕的）视窗或者网页的用户的 <code>z</code> 轴上延伸，<code>HTML</code> 元素依据其自身属性按照优先级顺序占用层叠上下文的空间。</p><p>那么，如何触发一个元素形成 <code>堆叠上下文</code> ？方法如下，摘自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context">MDN</a>：</p><ul><li>根元素 (HTML),</li><li>z-index 值不为 “auto”的 绝对&#x2F;相对定位，</li><li>一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex，</li><li>opacity 属性值小于 1 的元素（参考 the specification for opacity），</li><li>transform 属性值不为 “none”的元素，</li><li>mix-blend-mode 属性值不为 “normal”的元素，</li><li>filter值不为“none”的元素，</li><li>perspective值不为“none”的元素，</li><li>isolation 属性被设置为 “isolate”的元素，</li><li>position: fixed</li><li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值</li><li>-webkit-overflow-scrolling 属性被设置 “touch”的元素</li></ul><p>所以，上面我们给两个 <code>div</code> 添加 <code>opacity</code> 属性的目的就是为了形成 <code>stacking context</code>。也就是说添加 <code>opacity</code> 替换成上面列出来这些属性都是可以达到同样的效果。</p><p>在层叠上下文中，其子元素同样也按照上面解释的规则进行层叠。 特别值得一提的是，其子元素的 <code>z-index</code> 值只在父级层叠上下文中有意义。意思就是父元素的 <code>z-index</code> 低于父元素另一个同级元素，子元素 <code>z-index</code> 再高也没用。</p><p>理解上面的 <code>stacking-level</code> 与 <code>stacking-context</code> 是理解 <code>CSS</code> 的层叠顺序的关键。</p><h1 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h1><ul><li><a href="https://github.com/chokcoco/iCSS/issues/1">谈谈一些有趣的CSS题目（1~5） · Issue #1 · chokcoco&#x2F;iCSS</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt; 看上去其实很简单，根据 &lt;code&gt;z-index&lt;/code&gt; 的高低决定层叠的优先级，实则深入进去，会发现内有乾坤。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://i.jakeyu.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>获取元素样式</title>
    <link href="https://i.jakeyu.top/2018/11/29/getComputedStyle/"/>
    <id>https://i.jakeyu.top/2018/11/29/getComputedStyle/</id>
    <published>2018-11-29T21:55:35.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>引用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle">MND</a>的说明：</p><blockquote><p>Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。</p></blockquote><span id="more"></span><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(element, [pseudoElt]);</span><br></pre></td></tr></table></figure><ul><li><strong>element</strong>: 用语获取计算样式的Element</li><li><strong>pseudoElt</strong>: 指定一个要匹配的伪元素的字符串。必须对普通元素省略（或null）。</li></ul><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(dom , <span class="string">&quot;:after&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(dom , <span class="string">&quot;:after&quot;</span>).<span class="property">content</span></span><br></pre></td></tr></table></figure><h1 id="getComputedStyle与style的区别"><a href="#getComputedStyle与style的区别" class="headerlink" title="getComputedStyle与style的区别"></a>getComputedStyle与style的区别</h1><p>我们使用<code>element.style</code>也可以获取元素的CSS样式声明对象，但是其与<code>getComputedStyle</code>方法还有有一些差异的。</p><ol><li>只读与可写</li></ol><ul><li>正如上面提到的<code>getComputedStyle</code>方法是只读的，只能获取样式，不能设置；而<code>element.style</code>能读能写，能屈能伸。</li></ul><ol start="2"><li>获取的对象范围</li></ol><ul><li><code>getComputedStyle</code>方法获取的是最终应用在元素上的所有CSS属性对象（即使没有CSS代码，也会把默认的祖宗八代都显示出来）；而<code>element.style</code>只能获取元素<code>style</code>属性中的CSS样式。因此对于一个光秃秃的元素<code>&lt;p&gt;</code>，<code>getComputedStyle</code>方法返回对象中<code>length</code>属性值（如果有）就是190+(据我测试FF:192, IE9:195, Chrome:253, 不同环境结果可能有差异), 而<code>element.style</code>就是<code>0</code>。</li></ul><h1 id="getComputedStyle与defaultView"><a href="#getComputedStyle与defaultView" class="headerlink" title="getComputedStyle与defaultView"></a>getComputedStyle与defaultView</h1><p>许多在线的演示代码中，<code>getComputedStyle</code>是通过 <code>document.defaultView</code> 对象来调用的。大部分情况下，这是不需要的，因为可以直接通过<code>window</code>对象调用。但有一种情况，你必需要使用 <code>defaultView</code>,  那是在firefox3.6上访问子框架内的样式 。</p><h1 id="getPropertyValue"><a href="#getPropertyValue" class="headerlink" title="getPropertyValue"></a>getPropertyValue</h1><p><code>getPropertyValue</code>方法可以获取CSS样式申明对象上的属性值（直接属性名称），例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(element, <span class="literal">null</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&quot;float&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果我们不使用<code>getPropertyValue</code>方法，直接使用键值访问，其实也是可以的。但是，比如这里的的<code>float</code>，如果使用键值访问，则不能直接使用<code>getComputedStyle(element, null).float</code>，而应该是<code>cssFloat</code>与<code>styleFloat</code>，自然需要浏览器判断了，比较折腾！</p><p>使用<code>getPropertyValue</code>方法不必可以驼峰书写形式（不支持驼峰写法），例如：<code>style.getPropertyValue(&quot;border-top-left-radius&quot;)</code></p><h1 id="获取变量"><a href="#获取变量" class="headerlink" title="获取变量"></a>获取变量</h1><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attr">--testMargin</span>:<span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  读取</span></span><br><span class="line"><span class="keyword">var</span> root = <span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>);</span><br><span class="line"><span class="keyword">var</span> cssVariable = root.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;--testMargin&#x27;</span>).<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cssVariable); <span class="comment">// &#x27;75px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--testMargin&#x27;</span>, <span class="string">&#x27;100px&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="CSSStyleDeclaration"><a href="#CSSStyleDeclaration" class="headerlink" title="CSSStyleDeclaration"></a>CSSStyleDeclaration</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><code>CSSStyleDeclaration</code> 表示一个CSS属性键值对的集合。它被用于一些API中：</p><ul><li><code>HTMLElement.style</code> - 用于操作单个元素的样式(<elem style="...">)；</li><li>(TODO: reword) 作为 <a href="https://www.w3.org/TR/1998/REC-CSS2-19980512/syndata.html#block">declaration block</a> 的接口，当规则为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSRule">CSSStyleRule</a> 时，由stylesheet中的 style  属性返回 。</li><li><code>CSSStyleDeclaration</code>也是由<code>window.getComputedStyle()</code>返回的只读接口.</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><code>CSSStyleDeclaration.getPropertyPriority()</code>: 返回可选的优先级，”Important”, 例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priString= styleObj.<span class="title function_">getPropertyPriority</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><code>CSSStyleDeclaration.getPropertyValue()</code>: 返回属性值。例如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valString= styleObj.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><code>CSSStyleDeclaration.item()</code>: 返回属性名。 例如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameString= styleObj.<span class="title function_">item</span>(<span class="number">0</span>) <span class="title class_">Alternative</span>: nameString= styleObj[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><code>CSSStyleDeclaration.removeProperty()</code>: 返回被删除的属性。例如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valString= styleObj.<span class="title function_">removeProperty</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><code>CSSStyleDeclaration.setProperty()</code>: 没有返回值。例如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">styleObj.<span class="title function_">setProperty</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;important&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><code>CSSStyleDeclaration.getPropertyCSSValue()</code>: 仅支持通过getComputedStyle的方式。 在Firefox (CSSPrimitiveValue中返回  ROCSSPrimitiveValue, 在其他实现 CSSValue，或为null 速记属性。</li></ul><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><iframe data-feature="getcomputedstyle" src="https://caniuse.bitsofco.de/embed/index.html?feat=getcomputedstyle&periods=current&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle">MDN</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/">获取元素CSS值之getComputedStyle方法熟悉–张鑫旭</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration">CSSStyleDeclaration–MDN</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;引用&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle&quot;&gt;MND&lt;/a&gt;的说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
    <category term="CSS" scheme="https://i.jakeyu.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>格式化上下文</title>
    <link href="https://i.jakeyu.top/2018/11/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://i.jakeyu.top/2018/11/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2018-11-28T17:32:07.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>BFC 是 <code>W3C CSS 2.1</code> 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。</p><span id="more"></span><h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><p>BFC 也叫<strong>块格式化上下文</strong></p><h2 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h2><p>在解释 BFC 是什么之前，需要先介绍 <code>Box</code>、<code>Formatting Context</code> 的概念。</p><h3 id="Box-CSS布局的基本单位"><a href="#Box-CSS布局的基本单位" class="headerlink" title="Box: CSS布局的基本单位"></a>Box: CSS布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 <code>Box</code> 组成的。元素的类型和 <code>display</code> 属性，决定了这个 <code>Box</code> 的类型。 不同类型的 <code>Box</code>， 会参与不同的 <code>Formatting Context</code>（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p><ul><li><strong>block-level</strong> box:display 属性为 <code>block</code>, <code>list-item</code>, <code>table</code> 的元素，会生成 <code>block-level box</code>。并且参与 <code>block fomatting context</code>；</li><li><strong>inline-level</strong> box:display 属性为 <code>inline</code>, <code>inline-block</code>, <code>inline-table</code> 的元素，会生成 <code>inline-level box</code>。并且参与 <code>inline formatting context</code>；</li><li><strong>run-in</strong> box: CSS3 中才有， 这儿先不讲了。</li></ul><h3 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="Formatting context"></a>Formatting context</h3><p><strong>Formatting context</strong> 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 <strong>Formatting context</strong> 有 <code>Block fomatting context</code> (简称BFC)和<code> Inline formatting context</code> (简称IFC)。</p><p>CSS2.1 中只有 <code>BFC</code> 和 <code>IFC</code>, CSS3 中还增加了 <code>GFC</code> 和 <code>FFC</code>。</p><h3 id="BFC-定义"><a href="#BFC-定义" class="headerlink" title="BFC 定义"></a>BFC 定义</h3><p><strong>BFC(Block formatting context)</strong> 直译为”块级格式化上下文”。它是一个独立的渲染区域，只有 <strong>Block-level Box</strong> 参与， 它规定了内部的 <strong>Block-level Box</strong> 如何布局，并且与这个区域外部毫不相干。</p><h3 id="BFC布局规则："><a href="#BFC布局规则：" class="headerlink" title="BFC布局规则："></a>BFC布局规则：</h3><ul><li>内部的 <strong>Box</strong> 会在垂直方向，一个接一个地放置。</li><li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li><li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC 的区域不会与 float box 重叠。</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ul><h2 id="哪些元素会生成BFC"><a href="#哪些元素会生成BFC" class="headerlink" title="哪些元素会生成BFC?"></a>哪些元素会生成BFC?</h2><ul><li>根元素</li><li><code>float</code> 属性不为 <code>none</code></li><li><code>position</code> 为 <code>absolute</code> 或 <code>fixed</code></li><li><code>display</code> 为 <code>inline-block</code>, <code>table-cell</code>, <code>table-caption</code>, <code>flex</code>, <code>inline-flex</code></li><li><code>overflow</code> 不为 <code>visible</code></li></ul><h2 id="BFC的作用及原理"><a href="#BFC的作用及原理" class="headerlink" title="BFC的作用及原理"></a>BFC的作用及原理</h2><h3 id="自适应两栏布局"><a href="#自适应两栏布局" class="headerlink" title="自适应两栏布局"></a>自适应两栏布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f66</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面：</p><p><img data-src="//blogimg.jakeyu.top/BFC/4dca44a927d4c1ffc30e3ae5f53a0b79.png"></p><p>根据BFC布局规则第3条：</p><blockquote><p>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p></blockquote><p>因此，虽然存在浮动的元素aslide，但main的左边依然会与包含块的左边相接触。</p><p>根据BFC布局规则第四条：</p><blockquote><p>BFC 的区域不会与 float box 重叠。</p></blockquote><p>我们可以通过通过触发 main 生成 BFC， 来实现自适应两栏布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当触发 main 生成 BFC 后，这个新的 BFC 不会与浮动的 aside 重叠。因此会根据包含块的宽度，和 aside 的宽度，自动变窄。效果如下：</p><p><img data-src="//blogimg.jakeyu.top/BFC/t01077886a9706cb26b.png"></p><h3 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面：</p><p><img data-src="//blogimg.jakeyu.top/BFC/t016035b58195e7909a.png"></p><p>根据 BFC 布局规则第六条：</p><blockquote><p>计算 BFC 的高度时，浮动元素也参与计算</p></blockquote><p>为达到清除内部浮动，我们可以触发 par 生成 BFC，那么 par 在计算高度时，par 内部的浮动元素 child 也会参与计算。</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下:</p><p><img data-src="//blogimg.jakeyu.top/BFC/t016bbbe5236ef1ffd5.png"></p><h3 id="防止垂直-margin-重叠"><a href="#防止垂直-margin-重叠" class="headerlink" title="防止垂直 margin 重叠"></a>防止垂直 margin 重叠</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面：</p><p><img data-src="//blogimg.jakeyu.top/BFC/t01b47b8b7d153c07cc.png"></p><p>两个p之间的距离为100px，发送了margin重叠。<br>根据BFC布局规则第二条：</p><blockquote><p>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</p></blockquote><p>我们可以在 p 外面包裹一层容器，并触发该容器生成一个 BFC。那么两个 P 便不属于同一个 BFC，就不会发生 margin 重叠了。<br>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img data-src="//blogimg.jakeyu.top/BFC/t0118d1d2badbb00521.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实以上的几个例子都体现了BFC布局规则第五条：</p><blockquote><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p></blockquote><p>因为 BFC 内部的元素和外部的元素绝对不会互相影响，因此， 当 BFC 外部存在浮动时，它不应该影响 BFC 内部 Box 的布局，BFC 会通过变窄，而不与浮动有重叠。同样的，当 BFC 内部有浮动时，为了不影响外部元素的布局，BFC 计算高度时会包括浮动的高度。避免 margin 重叠也是这样的一个道理。</p><h1 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h1><p>IFC(Inline Formatting Contexts)即 <strong>内联排版上下文</strong>，也可称为 <strong>内联格式化上下文</strong>。用来规定内联级盒子的格式化规则。</p><h2 id="布局规则"><a href="#布局规则" class="headerlink" title="布局规则"></a>布局规则</h2><ol><li>内部的<code>Box</code>会在水平方向，一个接一个地放置。</li><li>这些<code>Box</code>垂直方向的起点从包含块盒子的顶部开始。</li><li>摆放这些<code>Box</code>的时候，它们在水平方向上的外边距、边框、内边距所占用的空间都会被考虑在内。</li><li>在垂直方向上，这些框可能会以不同形式来对齐（<code>vertical-align</code>）：它们可能会使用底部或顶部对齐，也可能通过其内部的文本基线（<code>baseline</code>）对齐。</li><li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框（<code>line box</code>）。行框的宽度是由包含块（<code>containing box</code>）和存在的浮动来决定。</li><li>IFC中的<code>line box</code>一般左右边都贴紧其包含块，但是会因为<code>float</code>元素的存在发生变化。<code>float</code>元素会位于IFC与<code>line box</code>之间，使得<code>line box</code>宽度缩短。</li><li>IFC中的<code>line box</code>高度由CSS行高计算规则来确定，同个IFC下的多个<code>line box</code>高度可能会不同（比如一行包含了较高的图片，而另一行只有文本）。</li><li>当<code>inline-level box</code>的总宽度少于包含它们的<code>line box</code>时，其水平渲染规则由<code>text-align</code>属性来确定，如果取值为<code>justify</code>，那么浏览器会对<code>inline-box</code>（注意不是inline-table 和 inline-block box）中的文字和空格做 出拉伸。</li><li>当一个<code>inline box</code>超过<code>line box</code>的宽度时，它会被分割成多个box，这些box被分布在多个<code>line box</code>里。如果一个<code>inline box</code>不能被分割（比如只包含单个字符，或<code>word-breaking</code>机制被禁用，或该行内框受<code>white-space</code>属性值 为<code>nowrap</code>或<code>pre</code>的影响），那么这个<code>inline box</code>将溢出这个<code>line box</code>。</li></ol><blockquote><p>上面的术语可能会看得有点迷糊，一会儿inline box，一会儿line box。line box是 <strong>行框</strong>，inline box是 <strong>行内框</strong>（或称为 <strong>内联框</strong>），我们可简单按字面意思来理解：行内框是包含在行框内（或多个行框内，当出现换行时）的。</p></blockquote><h2 id="行框和行内框"><a href="#行框和行内框" class="headerlink" title="行框和行内框"></a>行框和行内框</h2><h3 id="行框"><a href="#行框" class="headerlink" title="行框"></a>行框</h3><p><img data-src="//blogimg.jakeyu.top/BFC/o_text_021.gif"></p><p>行框（line box），同行内框类似的概念，行框是指本行的一个虚拟的矩形框，也是浏览器渲染模式中的一个概念。行框高度等于本行内所有元素中行内框最大的值（以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度）。</p><h3 id="行内框"><a href="#行内框" class="headerlink" title="行内框"></a>行内框</h3><p><img data-src="//blogimg.jakeyu.top/BFC/o_text_020.gif"></p><p>行内框是一个浏览器渲染模型中的一个概念，无法显示出来，但是它又确实存在，它的高度就是行高指定的高度。</p><h2 id="何时会生成IFC"><a href="#何时会生成IFC" class="headerlink" title="何时会生成IFC"></a>何时会生成IFC</h2><p>和BFC可以被元素属性触发而被创建（triggered）不同，IFC只有在一个块元素中仅包含内联级别元素时才会生成。</p><p>下面我们通过一个实例来看看行内框的构造：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Several <span class="tag">&lt;<span class="name">em</span>&gt;</span>emphasized words<span class="tag">&lt;/<span class="name">em</span>&gt;</span> appear <span class="tag">&lt;<span class="name">strong</span>&gt;</span>in this<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> sentence, dear.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: whitesmoke;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: medium;</span><br><span class="line">    <span class="attribute">border-style</span>: dashed;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img data-src="//blogimg.jakeyu.top/BFC/Jietu20181128-225810.png"></p><p>p 元素产生一个块框，它包含了五个行内框，其中的三个是匿名的：</p><ul><li>匿名：”Several”</li><li>EM: “emphasized words”</li><li>匿名：”appear”</li><li>STRONG: “in this”</li><li>匿名：”sentence, dear.”</li></ul><p>为了格式化这个段落，用户代理将这五个框排入行框内。本例中，为 p 元素生成的框生成了行内框的包含块。如果该包含块足够宽，则所有的行内框将放在一个行框内。</p><p>否则inline box将产生分割，来放置在多个行框内。如上例中所示，这个段落被分布在3个行框中。您可以在上例中修改p元素的width来查看不同的格式化效果。</p><p>上例中，em元素被分割成2块（我们把它们称为“split1”和“split2”），margin、padding、border和text-decoration属性将不在分割处产生视觉效果，也就是在split1之后和split2之前无效。</p><p>回过来看上面的例子中这些属性的影响：</p><ul><li>margin 会被插入到 “emphasized” 之前和 “words” 之后。</li><li>padding 会被插入到 “emphasized” 的前面和上下，以及 “words” 的后面和上下。</li><li>border 将绘制在 “emphasized” 的前面和上下，以及 “words” 的后面和上下。</li></ul><h2 id="IFC有什么用途"><a href="#IFC有什么用途" class="headerlink" title="IFC有什么用途"></a>IFC有什么用途</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用IFC布局，display:inline-block、text-align:center和vertical-align:middle方法来实现文本垂直居中 inline-block元素以单个封闭块来参与外部的IFC，其内部会生成一个BFC，不在本例讨论范围之内。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: normal;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img data-src="//blogimg.jakeyu.top/BFC/Jietu20181128-230214.png"></p><ul><li>我们使用一个块元素来包含一个内联元素，这样会生成一个IFC来规定如何渲染行内元素。按照IFC行内框的布局规则，其水平位置将由text-align属性来确定，所以设置text-align:center将把行内框居中。</li><li>外部块元素的行高为内部行框设定了最小高度，好比在渲染时以一个隐藏的0宽度字符开始，具备该块元素所设置的行高（本例中为300px）和字体属性，我们称之为是一个支架（strut），作用是把外部块元素撑起来。参考阅读W3规范：<a href="https://www.w3.org/TR/CSS2/visudet.html#strut">Strut</a>。</li><li>然后我们设置内联（或内联块）元素的垂直对齐属性为中间，它将参照前述的隐藏支架的baseline来对齐。如果我们把块元素的字体设置为0，实际效果就是内联元素被垂直居中放置在块元素中。</li></ul><h2 id="行高计算"><a href="#行高计算" class="headerlink" title="行高计算"></a>行高计算</h2><p>用户代理（user agent）将行内级框排入垂直堆叠的行框内。行框的高度由下面步骤决定：</p><ol><li>计算行框里的各行内级框的高度。对于置换元素、行内块元素、行内表格元素来说，这是边界框的高度，对于行内框来说，这是其‘line-height’。</li><li>行内级元素根据其<code>vertical-align</code>属性垂直对齐。如果这些框使用<code>top</code>或<code>bottom</code>对齐，用户代理必须以最小化行框的高为目标对齐这些框。这可能存在多种对齐方案，CSS 2.1并不定义行框基线的位置（也就是前述strut的位置）。</li><li>行框的高是最顶端框的顶边到最底端框的底边的距离。</li></ol><blockquote><p>空的行内元素产生空的行内框，但是这些框仍然拥有margins, padding, borders 和一个line height, 所以在上述行高计算中和有内容的行内元素一样。</p></blockquote><h3 id="行距（Leading）和半行距（half-leading）"><a href="#行距（Leading）和半行距（half-leading）" class="headerlink" title="行距（Leading）和半行距（half-leading）"></a>行距（Leading）和半行距（half-leading）</h3><p>CSS 假设所有字体的度量都有基线以上的height和基线以下的depth，我们使用A（ascender）来表示这个height（字母高出基线部分），而用D（descender）来表示depth（字母低出基线部分）。</p><p>同时我们定义 AD &#x3D; A + D，也就是整个字母的高度。</p><p>User agent 必须在一个非替换行内框中按照字符（glyphs）的基线对它们进行对齐。也就是确定A 和 D。 某元素中的字符可能存在多个字体，A 和 D则不尽相同。如果这个行内框不包含任何字符，它被认为包含一个strut（一个0宽度的隐藏字符），这个隐藏字符的A 和 D遵循该元素的第一个有效字体。</p><p>除了前面所介绍的BFC和IFC之外，CSS3还引入了新的布局方式及其所生成的格式化上下文，包括grid layout所对应的GFC（grid formatting context）和flex layout所对应的FFC（flex formatting context）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html">前端精选文摘：BFC 神奇背后的原理</a></li><li><a href="http://techbrood.com/h5b2a?p=css-ifc">CSS 内联排版上下文（Inline Formatting Context）</a></li><li><a href="https://blog.csdn.net/zp1996323/article/details/51457836">css中的baseline</a></li><li><a href="https://blog.csdn.net/q121516340/article/details/51483439">深入理解 CSS 中的行高与基线</a></li><li><a href="https://segmentfault.com/a/1190000006808606">img的间隙</a></li><li><a href="https://www.cnblogs.com/zxjwlh/p/6219896.html">inline-block元素vertical-align的问题分析</a></li><li><a href="https://github.com/chokcoco/iCSS/issues/5">谈谈一些有趣的CSS题目</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;BFC 是 &lt;code&gt;W3C CSS 2.1&lt;/code&gt; 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://i.jakeyu.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css响应式正方形居中</title>
    <link href="https://i.jakeyu.top/2018/11/27/css%E5%93%8D%E5%BA%94%E5%BC%8F%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%B1%85%E4%B8%AD/"/>
    <id>https://i.jakeyu.top/2018/11/27/css%E5%93%8D%E5%BA%94%E5%BC%8F%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%B1%85%E4%B8%AD/</id>
    <published>2018-11-27T21:39:47.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><code>body -&gt; div#box</code>，body铺满屏幕，box是一个宽度为body一半的正方形，用css使box垂直水平居中。</p><span id="more"></span><p><code>padding</code>百分比继承自父元素宽度，然后通过绝对定位和<code>translate</code>来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;body -&amp;gt; div#box&lt;/code&gt;，body铺满屏幕，box是一个宽度为body一半的正方形，用css使box垂直水平居中。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>经典排序算法</title>
    <link href="https://i.jakeyu.top/2018/11/26/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://i.jakeyu.top/2018/11/26/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2018-11-26T00:43:19.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort.png"></p><span id="more"></span><h1 id="排序算法说明"><a href="#排序算法说明" class="headerlink" title="排序算法说明"></a>排序算法说明</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对一序列对象根据某个关键字进行排序。</p><h2 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h2><ul><li><strong>稳定</strong>：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</li><li><strong>内排序</strong>：所有排序操作都在内存中完成；</li><li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li><strong>时间复杂度</strong>：一个算法执行所耗费的时间。</li><li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]]  <span class="comment">//交换元素</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><blockquote><p>改进冒泡排序： 设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[i], arr[i + <span class="number">1</span>]] = [arr[i + <span class="number">1</span>], arr[i]] <span class="comment">// 交换元素</span></span><br><span class="line">        pos = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = pos</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动图"><a href="#动图" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort05.gif"></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul><li>最佳情况：T(n) &#x3D; O(n)</li></ul><p>当输入的数据已经是正序时</p><ul><li>最差情况：T(n) &#x3D; O(n<sup>2</sup>)</li></ul><p>当输入的数据是反序时</p><ul><li>平均情况：T(n) &#x3D; O(n<sup>2</sup>)</li></ul><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><blockquote><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n²)的时间复杂度…..所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p></blockquote><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><blockquote><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></blockquote><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ol><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> minIndex</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;耗时：&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动图-1"><a href="#动图-1" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort06.gif"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>最佳情况：T(n) &#x3D; O(n<sup>2</sup>)</li><li>最差情况：T(n) &#x3D; O(n<sup>2</sup>)</li><li>平均情况：T(n) &#x3D; O(n<sup>2</sup>)</li></ul><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><blockquote><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了…..</p></blockquote><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><blockquote><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p></blockquote><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span> (arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;插入排序耗时&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = key</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;插入排序耗时&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><blockquote><p>改进插入排序： 查找插入位置时使用二分查找的方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span> (array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;二分插入排序耗时：&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = array[i]; <span class="keyword">var</span> left = <span class="number">0</span>; <span class="keyword">var</span> right = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">var</span> middle = <span class="built_in">parseInt</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> (key &lt; array[middle]) &#123;</span><br><span class="line">        right = middle - <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left = middle + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= left; j--) &#123;</span><br><span class="line">      array[j + <span class="number">1</span>] = array[j]</span><br><span class="line">    &#125;</span><br><span class="line">    array[left] = key</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;二分插入排序耗时：&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动图-2"><a href="#动图-2" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort07.gif"></p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>最佳情况：输入数组按升序排列。T(n) &#x3D; O(n)</li><li>最坏情况：输入数组按降序排列。T(n) &#x3D; O(n<sup>2</sup>)</li><li>平均情况：T(n) &#x3D; O(n<sup>2</sup>)</li></ul><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><blockquote><p>1959年Shell发明； 第一个突破O(n^2)的排序算法；是简单插入排序的改进版；它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序</p></blockquote><h2 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h2><blockquote><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版》的合著者Robert Sedgewick提出的。</p></blockquote><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录<code>基本有序</code>时，再对全体记录进行依次直接插入排序。</p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ol><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.<span class="property">length</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> temp</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> gap = <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;希尔排序耗时:&#x27;</span>)</span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">5</span>) &#123; <span class="comment">// 动态定义间隔序列</span></span><br><span class="line">    gap = gap * <span class="number">5</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap / <span class="number">5</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;希尔排序耗时:&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shellSort</span>(arr))<span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><ul><li>最佳情况：T(n) &#x3D; O(nlog<sup>2</sup> n)</li><li>最坏情况：T(n) &#x3D; O(nlog<sup>2</sup> n)</li><li>平均情况：T(n) &#x3D;O(nlog n)</li></ul><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><blockquote><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。</p></blockquote><h2 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h2><blockquote><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p></blockquote><h2 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h2><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">let</span> left = []</span><br><span class="line">  <span class="keyword">let</span> right = []</span><br><span class="line">  <span class="keyword">let</span> center = arr.<span class="title function_">splice</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(arr / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; center) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([center], <span class="title function_">quickSort</span>(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动图-3"><a href="#动图-3" class="headerlink" title="动图"></a>动图</h2><p><img data-src="//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/dd9dc195a7331351671fe9ac4f7d5aa4.gif"></p><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><ul><li>最佳情况：T(n) &#x3D; O(nlog n)</li><li>最差情况：T(n) &#x3D; O(n<sup>2</sup>)</li><li>平均情况：T(n) &#x3D; O(nlog n)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/sort.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 instanceof 和 typeof 的实现原理</title>
    <link href="https://i.jakeyu.top/2018/11/13/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://i.jakeyu.top/2018/11/13/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2018-11-13T09:28:15.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="//blogimg.jakeyu.top/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/images.png"></p><span id="more"></span><h2 id="typeof-实现原理"><a href="#typeof-实现原理" class="headerlink" title="typeof 实现原理"></a>typeof 实现原理</h2><p><code>typeof</code> 一般被用于判断一个变量的类型，我们可以利用 <code>typeof</code> 来判断<code>number</code>, <code>string</code>, <code>object</code>,<code>boolean</code>, <code>function</code>, <code>undefined</code>, <code>symbol</code> 这七种类型，这种判断能帮助我们搞定一些问题，比如在判断不是 <code>object</code> 类型的数据的时候，<code>typeof</code>能比较清楚的告诉我们具体是哪一类的类型。但是，很遗憾的一点是，<code>typeof</code> 在判断一个<code> object</code>的数据的时候只能告诉我们这个数据是 <code>object</code>, 而不能细致的具体到是哪一种 <code>object</code>, 比如👉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">typeof</span> s === <span class="string">&#x27;object&#x27;</span><span class="comment">// true</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要想判断一个数据具体是哪一种 <code>object</code> 的时候，我们需要利用 <code>instanceof</code> 这个操作符来判断，这个我们后面会说到。</p><p>来谈谈关于 <code>typeof</code> 的原理吧，我们可以先想一个很有意思的问题，js 在底层是怎么存储数据的类型信息呢？或者说，一个 js 的变量，在它的底层实现中，它的类型信息是怎么实现的呢？</p><p>其实，js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息👉</p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>but, 对于 <code>undefined</code> 和 <code>null</code> 来说，这两个值的信息存储是有点特殊的:</p><ul><li><code>null</code>：所有机器码均为0</li><li><code>undefined</code>：用 −2^30 整数来表示</li></ul><p>所以，<code>typeof</code> 在判断 <code>null</code> 的时候就出现问题了，由于 <code>null</code> 的所有机器码均为0，因此直接被当做了对象来看待。</p><p>然而用 <code>instanceof</code> 来判断的话👉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="literal">null</span> <span class="comment">// TypeError: Right-hand side of &#x27;instanceof&#x27; is not an object</span></span><br></pre></td></tr></table></figure><p><code>null</code> 直接被判断为不是 <code>object</code>，这也是 <code>JavaScript</code> 的历史遗留bug，可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a>。</p><p>因此在用 <code>typeof</code> 来判断变量类型的时候，我们需要注意，最好是用 <code>typeof</code> 来判断基本数据类型（包括<code>symbol</code>），避免对 <code>null</code> 的判断。</p><p>还有一个不错的判断类型的方法，就是<code>Object.prototype.toString</code>，我们可以利用这个方法来对一个变量的类型来进行比较准确的判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>) <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;hi&#x27;</span>) <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;hi&#x27;</span>&#125;) <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>]) <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="number">1</span>)) <span class="comment">// &quot;[object Symbol]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="instanceof-操作符的实现原理"><a href="#instanceof-操作符的实现原理" class="headerlink" title="instanceof 操作符的实现原理"></a>instanceof 操作符的实现原理</h2><p>之前我们提到了 <code>instanceof</code> 来判断对象的具体类型，其实 <code>instanceof</code> 主要的作用就是判断一个实例是否属于某种类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当然，<code>instanceof</code> 也可以判断一个实例是否是其父类型或者祖先类型的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> programmer = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">programmer.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> <span class="title function_">programmer</span>()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br><span class="line">nicole <span class="keyword">instanceof</span> programmer <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这是 <code>instanceof</code> 的用法，但是 <code>instanceof</code> 的原理是什么呢？根据 ECMAScript 语言规范，我梳理了一下大概的思路，然后整理了一段代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">new_instance_of</span> (leftVaule, rightVaule) &#123;</span><br><span class="line">  <span class="keyword">let</span> rightProto = rightVaule.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">  leftVaule = leftVaule.<span class="property">__proto__</span> <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftVaule = leftVaule.<span class="property">__proto__</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实 <code>instanceof</code> 主要的实现原理就是只要右边变量的 <code>prototype</code> 在左边变量的原型链上即可。因此，<code>instanceof</code> 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 <code>prototype</code>，如果查找失败，则会返回 <code>false</code>，告诉我们左边变量并非是右边变量的实例。</p><p>看几个很有趣的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Foo</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要想全部理解 <code>instanceof</code> 的原理，除了我们刚刚提到的实现原理，我们还需要知道 JavaScript 的原型继承原理。</p><p>关于原型继承的原理，我简单用一张图来表示</p><p><img data-src="//blogimg.jakeyu.top/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/e46508fbcd140db304232aba89f41c83_articlex.jpeg"></p><p>我们知道每个 JavaScript 对象均有一个隐式的 <code>__proto__</code> 原型属性，而显式的原型属性是 <code>prototype</code>，只有 <code>Object.prototype.__proto__</code> 属性在未修改的情况下为 null 值。根据图上的原理，我们来梳理上面提到的几个有趣的 <code>instanceof</code> 使用的例子。</p><h3 id="Object-instanceof-Object"><a href="#Object-instanceof-Object" class="headerlink" title="Object instanceof Object"></a>Object instanceof Object</h3><p>由图可知，Object 的 <code>prototype</code> 属性是 <code>Object.prototype</code>, 而由于 Object 本身是一个函数，由 Function 所创建，所以 <code>Object.__proto__</code> 的值是 <code>Function.prototype</code>，而 <code>Function.prototype</code> 的 <code>__proto__</code> 属性是 <code>Object.prototype</code>，所以我们可以判断出，<code>Object instanceof Object</code> 的结果是 true 。用代码简单的表示一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">leftValue = <span class="title class_">Object</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">rightValue = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">leftValue === rightValue</span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure><p><code>Function instanceof Function</code> 和 <code>Function instanceof Object</code> 的运行过程与 <code>Object instanceof Object</code> 类似，故不再详说。</p><h3 id="Foo-instanceof-Foo"><a href="#Foo-instanceof-Foo" class="headerlink" title="Foo instanceof Foo"></a>Foo instanceof Foo</h3><p>Foo 函数的 <code>prototype</code> 属性是 <code>Foo.prototype</code>，而 Foo 的 <code>__proto__</code> 属性是 <code>Function.prototype</code>，由图可知，Foo 的原型链上并没有 <code>Foo.prototype</code> ，因此 <code>Foo instanceof Foo</code> 也就返回 false 。</p><p>我们用代码简单的表示一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">leftValue = <span class="title class_">Foo</span>, rightValue = <span class="title class_">Foo</span></span><br><span class="line">leftValue = <span class="title class_">Foo</span>.<span class="property">__proto</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">rightValue = <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 第三次判断</span></span><br><span class="line">leftValue === <span class="literal">null</span></span><br><span class="line"><span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure><h3 id="Foo-instanceof-Object"><a href="#Foo-instanceof-Object" class="headerlink" title="Foo instanceof Object"></a>Foo instanceof Object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">leftValue = <span class="title class_">Foo</span>, rightValue = <span class="title class_">Object</span></span><br><span class="line">leftValue = <span class="title class_">Foo</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">rightValue = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue != rightValue</span><br><span class="line">leftValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">leftValue === rightValue</span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure><h3 id="Foo-instanceof-Function"><a href="#Foo-instanceof-Function" class="headerlink" title="Foo instanceof Function"></a>Foo instanceof Function</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">leftValue = <span class="title class_">Foo</span>, rightValue = <span class="title class_">Function</span></span><br><span class="line">leftValue = <span class="title class_">Foo</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">rightValue = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">leftValue === rightValue</span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说，我们使用 <code>typeof</code> 来判断基本数据类型是 ok 的，不过需要注意当用 <code>typeof</code> 来判断 null 类型时的问题，如果想要判断一个对象的具体类型可以考虑用 <code>instanceof</code>，但是 <code>instanceof</code> 也可能判断不准确，比如一个数组，他可以被 <code>instanceof</code> 判断为 Object。所以我们要想比较准确的判断对象实例的类型时，可以采取 <code>Object.prototype.toString.call</code> 方法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5b0b9b9051882515773ae714">https://juejin.im/post/5b0b9b9051882515773ae714</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;//blogimg.jakeyu.top/%E6%B5%85%E8%B0%88-instanceof-%E5%92%8C-typeof-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/images.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://i.jakeyu.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>nodejs调用小程序生成二维码接口，并保存成图片</title>
    <link href="https://i.jakeyu.top/2018/10/25/nodejs%E8%B0%83%E7%94%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%B9%B6%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87/"/>
    <id>https://i.jakeyu.top/2018/10/25/nodejs%E8%B0%83%E7%94%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%B9%B6%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87/</id>
    <published>2018-10-25T22:08:22.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>小程序生成二维码接口返回的是二进制，所以我们要把二进制流保存成图片，再返回给前端。</p><p>这里我分别用<code>axios</code>和<code>request</code>实现请求</p><span id="more"></span><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">data</span>: &#123; access_token &#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`https://api.weixin.qq.com/wxa/getwxacode?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;path.jpg&#x27;</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">post</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`https://api.weixin.qq.com/wxa/getwxacode?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">json</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">body</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(imgUrl)</span><br><span class="line">&#125;).<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;path.png&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;小程序生成二维码接口返回的是二进制，所以我们要把二进制流保存成图片，再返回给前端。&lt;/p&gt;
&lt;p&gt;这里我分别用&lt;code&gt;axios&lt;/code&gt;和&lt;code&gt;request&lt;/code&gt;实现请求&lt;/p&gt;</summary>
    
    
    
    <category term="小程序" scheme="https://i.jakeyu.top/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="小程序" scheme="https://i.jakeyu.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>现实</title>
    <link href="https://i.jakeyu.top/2018/10/22/%E7%8E%B0%E5%AE%9E/"/>
    <id>https://i.jakeyu.top/2018/10/22/%E7%8E%B0%E5%AE%9E/</id>
    <published>2018-10-22T21:23:45.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>本不打算在这个博客里面写一些矫情的文字，我有另一个不公开的博客。但是这篇，我想写在这里。</p><span id="more"></span><p>跟她分手了，原因也很简单————现实。</p><p>她在美国读书，家境殷实，而我只是一个出身农村普通家庭，从小与水稻、大地为伴。</p><p>我一直在努力赚钱，喜欢杭州，想要留在这里。本来异国恋已经很难了，而且我早有心理准备，没想到这一天到来的时候还是会无法释怀。</p><p>20多岁的女孩子总归要考虑结婚，未来的问题，买房紧一紧首付还是有的，可是以后呢，跟着我一起吃苦，还房贷。如果再有一个宝宝，她的生活质量会明显下降，她也说过如果在一起会让生活质量下降，那就没必要在一起了。</p><p>在一起的这段时间我很开心，她脾气也很好，没有公主脾气，我也全心全意去爱她。开始的时候就清楚的知道想到走到最后很难，即便是她这关过了，她父母呢？哪个女孩子的家长愿意让自己的女儿吃苦。家庭条件我无法选择，我也知道什么都不能靠家里，可是我刚毕业，几乎没有存款。二十多岁的男生，如果不靠家里，又有谁有钱呢，可是哪个女孩子愿意用青春去赌一个未知的未来？她想要的生活我短时间给不了，所以只能放弃，即便很痛苦。</p><p>年轻的时候我想不明白为什么会因为外在因素而导致两个相爱的人分道扬镳，想不通为什么一方家长的不同意导致本来都谈婚乱嫁的新人分开……小时候告诉自己谈恋爱一定不分手，可现在洋洋洒洒已经七段感情，但是真正算是好好谈恋爱的也就那么两段。</p><p>我们再也不是十八岁，现在看到还在上学，无忧无虑的孩子们只能感叹一句“年轻真好”，那时候我们可以天马行空，做着很多梦，哥几个在一起聊得都是毕业赚多少多少钱，各种游戏开黑，女人等，一旦毕业工作，那些幻想都闭口不谈，慢慢的被现实磨灭。我们几个兄弟有一个群，大学的时候经常闲聊，隔三差五讨论去哪玩、去哪喝酒，晚上喊着楼下来抽一根，无忧无虑，而现在更多的是车子、房子、工资，互相吹捧，用着一些我很讨厌的语气，气氛甚是诡异。而且大家基本都很少说话，一部分是因为大家都忙，一部分是因为感情变了。大家都为各自的生活忙碌奔波，王小波说过：“生活就是个缓慢受锤的过程”。</p><p>愿那些跟我一样，在大城市挣扎的人们都不会被这魔幻的地方所抛弃。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本不打算在这个博客里面写一些矫情的文字，我有另一个不公开的博客。但是这篇，我想写在这里。&lt;/p&gt;</summary>
    
    
    
    <category term="随心" scheme="https://i.jakeyu.top/categories/%E9%9A%8F%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>vue webpack模板开启局域网访问</title>
    <link href="https://i.jakeyu.top/2018/09/20/vue-webpack%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
    <id>https://i.jakeyu.top/2018/09/20/vue-webpack%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE/</id>
    <published>2018-09-20T10:18:51.000Z</published>
    <updated>2023-02-07T12:59:04.224Z</updated>
    
    <content type="html"><![CDATA[<p>修改<code>config/index.js</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; networkInterfaces &#125; = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIpAddress</span> = (<span class="params"></span>) =&gt; (<span class="title function_">networkInterfaces</span>().<span class="property">en0</span> || <span class="title function_">networkInterfaces</span>().<span class="property">en4</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">&#123; family &#125;</span>) =&gt;</span> family === <span class="string">&#x27;IPv4&#x27;</span>)[<span class="number">0</span>].<span class="property">address</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">host</span>: <span class="title function_">getIpAddress</span>()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;修改&lt;code&gt;config/index.js&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    <category term="前端" scheme="https://i.jakeyu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="VUE" scheme="https://i.jakeyu.top/tags/VUE/"/>
    
  </entry>
  
</feed>
